
Laser-Engraver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800be80  0800be80  0000ce80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c450  0800c450  0000e1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c450  0800c450  0000d450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c458  0800c458  0000e1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c458  0800c458  0000d458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c45c  0800c45c  0000d45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800c460  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001f4  0800c654  0000e1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800c654  0000e6dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d5a  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003157  00000000  00000000  00024f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  000280d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107b  00000000  00000000  000295f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f05  00000000  00000000  0002a673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adcc  00000000  00000000  00054578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8f6c  00000000  00000000  0006f344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001682b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cfc  00000000  00000000  001682f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be68 	.word	0x0800be68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800be68 	.word	0x0800be68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)
{
 8001040:	b40f      	push	{r0, r1, r2, r3}
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001056:	480b      	ldr	r0, [pc, #44]	@ (8001084 <myprintf+0x44>)
 8001058:	f008 fd62 	bl	8009b20 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <myprintf+0x44>)
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	4905      	ldr	r1, [pc, #20]	@ (8001084 <myprintf+0x44>)
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <myprintf+0x48>)
 8001072:	f004 f923 	bl	80052bc <HAL_UART_Transmit>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr
 8001084:	200003f4 	.word	0x200003f4
 8001088:	20000358 	.word	0x20000358

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	f5ad 6d9a 	sub.w	sp, sp, #1232	@ 0x4d0
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f001 f912 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f886 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f9cc 	bl	8001438 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010a0:	f000 f99a 	bl	80013d8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80010a4:	f000 f948 	bl	8001338 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010a8:	f000 f96e 	bl	8001388 <MX_TIM17_Init>
  MX_SPI1_Init();
 80010ac:	f000 f8ce 	bl	800124c <MX_SPI1_Init>
  MX_FATFS_Init();
 80010b0:	f004 fe62 	bl	8005d78 <MX_FATFS_Init>
  MX_TIM7_Init();
 80010b4:	f000 f908 	bl	80012c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  	  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80010b8:	4833      	ldr	r0, [pc, #204]	@ (8001188 <main+0xfc>)
 80010ba:	f7ff ffc1 	bl	8001040 <myprintf>

      HAL_Delay(1000); //a short delay is important to let the SD card settle
 80010be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c2:	f001 f93b 	bl	800233c <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 80010c6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80010ca:	2201      	movs	r2, #1
 80010cc:	492f      	ldr	r1, [pc, #188]	@ (800118c <main+0x100>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 f8d8 	bl	8008284 <f_mount>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
      if (fres != FR_OK) {
 80010da:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <main+0x66>
    	myprintf("f_mount error (%i)\r\n", fres);
 80010e2:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 80010e6:	4619      	mov	r1, r3
 80010e8:	4829      	ldr	r0, [pc, #164]	@ (8001190 <main+0x104>)
 80010ea:	f7ff ffa9 	bl	8001040 <myprintf>
    	while(1);
 80010ee:	bf00      	nop
 80010f0:	e7fd      	b.n	80010ee <main+0x62>
      }

      fres = f_open(&fil, "test.txt", FA_READ);
 80010f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80010f6:	2201      	movs	r2, #1
 80010f8:	4926      	ldr	r1, [pc, #152]	@ (8001194 <main+0x108>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f007 f908 	bl	8008310 <f_open>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
	  if (fres != FR_OK) {
 8001106:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <main+0x92>
		myprintf("f_open error (%i)\r\n", fres);
 800110e:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 8001112:	4619      	mov	r1, r3
 8001114:	4820      	ldr	r0, [pc, #128]	@ (8001198 <main+0x10c>)
 8001116:	f7ff ff93 	bl	8001040 <myprintf>
		while(1);
 800111a:	bf00      	nop
 800111c:	e7fd      	b.n	800111a <main+0x8e>
	  }
	  myprintf("I was able to open 'gtest.txt' for reading!\r\n");
 800111e:	481f      	ldr	r0, [pc, #124]	@ (800119c <main+0x110>)
 8001120:	f7ff ff8e 	bl	8001040 <myprintf>


  HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin,0);
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	481d      	ldr	r0, [pc, #116]	@ (80011a0 <main+0x114>)
 800112a:	f001 fbcf 	bl	80028cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin,0);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001138:	f001 fbc8 	bl	80028cc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SPI1_CD_GPIO_Port, SPI1_CD_Pin))
 800113c:	2180      	movs	r1, #128	@ 0x80
 800113e:	4819      	ldr	r0, [pc, #100]	@ (80011a4 <main+0x118>)
 8001140:	f001 fbac 	bl	800289c <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f8      	beq.n	800113c <main+0xb0>
	  {
		  BYTE readBuf[100];
		  TCHAR* rres = f_gets((TCHAR*)readBuf, 100, &fil);
 800114a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2164      	movs	r1, #100	@ 0x64
 8001152:	4618      	mov	r0, r3
 8001154:	f007 fc7d 	bl	8008a52 <f_gets>
 8001158:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
		  if(rres != 0) {
 800115c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <main+0xe2>
			  GcommandParse((TCHAR*)readBuf);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa54 	bl	8001614 <GcommandParse>
 800116c:	e7e6      	b.n	800113c <main+0xb0>
		  } else {
			f_close(&fil);
 800116e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001172:	4618      	mov	r0, r3
 8001174:	f007 fc43 	bl	80089fe <f_close>
			f_mount(NULL, "", 0);
 8001178:	2200      	movs	r2, #0
 800117a:	4904      	ldr	r1, [pc, #16]	@ (800118c <main+0x100>)
 800117c:	2000      	movs	r0, #0
 800117e:	f007 f881 	bl	8008284 <f_mount>
			while(1){}
 8001182:	bf00      	nop
 8001184:	e7fd      	b.n	8001182 <main+0xf6>
 8001186:	bf00      	nop
 8001188:	0800be80 	.word	0x0800be80
 800118c:	0800bea0 	.word	0x0800bea0
 8001190:	0800bea4 	.word	0x0800bea4
 8001194:	0800bebc 	.word	0x0800bebc
 8001198:	0800bec8 	.word	0x0800bec8
 800119c:	0800bedc 	.word	0x0800bedc
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b096      	sub	sp, #88	@ 0x58
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2244      	movs	r2, #68	@ 0x44
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fcc0 	bl	8009b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ce:	f001 fbd5 	bl	800297c <HAL_PWREx_ControlVoltageScaling>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d8:	f000 fd78 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011dc:	2302      	movs	r3, #2
 80011de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e6:	2310      	movs	r3, #16
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ee:	2302      	movs	r3, #2
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011f6:	230a      	movs	r3, #10
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011fa:	2307      	movs	r3, #7
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011fe:	2302      	movs	r3, #2
 8001200:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001202:	2302      	movs	r3, #2
 8001204:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fc0c 	bl	8002a28 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001216:	f000 fd59 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121e:	2303      	movs	r3, #3
 8001220:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	2104      	movs	r1, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f001 ffd4 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800123e:	f000 fd45 	bl	8001ccc <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3758      	adds	r7, #88	@ 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <MX_SPI1_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800125c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125e:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001266:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800126a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_SPI1_Init+0x74>)
 800126e:	2202      	movs	r2, #2
 8001270:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001274:	2201      	movs	r2, #1
 8001276:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_SPI1_Init+0x74>)
 800127a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800127e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001282:	2210      	movs	r2, #16
 8001284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_SPI1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_SPI1_Init+0x74>)
 800129a:	2207      	movs	r2, #7
 800129c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_SPI1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_SPI1_Init+0x74>)
 80012ac:	f002 feaa 	bl	8004004 <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012b6:	f000 fd09 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000210 	.word	0x20000210
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <MX_TIM7_Init+0x6c>)
 80012dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40000;
 80012de:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012e0:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80012e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM7_Init+0x68>)
 80012fc:	f003 fc1e 	bl	8004b3c <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001306:	f000 fce1 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM7_Init+0x68>)
 8001318:	f003 fedc 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001322:	f000 fcd3 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000274 	.word	0x20000274
 8001334:	40001400 	.word	0x40001400

08001338 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_TIM16_Init+0x48>)
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <MX_TIM16_Init+0x4c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_TIM16_Init+0x48>)
 8001344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001348:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <MX_TIM16_Init+0x48>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 400;
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_TIM16_Init+0x48>)
 8001352:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001356:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_TIM16_Init+0x48>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_TIM16_Init+0x48>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_TIM16_Init+0x48>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_TIM16_Init+0x48>)
 800136c:	f003 fbe6 	bl	8004b3c <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001376:	f000 fca9 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002c0 	.word	0x200002c0
 8001384:	40014400 	.word	0x40014400

08001388 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_TIM17_Init+0x48>)
 800138e:	4a11      	ldr	r2, [pc, #68]	@ (80013d4 <MX_TIM17_Init+0x4c>)
 8001390:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1000;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_TIM17_Init+0x48>)
 8001394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001398:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <MX_TIM17_Init+0x48>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 400;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_TIM17_Init+0x48>)
 80013a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_TIM17_Init+0x48>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_TIM17_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_TIM17_Init+0x48>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_TIM17_Init+0x48>)
 80013bc:	f003 fbbe 	bl	8004b3c <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80013c6:	f000 fc81 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000030c 	.word	0x2000030c
 80013d4:	40014800 	.word	0x40014800

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <MX_USART2_UART_Init+0x5c>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_USART2_UART_Init+0x58>)
 800141c:	f003 ff00 	bl	8005220 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001426:	f000 fc51 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000358 	.word	0x20000358
 8001434:	40004400 	.word	0x40004400

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b5b      	ldr	r3, [pc, #364]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a5a      	ldr	r2, [pc, #360]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b58      	ldr	r3, [pc, #352]	@ (80015bc <MX_GPIO_Init+0x184>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001466:	4b55      	ldr	r3, [pc, #340]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a54      	ldr	r2, [pc, #336]	@ (80015bc <MX_GPIO_Init+0x184>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b52      	ldr	r3, [pc, #328]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b4f      	ldr	r3, [pc, #316]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <MX_GPIO_Init+0x184>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <MX_GPIO_Init+0x184>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a48      	ldr	r2, [pc, #288]	@ (80015bc <MX_GPIO_Init+0x184>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b46      	ldr	r3, [pc, #280]	@ (80015bc <MX_GPIO_Init+0x184>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, YPUL_Pin|XDIR_Pin|XEN_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80014b4:	4842      	ldr	r0, [pc, #264]	@ (80015c0 <MX_GPIO_Init+0x188>)
 80014b6:	f001 fa09 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEN_Pin|YDIR_Pin|XPUL_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c4:	f001 fa02 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2140      	movs	r1, #64	@ 0x40
 80014cc:	483c      	ldr	r0, [pc, #240]	@ (80015c0 <MX_GPIO_Init+0x188>)
 80014ce:	f001 f9fd 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4836      	ldr	r0, [pc, #216]	@ (80015c4 <MX_GPIO_Init+0x18c>)
 80014ea:	f001 f82d 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4830      	ldr	r0, [pc, #192]	@ (80015c4 <MX_GPIO_Init+0x18c>)
 8001502:	f001 f821 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : shutdownButton_Pin */
  GPIO_InitStruct.Pin = shutdownButton_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(shutdownButton_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151e:	f001 f813 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : YPUL_Pin XDIR_Pin XEN_Pin */
  GPIO_InitStruct.Pin = YPUL_Pin|XDIR_Pin|XEN_Pin;
 8001522:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4821      	ldr	r0, [pc, #132]	@ (80015c0 <MX_GPIO_Init+0x188>)
 800153c:	f001 f804 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CD_Pin */
  GPIO_InitStruct.Pin = SPI1_CD_Pin;
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CD_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <MX_GPIO_Init+0x18c>)
 8001554:	f000 fff8 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : YEN_Pin YDIR_Pin XPUL_Pin */
  GPIO_InitStruct.Pin = YEN_Pin|YDIR_Pin|XPUL_Pin;
 8001558:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f000 ffe8 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001578:	2340      	movs	r3, #64	@ 0x40
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_GPIO_Init+0x188>)
 8001590:	f000 ffda 	bl	8002548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2007      	movs	r0, #7
 800159a:	f000 ffab 	bl	80024f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800159e:	2007      	movs	r0, #7
 80015a0:	f000 ffc4 	bl	800252c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2028      	movs	r0, #40	@ 0x28
 80015aa:	f000 ffa3 	bl	80024f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ae:	2028      	movs	r0, #40	@ 0x28
 80015b0:	f000 ffbc 	bl	800252c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	@ 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800

080015c8 <HAL_GPIO_EXTI_Callback>:
	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
	  HAL_TIM_Base_Start_IT(&htim17);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == shutdownButton_Pin)
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d113      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x38>
//			Xcurrent = 0;
//			Ycurrent = 0;
//		}
//		else
//		{
		HAL_GPIO_WritePin(XEN_GPIO_Port, XEN_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	480a      	ldr	r0, [pc, #40]	@ (8001608 <HAL_GPIO_EXTI_Callback+0x40>)
 80015de:	f001 f975 	bl	80028cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEN_GPIO_Port, YEN_Pin, 1);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f001 f96e 	bl	80028cc <HAL_GPIO_WritePin>

		HAL_TIM_Base_Stop_IT(&htim16);
 80015f0:	4806      	ldr	r0, [pc, #24]	@ (800160c <HAL_GPIO_EXTI_Callback+0x44>)
 80015f2:	f003 fb6b 	bl	8004ccc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim17);
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x48>)
 80015f8:	f003 fb68 	bl	8004ccc <HAL_TIM_Base_Stop_IT>

		while(1){}
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HAL_GPIO_EXTI_Callback+0x34>
//		}
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	48000400 	.word	0x48000400
 800160c:	200002c0 	.word	0x200002c0
 8001610:	2000030c 	.word	0x2000030c

08001614 <GcommandParse>:

void GcommandParse(TCHAR* line1)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b09f      	sub	sp, #124	@ 0x7c
 8001618:	af04      	add	r7, sp, #16
 800161a:	6078      	str	r0, [r7, #4]

	  // Creates local variables for the different possible commands in Gcode (max 10 characters)
	  char Gcommand[10] = "";
 800161c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	811a      	strh	r2, [r3, #8]
	  char Xcoordinate[10] = "";
 8001628:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	811a      	strh	r2, [r3, #8]
	  char Ycoordinate[10] = "";
 8001634:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	811a      	strh	r2, [r3, #8]
	  char Zcoordinate[10] = "";
 8001640:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	811a      	strh	r2, [r3, #8]
	  char feedRate[10] = "";
 800164c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	811a      	strh	r2, [r3, #8]
	  char laserSpeed[10] = "";
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	811a      	strh	r2, [r3, #8]

	  int i = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	667b      	str	r3, [r7, #100]	@ 0x64
	  // Initiates a for loop which loops each character of the Gcode line
	  while (1)
	  {

		  // Creates a temporary variable for the Gcode command and the value attached to it
		  char command = line1[i];	// assigns the first value of the Gcode as the command
 8001668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		  char newValue[10] = "";
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	811a      	strh	r2, [r3, #8]

		  int j = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	663b      	str	r3, [r7, #96]	@ 0x60
		  i++;
 8001684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001686:	3301      	adds	r3, #1
 8001688:	667b      	str	r3, [r7, #100]	@ 0x64

		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 800168a:	e00f      	b.n	80016ac <GcommandParse+0x98>
		  {

			  newValue[j] = line1[i];
 800168c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	7819      	ldrb	r1, [r3, #0]
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800169a:	4413      	add	r3, r2
 800169c:	460a      	mov	r2, r1
 800169e:	701a      	strb	r2, [r3, #0]
			  i++;
 80016a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016a2:	3301      	adds	r3, #1
 80016a4:	667b      	str	r3, [r7, #100]	@ 0x64
			  j++;
 80016a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016a8:	3301      	adds	r3, #1
 80016aa:	663b      	str	r3, [r7, #96]	@ 0x60
		  while ((line1[i] != ' ') && (line1[i] != '\0') && (line1[i] != '\n'))	// while loop that loops through the rest of the command and stores the value in newValue
 80016ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d00b      	beq.n	80016d0 <GcommandParse+0xbc>
 80016b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <GcommandParse+0xbc>
 80016c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b0a      	cmp	r3, #10
 80016ce:	d1dd      	bne.n	800168c <GcommandParse+0x78>
		  }
		  newValue[j] = '\0';	//adds the null operator to the end of the newValue
 80016d0:	f107 020c 	add.w	r2, r7, #12
 80016d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016d6:	4413      	add	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

		  // Switch statement for the value of command to split the current word into it's variable
		  switch (command)
 80016dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80016e0:	3b46      	subs	r3, #70	@ 0x46
 80016e2:	2b14      	cmp	r3, #20
 80016e4:	d86b      	bhi.n	80017be <GcommandParse+0x1aa>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <GcommandParse+0xd8>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080017ad 	.word	0x080017ad
 80016f0:	08001741 	.word	0x08001741
 80016f4:	080017bf 	.word	0x080017bf
 80016f8:	080017bf 	.word	0x080017bf
 80016fc:	080017bf 	.word	0x080017bf
 8001700:	080017bf 	.word	0x080017bf
 8001704:	080017bf 	.word	0x080017bf
 8001708:	08001789 	.word	0x08001789
 800170c:	080017bf 	.word	0x080017bf
 8001710:	080017bf 	.word	0x080017bf
 8001714:	080017bf 	.word	0x080017bf
 8001718:	080017bf 	.word	0x080017bf
 800171c:	080017bf 	.word	0x080017bf
 8001720:	0800179b 	.word	0x0800179b
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	08001753 	.word	0x08001753
 8001738:	08001765 	.word	0x08001765
 800173c:	08001777 	.word	0x08001777
		  {
		  case 'G':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Gcommand variable
 8001740:	f107 010c 	add.w	r1, r7, #12
 8001744:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001748:	220a      	movs	r2, #10
 800174a:	4618      	mov	r0, r3
 800174c:	f008 fa10 	bl	8009b70 <strncpy>
				break;
 8001750:	e036      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'X':
			  strncpy(Xcoordinate, newValue, 10);	// copies the value in newValue to the Xcoordinate variable
 8001752:	f107 010c 	add.w	r1, r7, #12
 8001756:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800175a:	220a      	movs	r2, #10
 800175c:	4618      	mov	r0, r3
 800175e:	f008 fa07 	bl	8009b70 <strncpy>
				break;
 8001762:	e02d      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'Y':
			  strncpy(Ycoordinate, newValue, 10);	// copies the value in newValue to the Ycoordinate variable
 8001764:	f107 010c 	add.w	r1, r7, #12
 8001768:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800176c:	220a      	movs	r2, #10
 800176e:	4618      	mov	r0, r3
 8001770:	f008 f9fe 	bl	8009b70 <strncpy>
				break;
 8001774:	e024      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'Z':
			  strncpy(Zcoordinate, newValue, 10);	// copies the value in newValue to the Zcoordinate variable
 8001776:	f107 010c 	add.w	r1, r7, #12
 800177a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800177e:	220a      	movs	r2, #10
 8001780:	4618      	mov	r0, r3
 8001782:	f008 f9f5 	bl	8009b70 <strncpy>
				break;
 8001786:	e01b      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'M':
			  strncpy(Gcommand, newValue, 10);	// copies the value in newValue to the Mcommand variable
 8001788:	f107 010c 	add.w	r1, r7, #12
 800178c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001790:	220a      	movs	r2, #10
 8001792:	4618      	mov	r0, r3
 8001794:	f008 f9ec 	bl	8009b70 <strncpy>
				break;
 8001798:	e012      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'S':
			  strncpy(laserSpeed, newValue, 10);	// copies the value in newValue to the laserSpeed variable
 800179a:	f107 010c 	add.w	r1, r7, #12
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	220a      	movs	r2, #10
 80017a4:	4618      	mov	r0, r3
 80017a6:	f008 f9e3 	bl	8009b70 <strncpy>
				break;
 80017aa:	e009      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'F':
			  strncpy(feedRate, newValue, 10);	// copies the value in newValue to the feedRate variable
 80017ac:	f107 010c 	add.w	r1, r7, #12
 80017b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b4:	220a      	movs	r2, #10
 80017b6:	4618      	mov	r0, r3
 80017b8:	f008 f9da 	bl	8009b70 <strncpy>
				break;
 80017bc:	e000      	b.n	80017c0 <GcommandParse+0x1ac>
		  case 'R':
				break;
		  default:
				break;
 80017be:	bf00      	nop
		  }
		  if (line1[i] == '\n')
 80017c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b0a      	cmp	r3, #10
 80017ca:	d109      	bne.n	80017e0 <GcommandParse+0x1cc>
			  break;
		  i++;
	  }
	  if (strcmp(Gcommand,"G")){
 80017cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d0:	4921      	ldr	r1, [pc, #132]	@ (8001858 <GcommandParse+0x244>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fcfc 	bl	80001d0 <strcmp>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <GcommandParse+0x1d4>
 80017de:	e028      	b.n	8001832 <GcommandParse+0x21e>
		  i++;
 80017e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017e2:	3301      	adds	r3, #1
 80017e4:	667b      	str	r3, [r7, #100]	@ 0x64
	  {
 80017e6:	e73f      	b.n	8001668 <GcommandParse+0x54>
		  GcommandExecute(Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);	// Calls the Gcommand Execute function which will execute the given command
 80017e8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80017ec:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80017f0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80017f4:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	f000 f82f 	bl	8001868 <GcommandExecute>
		  myprintf("Gcommand: %s Xcoordinate: %s Ycoordinate: %s Zcoordinate: %s feedRate: %s laserSpeed %s\n", Gcommand, Xcoordinate, Ycoordinate, Zcoordinate, feedRate, laserSpeed);
 800180a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800180e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001812:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4603      	mov	r3, r0
 800182a:	480c      	ldr	r0, [pc, #48]	@ (800185c <GcommandParse+0x248>)
 800182c:	f7ff fc08 	bl	8001040 <myprintf>
	  }
	  else if (strcmp(Gcommand,"M")){
		  McommandExecute(Gcommand);
	  }
}
 8001830:	e00d      	b.n	800184e <GcommandParse+0x23a>
	  else if (strcmp(Gcommand,"M")){
 8001832:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001836:	490a      	ldr	r1, [pc, #40]	@ (8001860 <GcommandParse+0x24c>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fcc9 	bl	80001d0 <strcmp>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <GcommandParse+0x23a>
		  McommandExecute(Gcommand);
 8001844:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f8ed 	bl	8001a28 <McommandExecute>
}
 800184e:	bf00      	nop
 8001850:	376c      	adds	r7, #108	@ 0x6c
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	0800bf0c 	.word	0x0800bf0c
 800185c:	0800bf10 	.word	0x0800bf10
 8001860:	0800bf6c 	.word	0x0800bf6c
 8001864:	00000000 	.word	0x00000000

08001868 <GcommandExecute>:
	*s = '\0';
}

// Command Execute takes the parameters from the Gcode line and controls the motors accordingly
void GcommandExecute(char Gcommand[], char Xcommand[], char Ycommand[], char Zcommand[], char feedRate[], char laserSpeed[])
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]

	if ((!strcmp(Gcommand,"0")) || (!strcmp(Gcommand,"1")))	// If the Gcode command is G0, runs with rapid positioning (full speed move)
 8001876:	4962      	ldr	r1, [pc, #392]	@ (8001a00 <GcommandExecute+0x198>)
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7fe fca9 	bl	80001d0 <strcmp>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <GcommandExecute+0x2c>
 8001884:	495f      	ldr	r1, [pc, #380]	@ (8001a04 <GcommandExecute+0x19c>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7fe fca2 	bl	80001d0 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 80ac 	bne.w	80019ec <GcommandExecute+0x184>
	{
		if (Xcommand[0] != '\0')
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <GcommandExecute+0x5c>
		{
			Xend = ((1600 / 43.39) * atof(Xcommand));	// Converts Xcommand to an int, changes units to .1 mms and updates the global variable
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f007 f972 	bl	8008b86 <atof>
 80018a2:	ec51 0b10 	vmov	r0, r1, d0
 80018a6:	a354      	add	r3, pc, #336	@ (adr r3, 80019f8 <GcommandExecute+0x190>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe feb4 	bl	8000618 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f95e 	bl	8000b78 <__aeabi_d2iz>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a52      	ldr	r2, [pc, #328]	@ (8001a08 <GcommandExecute+0x1a0>)
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e003      	b.n	80018cc <GcommandExecute+0x64>
		} else
		{
			Xend = Xcurrent;
 80018c4:	4b51      	ldr	r3, [pc, #324]	@ (8001a0c <GcommandExecute+0x1a4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a08 <GcommandExecute+0x1a0>)
 80018ca:	6013      	str	r3, [r2, #0]
		}
		if (Ycommand[0] != '\0')
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <GcommandExecute+0x94>
		{
			Yend = ((1600 / 43.39) * atof(Ycommand));	// Converts Ycommand to an int, changes units to .1 mms and updates the global variable
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f007 f956 	bl	8008b86 <atof>
 80018da:	ec51 0b10 	vmov	r0, r1, d0
 80018de:	a346      	add	r3, pc, #280	@ (adr r3, 80019f8 <GcommandExecute+0x190>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe98 	bl	8000618 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f942 	bl	8000b78 <__aeabi_d2iz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a46      	ldr	r2, [pc, #280]	@ (8001a10 <GcommandExecute+0x1a8>)
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e003      	b.n	8001904 <GcommandExecute+0x9c>
		} else
		{
			Yend = Ycurrent;
 80018fc:	4b45      	ldr	r3, [pc, #276]	@ (8001a14 <GcommandExecute+0x1ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a43      	ldr	r2, [pc, #268]	@ (8001a10 <GcommandExecute+0x1a8>)
 8001902:	6013      	str	r3, [r2, #0]
		}

		// Calculates distance to be traveled
		float Xdistance = Xend - Xcurrent;
 8001904:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <GcommandExecute+0x1a0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <GcommandExecute+0x1a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001916:	edc7 7a07 	vstr	s15, [r7, #28]
		float Ydistance = Yend - Ycurrent;
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <GcommandExecute+0x1a8>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <GcommandExecute+0x1ac>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192c:	edc7 7a06 	vstr	s15, [r7, #24]

		// Updates the Direction variable and writes to the pin
		if (Xdistance > 0)
 8001930:	edd7 7a07 	vldr	s15, [r7, #28]
 8001934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193c:	dd08      	ble.n	8001950 <GcommandExecute+0xe8>
		{
			XDIR = 1;
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <GcommandExecute+0x1b0>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 1);
 8001944:	2201      	movs	r2, #1
 8001946:	2110      	movs	r1, #16
 8001948:	4834      	ldr	r0, [pc, #208]	@ (8001a1c <GcommandExecute+0x1b4>)
 800194a:	f000 ffbf 	bl	80028cc <HAL_GPIO_WritePin>
 800194e:	e00e      	b.n	800196e <GcommandExecute+0x106>
		} else if (Xdistance < 0)
 8001950:	edd7 7a07 	vldr	s15, [r7, #28]
 8001954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d507      	bpl.n	800196e <GcommandExecute+0x106>
		{
			XDIR = 0;
 800195e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <GcommandExecute+0x1b0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(XDIR_GPIO_Port, XDIR_Pin, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2110      	movs	r1, #16
 8001968:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <GcommandExecute+0x1b4>)
 800196a:	f000 ffaf 	bl	80028cc <HAL_GPIO_WritePin>
		}

		if (Ydistance > 0)
 800196e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	dd0a      	ble.n	8001992 <GcommandExecute+0x12a>
		{
			YDIR = 1;
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <GcommandExecute+0x1b8>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 1);
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198c:	f000 ff9e 	bl	80028cc <HAL_GPIO_WritePin>
 8001990:	e010      	b.n	80019b4 <GcommandExecute+0x14c>
		} else if (Ydistance < 0)
 8001992:	edd7 7a06 	vldr	s15, [r7, #24]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d509      	bpl.n	80019b4 <GcommandExecute+0x14c>
		{
			YDIR = 0;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <GcommandExecute+0x1b8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(YDIR_GPIO_Port, YDIR_Pin, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b0:	f000 ff8c 	bl	80028cc <HAL_GPIO_WritePin>
		}

		int laser = atoi(laserSpeed);	// Converts laserSpeed to an int
 80019b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019b6:	f007 f8e9 	bl	8008b8c <atoi>
 80019ba:	6178      	str	r0, [r7, #20]

		if (feedRate[0] != '\0')
 80019bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <GcommandExecute+0x168>
		{
			feed = atoi(feedRate);	// Converts feedRate to an int
 80019c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019c6:	f007 f8e1 	bl	8008b8c <atoi>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a15      	ldr	r2, [pc, #84]	@ (8001a24 <GcommandExecute+0x1bc>)
 80019ce:	6013      	str	r3, [r2, #0]
		}

		LaserEngrave(Xdistance, Ydistance);	// Calls the laserEngrave function
 80019d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e0:	ee17 1a90 	vmov	r1, s15
 80019e4:	ee17 0a10 	vmov	r0, s14
 80019e8:	f000 f836 	bl	8001a58 <LaserEngrave>

	}

	// We'll need to add all of the G commands here

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	f3af 8000 	nop.w
 80019f8:	47af49cf 	.word	0x47af49cf
 80019fc:	40426ffb 	.word	0x40426ffb
 8001a00:	0800bf70 	.word	0x0800bf70
 8001a04:	0800bf74 	.word	0x0800bf74
 8001a08:	200003e8 	.word	0x200003e8
 8001a0c:	200003e0 	.word	0x200003e0
 8001a10:	200003ec 	.word	0x200003ec
 8001a14:	200003e4 	.word	0x200003e4
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	20000004 	.word	0x20000004
 8001a24:	200003f0 	.word	0x200003f0

08001a28 <McommandExecute>:

void McommandExecute(char Mcommand[])
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	if ((Mcommand[1] == '5') && Mcommand[2] == '\0')
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b35      	cmp	r3, #53	@ 0x35
	{
		// Add code that turns the laser off
	}
	if ((Mcommand[1] == '3') && ((Mcommand[2] == '\0') || (Mcommand[2] == ' ')))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b33      	cmp	r3, #51	@ 0x33
 8001a40:	d103      	bne.n	8001a4a <McommandExecute+0x22>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3302      	adds	r3, #2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
	{
		// Add code to turn laser on and PWM of value specified
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <LaserEngrave>:


void LaserEngrave(int Xdistance, int Ydistance)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	int Xspeed = 65535;
 8001a62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a66:	617b      	str	r3, [r7, #20]
	int Yspeed = 65535;
 8001a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a6c:	613b      	str	r3, [r7, #16]

	float totalDistance = sqrt((Xdistance * Xdistance) + (Ydistance * Ydistance));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	fb03 f203 	mul.w	r2, r3, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	fb03 f303 	mul.w	r3, r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd61 	bl	8000544 <__aeabi_i2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	ec43 2b10 	vmov	d0, r2, r3
 8001a8a:	f00a f8eb 	bl	800bc64 <sqrt>
 8001a8e:	ec53 2b10 	vmov	r2, r3, d0
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f8b7 	bl	8000c08 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	60fb      	str	r3, [r7, #12]
	if (Xdistance != 0)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d026      	beq.n	8001af2 <LaserEngrave+0x9a>
	{
		Xspeed = 162712.482 / ((abs(Xdistance) / totalDistance) * feed);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bfb8      	it	lt
 8001aaa:	425b      	neglt	r3, r3
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001abc:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <LaserEngrave+0x140>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001acc:	ee17 0a90 	vmov	r0, s15
 8001ad0:	f7fe fd4a 	bl	8000568 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	a12d      	add	r1, pc, #180	@ (adr r1, 8001b90 <LaserEngrave+0x138>)
 8001ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ade:	f7fe fec5 	bl	800086c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f845 	bl	8000b78 <__aeabi_d2iz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	617b      	str	r3, [r7, #20]
	}
	if (Ydistance != 0)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d026      	beq.n	8001b46 <LaserEngrave+0xee>
	{
		Yspeed = 162712.482 / ((abs(Ydistance) / totalDistance) * feed);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bfb8      	it	lt
 8001afe:	425b      	neglt	r3, r3
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <LaserEngrave+0x140>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ee17 0a90 	vmov	r0, s15
 8001b24:	f7fe fd20 	bl	8000568 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	a118      	add	r1, pc, #96	@ (adr r1, 8001b90 <LaserEngrave+0x138>)
 8001b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b32:	f7fe fe9b 	bl	800086c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f81b 	bl	8000b78 <__aeabi_d2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]
	}

	__HAL_TIM_SET_PRESCALER(&htim16, Xspeed);
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <LaserEngrave+0x144>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_PRESCALER(&htim17, Yspeed);
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <LaserEngrave+0x148>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28

	// Starts the motor timers
	  HAL_TIM_Base_Start_IT(&htim16);
 8001b56:	4811      	ldr	r0, [pc, #68]	@ (8001b9c <LaserEngrave+0x144>)
 8001b58:	f003 f848 	bl	8004bec <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim17);
 8001b5c:	4810      	ldr	r0, [pc, #64]	@ (8001ba0 <LaserEngrave+0x148>)
 8001b5e:	f003 f845 	bl	8004bec <HAL_TIM_Base_Start_IT>
	  // Here is where the PWM starts

	  while(((Xcurrent == Xend) && (Ycurrent == Yend)) == 0){}	// Waits for the motors to be done before proceeding
 8001b62:	bf00      	nop
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <LaserEngrave+0x14c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <LaserEngrave+0x150>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <LaserEngrave+0x128>
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <LaserEngrave+0x154>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <LaserEngrave+0x158>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d101      	bne.n	8001b80 <LaserEngrave+0x128>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LaserEngrave+0x12a>
 8001b80:	2300      	movs	r3, #0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0ee      	beq.n	8001b64 <LaserEngrave+0x10c>
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	db22d0e5 	.word	0xdb22d0e5
 8001b94:	4103dcc3 	.word	0x4103dcc3
 8001b98:	200003f0 	.word	0x200003f0
 8001b9c:	200002c0 	.word	0x200002c0
 8001ba0:	2000030c 	.word	0x2000030c
 8001ba4:	200003e0 	.word	0x200003e0
 8001ba8:	200003e8 	.word	0x200003e8
 8001bac:	200003e4 	.word	0x200003e4
 8001bb0:	200003ec 	.word	0x200003ec

08001bb4 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001bbc:	1d39      	adds	r1, r7, #4
 8001bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <__io_putchar+0x20>)
 8001bc6:	f003 fb79 	bl	80052bc <HAL_UART_Transmit>
	return ch;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000358 	.word	0x20000358

08001bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim16)	// X motor timer
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d127      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x60>
	{

		if (Xcurrent != Xend)	// Evaluates if the X motor has arrived in it's position
 8001be8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d01e      	beq.n	8001c32 <HAL_TIM_PeriodElapsedCallback+0x5a>
		{

			HAL_GPIO_TogglePin(XPUL_GPIO_Port, XPUL_Pin);	// Toggles the XPUL pin
 8001bf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bfc:	f000 fe7e 	bl	80028fc <HAL_GPIO_TogglePin>

			// Increments the Xcurrent value if XDIR is positive and decrements if Xcurrent value is negative
			// only increments every other cycle
			if (!HAL_GPIO_ReadPin(XPUL_GPIO_Port, XPUL_Pin))
 8001c00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c08:	f000 fe48 	bl	800289c <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x60>
			{
				if (XDIR == 1)
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x4e>
				{
					Xcurrent++;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e008      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x60>
				}
				else
				{
					Xcurrent--;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e002      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x60>
				}
			}
		}
		else
		{
			HAL_TIM_Base_Stop_IT(&htim16);	// Once the X motor arrives to it's final position, this stops the timer
 8001c32:	481c      	ldr	r0, [pc, #112]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001c34:	f003 f84a 	bl	8004ccc <HAL_TIM_Base_Stop_IT>
		}
	}

	if (htim == &htim17)	// Y motor timer
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d125      	bne.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0xb4>
	{

		if (Ycurrent != Yend)	// Evaluates if the Y motor has arrived in it's position
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d01c      	beq.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0xae>
		{

			HAL_GPIO_TogglePin(YPUL_GPIO_Port, YPUL_Pin);	// Toggles the YPUL pin
 8001c4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c50:	481b      	ldr	r0, [pc, #108]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c52:	f000 fe53 	bl	80028fc <HAL_GPIO_TogglePin>

			// Increments the Ycurrent value if YDIR is positive and decrements if Ycurrent value is negative
			if (!HAL_GPIO_ReadPin(YPUL_GPIO_Port, YPUL_Pin))
 8001c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c5a:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001c5c:	f000 fe1e 	bl	800289c <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d112      	bne.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0xb4>
			{
				if (YDIR == 1)
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_TIM_PeriodElapsedCallback+0xa2>
				{
					Ycurrent++;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e008      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
				else
				{
					Ycurrent--;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e002      	b.n	8001c8c <HAL_TIM_PeriodElapsedCallback+0xb4>
				}
			}
		}
		else
		{
		  HAL_TIM_Base_Stop_IT(&htim17);	// Once the Y motor arrives to it's final position, this stops the timer
 8001c86:	480b      	ldr	r0, [pc, #44]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c88:	f003 f820 	bl	8004ccc <HAL_TIM_Base_Stop_IT>
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0xc2>
  {
    HAL_IncTick();
 8001c96:	f000 fb31 	bl	80022fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200002c0 	.word	0x200002c0
 8001ca8:	200003e0 	.word	0x200003e0
 8001cac:	200003e8 	.word	0x200003e8
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	2000030c 	.word	0x2000030c
 8001cb8:	200003e4 	.word	0x200003e4
 8001cbc:	200003ec 	.word	0x200003ec
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	40000400 	.word	0x40000400

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <Error_Handler+0x8>

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_MspInit+0x44>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <HAL_MspInit+0x44>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_MspInit+0x44>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_MspInit+0x44>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <HAL_SPI_MspInit+0x7c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d128      	bne.n	8001d94 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d46:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <HAL_SPI_MspInit+0x80>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d72:	23e0      	movs	r3, #224	@ 0xe0
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d82:	2305      	movs	r3, #5
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d90:	f000 fbda 	bl	8002548 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d94:	bf00      	nop
 8001d96:	3728      	adds	r7, #40	@ 0x28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40013000 	.word	0x40013000
 8001da0:	40021000 	.word	0x40021000

08001da4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <HAL_TIM_Base_MspInit+0x9c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10c      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001db6:	4b23      	ldr	r3, [pc, #140]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a22      	ldr	r2, [pc, #136]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001dbc:	f043 0320 	orr.w	r3, r3, #32
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc2:	4b20      	ldr	r3, [pc, #128]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001dce:	e032      	b.n	8001e36 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e48 <HAL_TIM_Base_MspInit+0xa4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d114      	bne.n	8001e04 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2019      	movs	r0, #25
 8001df8:	f000 fb7c 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dfc:	2019      	movs	r0, #25
 8001dfe:	f000 fb95 	bl	800252c <HAL_NVIC_EnableIRQ>
}
 8001e02:	e018      	b.n	8001e36 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_TIM_Base_MspInit+0xa8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d113      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e12:	4a0c      	ldr	r2, [pc, #48]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_TIM_Base_MspInit+0xa0>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	201a      	movs	r0, #26
 8001e2c:	f000 fb62 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e30:	201a      	movs	r0, #26
 8001e32:	f000 fb7b 	bl	800252c <HAL_NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40001400 	.word	0x40001400
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40014400 	.word	0x40014400
 8001e4c:	40014800 	.word	0x40014800

08001e50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0ac      	sub	sp, #176	@ 0xb0
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2288      	movs	r2, #136	@ 0x88
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f007 fe63 	bl	8009b3c <memset>
  if(huart->Instance==USART2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_UART_MspInit+0xb0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d13b      	bne.n	8001ef8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fbfd 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e98:	f7ff ff18 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb8:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_UART_MspInit+0xb4>)
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef4:	f000 fb28 	bl	8002548 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ef8:	bf00      	nop
 8001efa:	37b0      	adds	r7, #176	@ 0xb0
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40004400 	.word	0x40004400
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	@ 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	4b34      	ldr	r3, [pc, #208]	@ (8001fe8 <HAL_InitTick+0xe0>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	4a33      	ldr	r2, [pc, #204]	@ (8001fe8 <HAL_InitTick+0xe0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_InitTick+0xe0>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2e:	f107 0210 	add.w	r2, r7, #16
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 fb15 	bl	8003568 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f48:	f001 fae2 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8001f4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f4e:	e004      	b.n	8001f5a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f50:	f001 fade 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8001f54:	4603      	mov	r3, r0
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <HAL_InitTick+0xe4>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3b01      	subs	r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f68:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f6a:	4a22      	ldr	r2, [pc, #136]	@ (8001ff4 <HAL_InitTick+0xec>)
 8001f6c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f74:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f8e:	4818      	ldr	r0, [pc, #96]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001f90:	f002 fdd4 	bl	8004b3c <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11b      	bne.n	8001fda <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001fa2:	4813      	ldr	r0, [pc, #76]	@ (8001ff0 <HAL_InitTick+0xe8>)
 8001fa4:	f002 fe22 	bl	8004bec <HAL_TIM_Base_Start_IT>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb6:	201d      	movs	r0, #29
 8001fb8:	f000 fab8 	bl	800252c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d808      	bhi.n	8001fd4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	201d      	movs	r0, #29
 8001fc8:	f000 fa94 	bl	80024f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <HAL_InitTick+0xf0>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e002      	b.n	8001fda <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3738      	adds	r7, #56	@ 0x38
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	200004f4 	.word	0x200004f4
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <NMI_Handler+0x4>

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <MemManage_Handler+0x4>

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <UsageFault_Handler+0x4>

08002024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(shutdownButton_Pin);
 8002060:	2002      	movs	r0, #2
 8002062:	f000 fc65 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002072:	f002 fe5a 	bl	8004d2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200002c0 	.word	0x200002c0

08002080 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002086:	f002 fe50 	bl	8004d2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000030c 	.word	0x2000030c

08002094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <TIM3_IRQHandler+0x10>)
 800209a:	f002 fe46 	bl	8004d2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200004f4 	.word	0x200004f4

080020a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020b0:	f000 fc3e 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_kill>:

int _kill(int pid, int sig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d2:	f007 fda7 	bl	8009c24 <__errno>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_exit>:

void _exit (int status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffe7 	bl	80020c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fa:	bf00      	nop
 80020fc:	e7fd      	b.n	80020fa <_exit+0x12>

080020fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e00a      	b.n	8002126 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002110:	f3af 8000 	nop.w
 8002114:	4601      	mov	r1, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf0      	blt.n	8002110 <_read+0x12>
  }

  return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e009      	b.n	800215e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fd2e 	bl	8001bb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf1      	blt.n	800214a <_write+0x12>
  }
  return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002198:	605a      	str	r2, [r3, #4]
  return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_isatty>:

int _isatty(int file)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f007 fd0c 	bl	8009c24 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20018000 	.word	0x20018000
 8002238:	00000400 	.word	0x00000400
 800223c:	20000540 	.word	0x20000540
 8002240:	200006e0 	.word	0x200006e0

08002244 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800226c:	f7ff ffea 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <LoopForever+0xe>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	@ (80022b4 <LoopForever+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002296:	f007 fccb 	bl	8009c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800229a:	f7fe fef7 	bl	800108c <main>

0800229e <LoopForever>:

LoopForever:
    b LoopForever
 800229e:	e7fe      	b.n	800229e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80022ac:	0800c460 	.word	0x0800c460
  ldr r2, =_sbss
 80022b0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80022b4:	200006dc 	.word	0x200006dc

080022b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_2_IRQHandler>
	...

080022bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c6:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <HAL_Init+0x3c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <HAL_Init+0x3c>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d2:	2003      	movs	r0, #3
 80022d4:	f000 f903 	bl	80024de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d8:	200f      	movs	r0, #15
 80022da:	f7ff fe15 	bl	8001f08 <HAL_InitTick>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	e001      	b.n	80022ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022ea:	f7ff fcf5 	bl	8001cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000010 	.word	0x20000010
 8002320:	20000544 	.word	0x20000544

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000544 	.word	0x20000544

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000010 	.word	0x20000010

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	@ (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff4c 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002506:	f7ff ff61 	bl	80023cc <__NVIC_GetPriorityGrouping>
 800250a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7ff ffb1 	bl	8002478 <NVIC_EncodePriority>
 8002516:	4602      	mov	r2, r0
 8002518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff80 	bl	8002424 <__NVIC_SetPriority>
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff54 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e17f      	b.n	8002858 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8171 	beq.w	8002852 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_Init+0x40>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0201 	and.w	r2, r3, #1
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d118      	bne.n	8002628 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	6939      	ldr	r1, [r7, #16]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80ac 	beq.w	8002852 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002878 <HAL_GPIO_Init+0x330>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002878 <HAL_GPIO_Init+0x330>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6613      	str	r3, [r2, #96]	@ 0x60
 8002706:	4b5c      	ldr	r3, [pc, #368]	@ (8002878 <HAL_GPIO_Init+0x330>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002712:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_GPIO_Init+0x334>)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	089b      	lsrs	r3, r3, #2
 8002718:	3302      	adds	r3, #2
 800271a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x242>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	@ (8002880 <HAL_GPIO_Init+0x338>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x23e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	@ (8002884 <HAL_GPIO_Init+0x33c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x23a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4d      	ldr	r2, [pc, #308]	@ (8002888 <HAL_GPIO_Init+0x340>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x236>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4c      	ldr	r2, [pc, #304]	@ (800288c <HAL_GPIO_Init+0x344>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x232>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4b      	ldr	r2, [pc, #300]	@ (8002890 <HAL_GPIO_Init+0x348>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x22e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4a      	ldr	r2, [pc, #296]	@ (8002894 <HAL_GPIO_Init+0x34c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x22a>
 800276e:	2306      	movs	r3, #6
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x244>
 8002772:	2307      	movs	r3, #7
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x244>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x244>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x244>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x244>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x244>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x244>
 800278a:	2300      	movs	r3, #0
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800279c:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_GPIO_Init+0x334>)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002898 <HAL_GPIO_Init+0x350>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ce:	4a32      	ldr	r2, [pc, #200]	@ (8002898 <HAL_GPIO_Init+0x350>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027d4:	4b30      	ldr	r3, [pc, #192]	@ (8002898 <HAL_GPIO_Init+0x350>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f8:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <HAL_GPIO_Init+0x350>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027fe:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <HAL_GPIO_Init+0x350>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_GPIO_Init+0x350>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_GPIO_Init+0x350>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800284c:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <HAL_GPIO_Init+0x350>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f47f ae78 	bne.w	8002558 <HAL_GPIO_Init+0x10>
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	40010000 	.word	0x40010000
 8002880:	48000400 	.word	0x48000400
 8002884:	48000800 	.word	0x48000800
 8002888:	48000c00 	.word	0x48000c00
 800288c:	48001000 	.word	0x48001000
 8002890:	48001400 	.word	0x48001400
 8002894:	48001800 	.word	0x48001800
 8002898:	40010400 	.word	0x40010400

0800289c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e001      	b.n	80028be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43d9      	mvns	r1, r3
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	400b      	ands	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fe3a 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <HAL_PWREx_GetVoltageRange+0x18>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40007000 	.word	0x40007000

0800297c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298a:	d130      	bne.n	80029ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800298c:	4b23      	ldr	r3, [pc, #140]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002998:	d038      	beq.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2232      	movs	r2, #50	@ 0x32
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9b      	lsrs	r3, r3, #18
 80029bc:	3301      	adds	r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c0:	e002      	b.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d4:	d102      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f2      	bne.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029dc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e8:	d110      	bne.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e00f      	b.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fa:	d007      	beq.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029fc:	4b07      	ldr	r3, [pc, #28]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a04:	4a05      	ldr	r2, [pc, #20]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	20000008 	.word	0x20000008
 8002a24:	431bde83 	.word	0x431bde83

08002a28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e3ca      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b97      	ldr	r3, [pc, #604]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b94      	ldr	r3, [pc, #592]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80e4 	beq.w	8002c24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4a>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	f040 808b 	bne.w	8002b80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 8087 	bne.w	8002b80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x62>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e3a2      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	4b82      	ldr	r3, [pc, #520]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x7c>
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_OscConfig+0x88>
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d223      	bcs.n	8002afc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fd87 	bl	80035cc <RCC_SetFlashLatencyFromMSIRange>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e383      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac8:	4b73      	ldr	r3, [pc, #460]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a72      	ldr	r2, [pc, #456]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002ace:	f043 0308 	orr.w	r3, r3, #8
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b70      	ldr	r3, [pc, #448]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	496d      	ldr	r1, [pc, #436]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	021b      	lsls	r3, r3, #8
 8002af4:	4968      	ldr	r1, [pc, #416]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e025      	b.n	8002b48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afc:	4b66      	ldr	r3, [pc, #408]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b02:	f043 0308 	orr.w	r3, r3, #8
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4960      	ldr	r1, [pc, #384]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	495b      	ldr	r1, [pc, #364]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd47 	bl	80035cc <RCC_SetFlashLatencyFromMSIRange>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e343      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b48:	f000 fc4a 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b52      	ldr	r3, [pc, #328]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	4950      	ldr	r1, [pc, #320]	@ (8002c9c <HAL_RCC_OscConfig+0x274>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca0 <HAL_RCC_OscConfig+0x278>)
 8002b66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b68:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca4 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9cb 	bl	8001f08 <HAL_InitTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d052      	beq.n	8002c22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	e327      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d032      	beq.n	8002bee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b88:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fbc6 	bl	8002324 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9c:	f7ff fbc2 	bl	8002324 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e310      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bae:	4b3a      	ldr	r3, [pc, #232]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bba:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a36      	ldr	r2, [pc, #216]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b34      	ldr	r3, [pc, #208]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4931      	ldr	r1, [pc, #196]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	492c      	ldr	r1, [pc, #176]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
 8002bec:	e01a      	b.n	8002c24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a29      	ldr	r2, [pc, #164]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fb93 	bl	8002324 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c02:	f7ff fb8f 	bl	8002324 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e2dd      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c14:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x1da>
 8002c20:	e000      	b.n	8002c24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d074      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x21a>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d10e      	bne.n	8002c5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d064      	beq.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d160      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e2ba      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x24a>
 8002c64:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0b      	ldr	r2, [pc, #44]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e026      	b.n	8002cc0 <HAL_RCC_OscConfig+0x298>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x280>
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b03      	ldr	r3, [pc, #12]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a02      	ldr	r2, [pc, #8]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e014      	b.n	8002cc0 <HAL_RCC_OscConfig+0x298>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	0800bfbc 	.word	0x0800bfbc
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a9f      	ldr	r2, [pc, #636]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b9d      	ldr	r3, [pc, #628]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a9c      	ldr	r2, [pc, #624]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fb2c 	bl	8002324 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff fb28 	bl	8002324 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e276      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce2:	4b92      	ldr	r3, [pc, #584]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2a8>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fb18 	bl	8002324 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7ff fb14 	bl	8002324 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	@ 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e262      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0a:	4b88      	ldr	r3, [pc, #544]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x2d0>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d060      	beq.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x310>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d116      	bne.n	8002d66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	4b7c      	ldr	r3, [pc, #496]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x328>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e23f      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b76      	ldr	r3, [pc, #472]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	4973      	ldr	r1, [pc, #460]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d64:	e040      	b.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d023      	beq.n	8002db6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6e      	ldr	r2, [pc, #440]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7ff fad3 	bl	8002324 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7ff facf 	bl	8002324 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e21d      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	4b65      	ldr	r3, [pc, #404]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b62      	ldr	r3, [pc, #392]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	495f      	ldr	r1, [pc, #380]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
 8002db4:	e018      	b.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5c      	ldr	r2, [pc, #368]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7ff faaf 	bl	8002324 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dca:	f7ff faab 	bl	8002324 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1f9      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ddc:	4b53      	ldr	r3, [pc, #332]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d03c      	beq.n	8002e6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	4a4a      	ldr	r2, [pc, #296]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7ff fa8a 	bl	8002324 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e14:	f7ff fa86 	bl	8002324 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1d4      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e26:	4b41      	ldr	r3, [pc, #260]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCC_OscConfig+0x3ec>
 8002e34:	e01b      	b.n	8002e6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7ff fa6d 	bl	8002324 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7ff fa69 	bl	8002324 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1b7      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	4b32      	ldr	r3, [pc, #200]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ef      	bne.n	8002e4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a6 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e80:	4b2a      	ldr	r3, [pc, #168]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10d      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e98:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea8:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <HAL_RCC_OscConfig+0x508>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d118      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_OscConfig+0x508>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f30 <HAL_RCC_OscConfig+0x508>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec0:	f7ff fa30 	bl	8002324 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec8:	f7ff fa2c 	bl	8002324 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e17a      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_RCC_OscConfig+0x508>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_RCC_OscConfig+0x4d8>
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002efe:	e029      	b.n	8002f54 <HAL_RCC_OscConfig+0x52c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d115      	bne.n	8002f34 <HAL_RCC_OscConfig+0x50c>
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a07      	ldr	r2, [pc, #28]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	4a03      	ldr	r2, [pc, #12]	@ (8002f2c <HAL_RCC_OscConfig+0x504>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f28:	e014      	b.n	8002f54 <HAL_RCC_OscConfig+0x52c>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	4b9c      	ldr	r3, [pc, #624]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	4a9b      	ldr	r2, [pc, #620]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f44:	4b98      	ldr	r3, [pc, #608]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	4a97      	ldr	r2, [pc, #604]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d016      	beq.n	8002f8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f9e2 	bl	8002324 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7ff f9de 	bl	8002324 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e12a      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ed      	beq.n	8002f64 <HAL_RCC_OscConfig+0x53c>
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7ff f9cb 	bl	8002324 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7ff f9c7 	bl	8002324 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e113      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ed      	bne.n	8002f92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b7a      	ldr	r3, [pc, #488]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc0:	4a79      	ldr	r2, [pc, #484]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80fe 	beq.w	80031ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	f040 80d0 	bne.w	800317c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fdc:	4b72      	ldr	r3, [pc, #456]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0203 	and.w	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d130      	bne.n	8003052 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d127      	bne.n	8003052 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d11f      	bne.n	8003052 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800301c:	2a07      	cmp	r2, #7
 800301e:	bf14      	ite	ne
 8003020:	2201      	movne	r2, #1
 8003022:	2200      	moveq	r2, #0
 8003024:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003026:	4293      	cmp	r3, r2
 8003028:	d113      	bne.n	8003052 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	3b01      	subs	r3, #1
 8003038:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d109      	bne.n	8003052 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d06e      	beq.n	8003130 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d069      	beq.n	800312c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003058:	4b53      	ldr	r3, [pc, #332]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003064:	4b50      	ldr	r3, [pc, #320]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ad      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003074:	4b4c      	ldr	r3, [pc, #304]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4b      	ldr	r2, [pc, #300]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003080:	f7ff f950 	bl	8002324 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7ff f94c 	bl	8002324 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e09a      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309a:	4b43      	ldr	r3, [pc, #268]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <HAL_RCC_OscConfig+0x784>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030b6:	3a01      	subs	r2, #1
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030c0:	0212      	lsls	r2, r2, #8
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0552      	lsls	r2, r2, #21
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030d4:	0852      	lsrs	r2, r2, #1
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0652      	lsls	r2, r2, #25
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030e0:	0912      	lsrs	r2, r2, #4
 80030e2:	0452      	lsls	r2, r2, #17
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4930      	ldr	r1, [pc, #192]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030ec:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2d      	ldr	r2, [pc, #180]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f8:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a2a      	ldr	r2, [pc, #168]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003102:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003104:	f7ff f90e 	bl	8002324 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7ff f90a 	bl	8002324 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e058      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800312a:	e050      	b.n	80031ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e04f      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d148      	bne.n	80031ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800313c:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003148:	4b17      	ldr	r3, [pc, #92]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a16      	ldr	r2, [pc, #88]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003152:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003154:	f7ff f8e6 	bl	8002324 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7ff f8e2 	bl	8002324 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e030      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x734>
 800317a:	e028      	b.n	80031ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d023      	beq.n	80031ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <HAL_RCC_OscConfig+0x780>)
 8003188:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7ff f8c9 	bl	8002324 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003194:	e00c      	b.n	80031b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003196:	f7ff f8c5 	bl	8002324 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d905      	bls.n	80031b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e013      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b0:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_OscConfig+0x7b0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ec      	bne.n	8003196 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031bc:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x7b0>)
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	4905      	ldr	r1, [pc, #20]	@ (80031d8 <HAL_RCC_OscConfig+0x7b0>)
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_OscConfig+0x7b4>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
 80031c8:	e001      	b.n	80031ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	feeefffc 	.word	0xfeeefffc

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0e7      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b75      	ldr	r3, [pc, #468]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b72      	ldr	r3, [pc, #456]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4970      	ldr	r1, [pc, #448]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b6e      	ldr	r3, [pc, #440]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0cf      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b66      	ldr	r3, [pc, #408]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800323c:	429a      	cmp	r2, r3
 800323e:	d908      	bls.n	8003252 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b63      	ldr	r3, [pc, #396]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4960      	ldr	r1, [pc, #384]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04c      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003266:	4b5a      	ldr	r3, [pc, #360]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d121      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0a6      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327e:	4b54      	ldr	r3, [pc, #336]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e09a      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003296:	4b4e      	ldr	r3, [pc, #312]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e08e      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e086      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4943      	ldr	r1, [pc, #268]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7ff f82c 	bl	8002324 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7ff f828 	bl	8002324 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e06e      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b3a      	ldr	r3, [pc, #232]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003310:	429a      	cmp	r2, r3
 8003312:	d208      	bcs.n	8003326 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b2e      	ldr	r3, [pc, #184]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	492b      	ldr	r1, [pc, #172]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003326:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d210      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	4b25      	ldr	r3, [pc, #148]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 0207 	bic.w	r2, r3, #7
 800333c:	4923      	ldr	r1, [pc, #140]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <HAL_RCC_ClockConfig+0x1ec>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e036      	b.n	80033c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4918      	ldr	r1, [pc, #96]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003380:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4910      	ldr	r1, [pc, #64]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003394:	f000 f824 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <HAL_RCC_ClockConfig+0x1f0>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	490b      	ldr	r1, [pc, #44]	@ (80033d4 <HAL_RCC_ClockConfig+0x1f4>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	4a09      	ldr	r2, [pc, #36]	@ (80033d8 <HAL_RCC_ClockConfig+0x1f8>)
 80033b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_RCC_ClockConfig+0x1fc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fda5 	bl	8001f08 <HAL_InitTick>
 80033be:	4603      	mov	r3, r0
 80033c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	0800bfbc 	.word	0x0800bfbc
 80033d8:	20000008 	.word	0x20000008
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ee:	4b3e      	ldr	r3, [pc, #248]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f8:	4b3b      	ldr	r3, [pc, #236]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x34>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d121      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d11e      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003414:	4b34      	ldr	r3, [pc, #208]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003420:	4b31      	ldr	r3, [pc, #196]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e005      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800343c:	4a2b      	ldr	r2, [pc, #172]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003444:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003450:	e00a      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b04      	cmp	r3, #4
 8003456:	d102      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003458:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	e004      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d101      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003464:	4b23      	ldr	r3, [pc, #140]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003466:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d134      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346e:	4b1e      	ldr	r3, [pc, #120]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0xa6>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xac>
 8003484:	e005      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003486:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800348c:	4b19      	ldr	r3, [pc, #100]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800348e:	617b      	str	r3, [r7, #20]
      break;
 8003490:	e002      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	617b      	str	r3, [r7, #20]
      break;
 8003496:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	3301      	adds	r3, #1
 80034a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	fb03 f202 	mul.w	r2, r3, r2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	0e5b      	lsrs	r3, r3, #25
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	3301      	adds	r3, #1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034d8:	69bb      	ldr	r3, [r7, #24]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	@ 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	0800bfd4 	.word	0x0800bfd4
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	007a1200 	.word	0x007a1200

080034f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_RCC_GetHCLKFreq+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000008 	.word	0x20000008

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003514:	f7ff fff0 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4904      	ldr	r1, [pc, #16]	@ (8003538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	0800bfcc 	.word	0x0800bfcc

0800353c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003540:	f7ff ffda 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0adb      	lsrs	r3, r3, #11
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4904      	ldr	r1, [pc, #16]	@ (8003564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	0800bfcc 	.word	0x0800bfcc

08003568 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	220f      	movs	r2, #15
 8003576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003578:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003584:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035aa:	4b07      	ldr	r3, [pc, #28]	@ (80035c8 <HAL_RCC_GetClockConfig+0x60>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0207 	and.w	r2, r3, #7
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40022000 	.word	0x40022000

080035cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035e4:	f7ff f9bc 	bl	8002960 <HAL_PWREx_GetVoltageRange>
 80035e8:	6178      	str	r0, [r7, #20]
 80035ea:	e014      	b.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	4a24      	ldr	r2, [pc, #144]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003604:	f7ff f9ac 	bl	8002960 <HAL_PWREx_GetVoltageRange>
 8003608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800360a:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800361c:	d10b      	bne.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b80      	cmp	r3, #128	@ 0x80
 8003622:	d919      	bls.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2ba0      	cmp	r3, #160	@ 0xa0
 8003628:	d902      	bls.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800362a:	2302      	movs	r3, #2
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	e013      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003630:	2301      	movs	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e010      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d902      	bls.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800363c:	2303      	movs	r3, #3
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e00a      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d102      	bne.n	800364e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003648:	2302      	movs	r3, #2
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	e004      	b.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b70      	cmp	r3, #112	@ 0x70
 8003652:	d101      	bne.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003654:	2301      	movs	r3, #1
 8003656:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	4909      	ldr	r1, [pc, #36]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003668:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	40022000 	.word	0x40022000

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003694:	2300      	movs	r3, #0
 8003696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003698:	2300      	movs	r3, #0
 800369a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d041      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036cc:	d010      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d0:	4b86      	ldr	r3, [pc, #536]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a85      	ldr	r2, [pc, #532]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036dc:	e015      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fabb 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3320      	adds	r3, #32
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fba6 	bl	8003e48 <RCCEx_PLLSAI2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	74fb      	strb	r3, [r7, #19]
      break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003710:	4b76      	ldr	r3, [pc, #472]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800371e:	4973      	ldr	r1, [pc, #460]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d041      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003740:	d02a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003742:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003746:	d824      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003748:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800374e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003752:	d81e      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800375c:	d010      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800375e:	e018      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003760:	4b62      	ldr	r3, [pc, #392]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800376c:	e015      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fa73 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800377e:	e00c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3320      	adds	r3, #32
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb5e 	bl	8003e48 <RCCEx_PLLSAI2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	74fb      	strb	r3, [r7, #19]
      break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037a0:	4b52      	ldr	r3, [pc, #328]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ae:	494f      	ldr	r1, [pc, #316]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037b6:	e001      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a0 	beq.w	800390a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ce:	4b47      	ldr	r3, [pc, #284]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e8:	4a40      	ldr	r2, [pc, #256]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003800:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3a      	ldr	r2, [pc, #232]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800380c:	f7fe fd8a 	bl	8002324 <HAL_GetTick>
 8003810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003812:	e009      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fe fd86 	bl	8002324 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	74fb      	strb	r3, [r7, #19]
        break;
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003828:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d15c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800383a:	4b2c      	ldr	r3, [pc, #176]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01f      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	d019      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003858:	4b24      	ldr	r3, [pc, #144]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003864:	4b21      	ldr	r3, [pc, #132]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fe fd45 	bl	8002324 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389c:	e00b      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fd41 	bl	8002324 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d902      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	74fb      	strb	r3, [r7, #19]
            break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ec      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038da:	4904      	ldr	r1, [pc, #16]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038e2:	e009      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	74bb      	strb	r3, [r7, #18]
 80038e8:	e006      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f8:	7c7b      	ldrb	r3, [r7, #17]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4b9e      	ldr	r3, [pc, #632]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	4a9d      	ldr	r2, [pc, #628]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003916:	4b98      	ldr	r3, [pc, #608]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f023 0203 	bic.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	4994      	ldr	r1, [pc, #592]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003938:	4b8f      	ldr	r3, [pc, #572]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f023 020c 	bic.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	498c      	ldr	r1, [pc, #560]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800395a:	4b87      	ldr	r3, [pc, #540]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	4983      	ldr	r1, [pc, #524]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800397c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	497b      	ldr	r1, [pc, #492]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800399e:	4b76      	ldr	r3, [pc, #472]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ac:	4972      	ldr	r1, [pc, #456]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ce:	496a      	ldr	r1, [pc, #424]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039e2:	4b65      	ldr	r3, [pc, #404]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	4961      	ldr	r1, [pc, #388]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a04:	4b5c      	ldr	r3, [pc, #368]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	4959      	ldr	r1, [pc, #356]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a26:	4b54      	ldr	r3, [pc, #336]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	4950      	ldr	r1, [pc, #320]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a48:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	4948      	ldr	r1, [pc, #288]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a6a:	4b43      	ldr	r3, [pc, #268]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	493f      	ldr	r1, [pc, #252]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d028      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9a:	4937      	ldr	r1, [pc, #220]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b32      	ldr	r3, [pc, #200]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f8c8 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d028      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003aea:	4b23      	ldr	r3, [pc, #140]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af8:	491f      	ldr	r1, [pc, #124]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b14:	60d3      	str	r3, [r2, #12]
 8003b16:	e011      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	2101      	movs	r1, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f899 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02b      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b56:	4908      	ldr	r1, [pc, #32]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b66:	d109      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a02      	ldr	r2, [pc, #8]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b72:	60d3      	str	r3, [r2, #12]
 8003b74:	e014      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b84:	d10c      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f867 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02f      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bac:	4b2b      	ldr	r3, [pc, #172]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bba:	4928      	ldr	r1, [pc, #160]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f844 	bl	8003c60 <RCCEx_PLLSAI1_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d014      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3320      	adds	r3, #32
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f925 	bl	8003e48 <RCCEx_PLLSAI2_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c18:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c26:	490d      	ldr	r1, [pc, #52]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4a:	4904      	ldr	r1, [pc, #16]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c52:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000

08003c60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c6e:	4b75      	ldr	r3, [pc, #468]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d018      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c7a:	4b72      	ldr	r3, [pc, #456]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d10d      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c92:	4b6c      	ldr	r3, [pc, #432]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d047      	beq.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e044      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d018      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0x86>
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d825      	bhi.n	8003d04 <RCCEx_PLLSAI1_Config+0xa4>
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d002      	beq.n	8003cc2 <RCCEx_PLLSAI1_Config+0x62>
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d009      	beq.n	8003cd4 <RCCEx_PLLSAI1_Config+0x74>
 8003cc0:	e020      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cc2:	4b60      	ldr	r3, [pc, #384]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11d      	bne.n	8003d0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd2:	e01a      	b.n	8003d0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d116      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e013      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ce6:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cf2:	4b54      	ldr	r3, [pc, #336]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d02:	e006      	b.n	8003d12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      break;
 8003d08:	e004      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	4944      	ldr	r1, [pc, #272]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d17d      	bne.n	8003e38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a40      	ldr	r2, [pc, #256]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fe faec 	bl	8002324 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d4e:	e009      	b.n	8003d64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d50:	f7fe fae8 	bl	8002324 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	73fb      	strb	r3, [r7, #15]
        break;
 8003d62:	e005      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d64:	4b37      	ldr	r3, [pc, #220]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ef      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d160      	bne.n	8003e38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d111      	bne.n	8003da0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d7c:	4b31      	ldr	r3, [pc, #196]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6892      	ldr	r2, [r2, #8]
 8003d8c:	0211      	lsls	r1, r2, #8
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68d2      	ldr	r2, [r2, #12]
 8003d92:	0912      	lsrs	r2, r2, #4
 8003d94:	0452      	lsls	r2, r2, #17
 8003d96:	430a      	orrs	r2, r1
 8003d98:	492a      	ldr	r1, [pc, #168]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	610b      	str	r3, [r1, #16]
 8003d9e:	e027      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d112      	bne.n	8003dcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da6:	4b27      	ldr	r3, [pc, #156]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	0211      	lsls	r1, r2, #8
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6912      	ldr	r2, [r2, #16]
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0552      	lsls	r2, r2, #21
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	491f      	ldr	r1, [pc, #124]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
 8003dca:	e011      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003dd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6892      	ldr	r2, [r2, #8]
 8003ddc:	0211      	lsls	r1, r2, #8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6952      	ldr	r2, [r2, #20]
 8003de2:	0852      	lsrs	r2, r2, #1
 8003de4:	3a01      	subs	r2, #1
 8003de6:	0652      	lsls	r2, r2, #25
 8003de8:	430a      	orrs	r2, r1
 8003dea:	4916      	ldr	r1, [pc, #88]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a13      	ldr	r2, [pc, #76]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fa92 	bl	8002324 <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e02:	e009      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e04:	f7fe fa8e 	bl	8002324 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d902      	bls.n	8003e18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	73fb      	strb	r3, [r7, #15]
          break;
 8003e16:	e005      	b.n	8003e24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	4904      	ldr	r1, [pc, #16]	@ (8003e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000

08003e48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e56:	4b6a      	ldr	r3, [pc, #424]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d018      	beq.n	8003e94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e62:	4b67      	ldr	r3, [pc, #412]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d10d      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
       ||
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e7a:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
       ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d047      	beq.n	8003f1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	e044      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d018      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0x86>
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d825      	bhi.n	8003eec <RCCEx_PLLSAI2_Config+0xa4>
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d002      	beq.n	8003eaa <RCCEx_PLLSAI2_Config+0x62>
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d009      	beq.n	8003ebc <RCCEx_PLLSAI2_Config+0x74>
 8003ea8:	e020      	b.n	8003eec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eaa:	4b55      	ldr	r3, [pc, #340]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11d      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eba:	e01a      	b.n	8003ef2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ebc:	4b50      	ldr	r3, [pc, #320]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d116      	bne.n	8003ef6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ecc:	e013      	b.n	8003ef6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ece:	4b4c      	ldr	r3, [pc, #304]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eda:	4b49      	ldr	r3, [pc, #292]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eea:	e006      	b.n	8003efa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e004      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f02:	4b3f      	ldr	r3, [pc, #252]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	430b      	orrs	r3, r1
 8003f18:	4939      	ldr	r1, [pc, #228]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d167      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f24:	4b36      	ldr	r3, [pc, #216]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f30:	f7fe f9f8 	bl	8002324 <HAL_GetTick>
 8003f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f36:	e009      	b.n	8003f4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f38:	f7fe f9f4 	bl	8002324 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d902      	bls.n	8003f4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	73fb      	strb	r3, [r7, #15]
        break;
 8003f4a:	e005      	b.n	8003f58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ef      	bne.n	8003f38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d14a      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f64:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6892      	ldr	r2, [r2, #8]
 8003f74:	0211      	lsls	r1, r2, #8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	0912      	lsrs	r2, r2, #4
 8003f7c:	0452      	lsls	r2, r2, #17
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	491f      	ldr	r1, [pc, #124]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	614b      	str	r3, [r1, #20]
 8003f86:	e011      	b.n	8003fac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6892      	ldr	r2, [r2, #8]
 8003f98:	0211      	lsls	r1, r2, #8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6912      	ldr	r2, [r2, #16]
 8003f9e:	0852      	lsrs	r2, r2, #1
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	0652      	lsls	r2, r2, #25
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	4916      	ldr	r1, [pc, #88]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fac:	4b14      	ldr	r3, [pc, #80]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a13      	ldr	r2, [pc, #76]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fe f9b4 	bl	8002324 <HAL_GetTick>
 8003fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc0:	f7fe f9b0 	bl	8002324 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8003fd2:	e005      	b.n	8003fe0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4904      	ldr	r1, [pc, #16]	@ (8004000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e095      	b.n	8004142 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd fe62 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800407c:	d902      	bls.n	8004084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e002      	b.n	800408a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004092:	d007      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800409c:	d002      	beq.n	80040a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	f003 0204 	and.w	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b088      	sub	sp, #32
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800415a:	f7fe f8e3 	bl	8002324 <HAL_GetTick>
 800415e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d001      	beq.n	8004174 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
 8004172:	e15c      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_SPI_Transmit+0x36>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e154      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_SPI_Transmit+0x48>
 800418e:	2302      	movs	r3, #2
 8004190:	e14d      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	88fa      	ldrh	r2, [r7, #6]
 80041b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041e4:	d10f      	bne.n	8004206 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004204:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d007      	beq.n	8004224 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800422c:	d952      	bls.n	80042d4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_SPI_Transmit+0xf2>
 8004236:	8b7b      	ldrh	r3, [r7, #26]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d145      	bne.n	80042c8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	1c9a      	adds	r2, r3, #2
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004260:	e032      	b.n	80042c8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d112      	bne.n	8004296 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004294:	e018      	b.n	80042c8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004296:	f7fe f845 	bl	8002324 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d803      	bhi.n	80042ae <HAL_SPI_Transmit+0x164>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d102      	bne.n	80042b4 <HAL_SPI_Transmit+0x16a>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0b2      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1c7      	bne.n	8004262 <HAL_SPI_Transmit+0x118>
 80042d2:	e083      	b.n	80043dc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_Transmit+0x198>
 80042dc:	8b7b      	ldrh	r3, [r7, #26]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d177      	bne.n	80043d2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d912      	bls.n	8004312 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b02      	subs	r3, #2
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004310:	e05f      	b.n	80043d2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004338:	e04b      	b.n	80043d2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d12b      	bne.n	80043a0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d912      	bls.n	8004378 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b02      	subs	r3, #2
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004376:	e02c      	b.n	80043d2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	7812      	ldrb	r2, [r2, #0]
 8004384:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800439e:	e018      	b.n	80043d2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043a0:	f7fd ffc0 	bl	8002324 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d803      	bhi.n	80043b8 <HAL_SPI_Transmit+0x26e>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d102      	bne.n	80043be <HAL_SPI_Transmit+0x274>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e02d      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ae      	bne.n	800433a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	6839      	ldr	r1, [r7, #0]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fb65 	bl	8004ab0 <SPI_EndRxTxTransaction>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10a      	bne.n	8004410 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800442c:	2300      	movs	r3, #0
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b08a      	sub	sp, #40	@ 0x28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004444:	2301      	movs	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004448:	f7fd ff6c 	bl	8002324 <HAL_GetTick>
 800444c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004454:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004464:	7ffb      	ldrb	r3, [r7, #31]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d00c      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x4e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004470:	d106      	bne.n	8004480 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_SPI_TransmitReceive+0x4a>
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d001      	beq.n	8004484 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	e1f3      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x60>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_TransmitReceive+0x60>
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1e8      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_SPI_TransmitReceive+0x72>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e1e1      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d003      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2205      	movs	r2, #5
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	887a      	ldrh	r2, [r7, #2]
 80044d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	887a      	ldrh	r2, [r7, #2]
 80044ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004506:	d802      	bhi.n	800450e <HAL_SPI_TransmitReceive+0xd8>
 8004508:	8abb      	ldrh	r3, [r7, #20]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d908      	bls.n	8004520 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	e007      	b.n	8004530 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d007      	beq.n	800454e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800454c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004556:	f240 8083 	bls.w	8004660 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x132>
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d16f      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800458c:	e05c      	b.n	8004648 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d11b      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x19e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x19e>
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d113      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d11c      	bne.n	800461c <HAL_SPI_TransmitReceive+0x1e6>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	b292      	uxth	r2, r2
 80045fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004618:	2301      	movs	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800461c:	f7fd fe82 	bl	8002324 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004628:	429a      	cmp	r2, r3
 800462a:	d80d      	bhi.n	8004648 <HAL_SPI_TransmitReceive+0x212>
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d009      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e111      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d19d      	bne.n	800458e <HAL_SPI_TransmitReceive+0x158>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d197      	bne.n	800458e <HAL_SPI_TransmitReceive+0x158>
 800465e:	e0e5      	b.n	800482c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x23a>
 8004668:	8afb      	ldrh	r3, [r7, #22]
 800466a:	2b01      	cmp	r3, #1
 800466c:	f040 80d1 	bne.w	8004812 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b01      	cmp	r3, #1
 8004678:	d912      	bls.n	80046a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b02      	subs	r3, #2
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800469e:	e0b8      	b.n	8004812 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c6:	e0a4      	b.n	8004812 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d134      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x30a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02f      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x30a>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d12c      	bne.n	8004740 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d912      	bls.n	8004716 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b02      	subs	r3, #2
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004714:	e012      	b.n	800473c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d148      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x3aa>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d042      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d923      	bls.n	80047ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	b292      	uxth	r2, r2
 8004772:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b02      	subs	r3, #2
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d81f      	bhi.n	80047dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	e016      	b.n	80047dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f103 020c 	add.w	r2, r3, #12
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	7812      	ldrb	r2, [r2, #0]
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047dc:	2301      	movs	r3, #1
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047e0:	f7fd fda0 	bl	8002324 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d803      	bhi.n	80047f8 <HAL_SPI_TransmitReceive+0x3c2>
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d102      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x3c8>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e02c      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f af55 	bne.w	80046c8 <HAL_SPI_TransmitReceive+0x292>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	f47f af4e 	bne.w	80046c8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800482c:	6a3a      	ldr	r2, [r7, #32]
 800482e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f93d 	bl	8004ab0 <SPI_EndRxTxTransaction>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00e      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800486a:	2300      	movs	r3, #0
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3728      	adds	r7, #40	@ 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	4613      	mov	r3, r2
 8004882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004884:	f7fd fd4e 	bl	8002324 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	4413      	add	r3, r2
 8004892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004894:	f7fd fd46 	bl	8002324 <HAL_GetTick>
 8004898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800489a:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	0d1b      	lsrs	r3, r3, #20
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048aa:	e054      	b.n	8004956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d050      	beq.n	8004956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048b4:	f7fd fd36 	bl	8002324 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13d      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048e2:	d111      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ec:	d004      	beq.n	80048f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f6:	d107      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004910:	d10f      	bne.n	8004932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e017      	b.n	8004976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	3b01      	subs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	429a      	cmp	r2, r3
 8004972:	d19b      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000008 	.word	0x20000008

08004984 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	@ 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004996:	f7fd fcc5 	bl	8002324 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	4413      	add	r3, r2
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80049a6:	f7fd fcbd 	bl	8002324 <HAL_GetTick>
 80049aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049b4:	4b3d      	ldr	r3, [pc, #244]	@ (8004aac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	00da      	lsls	r2, r3, #3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049cc:	e060      	b.n	8004a90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049d4:	d107      	bne.n	80049e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d050      	beq.n	8004a90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049ee:	f7fd fc99 	bl	8002324 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d902      	bls.n	8004a04 <SPI_WaitFifoStateUntilTimeout+0x80>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d13d      	bne.n	8004a80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1c:	d111      	bne.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a26:	d004      	beq.n	8004a32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d107      	bne.n	8004a42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a4a:	d10f      	bne.n	8004a6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e010      	b.n	8004aa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d196      	bne.n	80049ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	@ 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000008 	.word	0x20000008

08004ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff ff5b 	bl	8004984 <SPI_WaitFifoStateUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e027      	b.n	8004b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2180      	movs	r1, #128	@ 0x80
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fec0 	bl	8004874 <SPI_WaitFlagStateUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e014      	b.n	8004b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff ff34 	bl	8004984 <SPI_WaitFifoStateUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e000      	b.n	8004b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e049      	b.n	8004be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd f91e 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fa04 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d001      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e04f      	b.n	8004ca4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2e:	d018      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x76>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d115      	bne.n	8004c8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	4b17      	ldr	r3, [pc, #92]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d015      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0xb4>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7a:	d011      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	e008      	b.n	8004ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	00010007 	.word	0x00010007

08004ccc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_TIM_Base_Stop_IT+0x48>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_Base_Stop_IT+0x48>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01b      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0202 	mvn.w	r2, #2
 8004d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f8e9 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004d7a:	e005      	b.n	8004d88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f8db 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8ec 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01b      	beq.n	8004dda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f06f 0204 	mvn.w	r2, #4
 8004daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8c3 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004dc6:	e005      	b.n	8004dd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8b5 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8c6 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01b      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0208 	mvn.w	r2, #8
 8004df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f89d 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f88f 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8a0 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d01b      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f06f 0210 	mvn.w	r2, #16
 8004e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2208      	movs	r2, #8
 8004e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f877 	bl	8004f4c <HAL_TIM_IC_CaptureCallback>
 8004e5e:	e005      	b.n	8004e6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f869 	bl	8004f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f87a 	bl	8004f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0201 	mvn.w	r2, #1
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fc fea1 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f99a 	bl	80051f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f992 	bl	800520c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00c      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f834 	bl	8004f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0220 	mvn.w	r2, #32
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f95a 	bl	80051e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a43      	ldr	r2, [pc, #268]	@ (80050b8 <TIM_Base_SetConfig+0x130>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a42      	ldr	r2, [pc, #264]	@ (80050bc <TIM_Base_SetConfig+0x134>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a41      	ldr	r2, [pc, #260]	@ (80050c0 <TIM_Base_SetConfig+0x138>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a40      	ldr	r2, [pc, #256]	@ (80050c4 <TIM_Base_SetConfig+0x13c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a35      	ldr	r2, [pc, #212]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a32      	ldr	r2, [pc, #200]	@ (80050b8 <TIM_Base_SetConfig+0x130>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a31      	ldr	r2, [pc, #196]	@ (80050bc <TIM_Base_SetConfig+0x134>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a30      	ldr	r2, [pc, #192]	@ (80050c0 <TIM_Base_SetConfig+0x138>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2f      	ldr	r2, [pc, #188]	@ (80050c4 <TIM_Base_SetConfig+0x13c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2e      	ldr	r2, [pc, #184]	@ (80050c8 <TIM_Base_SetConfig+0x140>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <TIM_Base_SetConfig+0x144>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <TIM_Base_SetConfig+0x148>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a16      	ldr	r2, [pc, #88]	@ (80050b4 <TIM_Base_SetConfig+0x12c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00f      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <TIM_Base_SetConfig+0x13c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <TIM_Base_SetConfig+0x140>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a16      	ldr	r2, [pc, #88]	@ (80050cc <TIM_Base_SetConfig+0x144>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a15      	ldr	r2, [pc, #84]	@ (80050d0 <TIM_Base_SetConfig+0x148>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]
  }
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800

080050d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e068      	b.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2e      	ldr	r2, [pc, #184]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2d      	ldr	r2, [pc, #180]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d108      	bne.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01d      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515e:	d018      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d009      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a13      	ldr	r2, [pc, #76]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a14      	ldr	r2, [pc, #80]	@ (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10c      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40013400 	.word	0x40013400
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000

080051e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e040      	b.n	80052b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fe04 	bl	8001e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb6a 	bl	8005940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8af 	bl	80053d0 <UART_SetConfig>
 8005272:	4603      	mov	r3, r0
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e01b      	b.n	80052b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800528a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800529a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fbe9 	bl	8005a84 <UART_CheckIdleState>
 80052b2:	4603      	mov	r3, r0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	@ 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d177      	bne.n	80053c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_UART_Transmit+0x24>
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e070      	b.n	80053c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2221      	movs	r2, #33	@ 0x21
 80052f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f2:	f7fd f817 	bl	8002324 <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005310:	d108      	bne.n	8005324 <HAL_UART_Transmit+0x68>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e003      	b.n	800532c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800532c:	e02f      	b.n	800538e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	@ 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fc4b 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e03b      	b.n	80053c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005360:	b292      	uxth	r2, r2
 8005362:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3302      	adds	r3, #2
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e007      	b.n	800537c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1c9      	bne.n	800532e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2140      	movs	r1, #64	@ 0x40
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fc15 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e005      	b.n	80053c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b08a      	sub	sp, #40	@ 0x28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4ba4      	ldr	r3, [pc, #656]	@ (8005690 <UART_SetConfig+0x2c0>)
 8005400:	4013      	ands	r3, r2
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a99      	ldr	r2, [pc, #612]	@ (8005694 <UART_SetConfig+0x2c4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	4313      	orrs	r3, r2
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a90      	ldr	r2, [pc, #576]	@ (8005698 <UART_SetConfig+0x2c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d126      	bne.n	80054a8 <UART_SetConfig+0xd8>
 800545a:	4b90      	ldr	r3, [pc, #576]	@ (800569c <UART_SetConfig+0x2cc>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b03      	cmp	r3, #3
 8005466:	d81b      	bhi.n	80054a0 <UART_SetConfig+0xd0>
 8005468:	a201      	add	r2, pc, #4	@ (adr r2, 8005470 <UART_SetConfig+0xa0>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	08005481 	.word	0x08005481
 8005474:	08005491 	.word	0x08005491
 8005478:	08005489 	.word	0x08005489
 800547c:	08005499 	.word	0x08005499
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005486:	e116      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005488:	2302      	movs	r3, #2
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548e:	e112      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005490:	2304      	movs	r3, #4
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005496:	e10e      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005498:	2308      	movs	r3, #8
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549e:	e10a      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a6:	e106      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a7c      	ldr	r2, [pc, #496]	@ (80056a0 <UART_SetConfig+0x2d0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d138      	bne.n	8005524 <UART_SetConfig+0x154>
 80054b2:	4b7a      	ldr	r3, [pc, #488]	@ (800569c <UART_SetConfig+0x2cc>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b8:	f003 030c 	and.w	r3, r3, #12
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d82d      	bhi.n	800551c <UART_SetConfig+0x14c>
 80054c0:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <UART_SetConfig+0xf8>)
 80054c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c6:	bf00      	nop
 80054c8:	080054fd 	.word	0x080054fd
 80054cc:	0800551d 	.word	0x0800551d
 80054d0:	0800551d 	.word	0x0800551d
 80054d4:	0800551d 	.word	0x0800551d
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	0800551d 	.word	0x0800551d
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	0800551d 	.word	0x0800551d
 80054e8:	08005505 	.word	0x08005505
 80054ec:	0800551d 	.word	0x0800551d
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	0800551d 	.word	0x0800551d
 80054f8:	08005515 	.word	0x08005515
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e0d8      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005504:	2302      	movs	r3, #2
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e0d4      	b.n	80056b6 <UART_SetConfig+0x2e6>
 800550c:	2304      	movs	r3, #4
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e0d0      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005514:	2308      	movs	r3, #8
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e0cc      	b.n	80056b6 <UART_SetConfig+0x2e6>
 800551c:	2310      	movs	r3, #16
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e0c8      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5e      	ldr	r2, [pc, #376]	@ (80056a4 <UART_SetConfig+0x2d4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d125      	bne.n	800557a <UART_SetConfig+0x1aa>
 800552e:	4b5b      	ldr	r3, [pc, #364]	@ (800569c <UART_SetConfig+0x2cc>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005538:	2b30      	cmp	r3, #48	@ 0x30
 800553a:	d016      	beq.n	800556a <UART_SetConfig+0x19a>
 800553c:	2b30      	cmp	r3, #48	@ 0x30
 800553e:	d818      	bhi.n	8005572 <UART_SetConfig+0x1a2>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d00a      	beq.n	800555a <UART_SetConfig+0x18a>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d814      	bhi.n	8005572 <UART_SetConfig+0x1a2>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <UART_SetConfig+0x182>
 800554c:	2b10      	cmp	r3, #16
 800554e:	d008      	beq.n	8005562 <UART_SetConfig+0x192>
 8005550:	e00f      	b.n	8005572 <UART_SetConfig+0x1a2>
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005558:	e0ad      	b.n	80056b6 <UART_SetConfig+0x2e6>
 800555a:	2302      	movs	r3, #2
 800555c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005560:	e0a9      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005562:	2304      	movs	r3, #4
 8005564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005568:	e0a5      	b.n	80056b6 <UART_SetConfig+0x2e6>
 800556a:	2308      	movs	r3, #8
 800556c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005570:	e0a1      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005572:	2310      	movs	r3, #16
 8005574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005578:	e09d      	b.n	80056b6 <UART_SetConfig+0x2e6>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a4a      	ldr	r2, [pc, #296]	@ (80056a8 <UART_SetConfig+0x2d8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d125      	bne.n	80055d0 <UART_SetConfig+0x200>
 8005584:	4b45      	ldr	r3, [pc, #276]	@ (800569c <UART_SetConfig+0x2cc>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800558e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005590:	d016      	beq.n	80055c0 <UART_SetConfig+0x1f0>
 8005592:	2bc0      	cmp	r3, #192	@ 0xc0
 8005594:	d818      	bhi.n	80055c8 <UART_SetConfig+0x1f8>
 8005596:	2b80      	cmp	r3, #128	@ 0x80
 8005598:	d00a      	beq.n	80055b0 <UART_SetConfig+0x1e0>
 800559a:	2b80      	cmp	r3, #128	@ 0x80
 800559c:	d814      	bhi.n	80055c8 <UART_SetConfig+0x1f8>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <UART_SetConfig+0x1d8>
 80055a2:	2b40      	cmp	r3, #64	@ 0x40
 80055a4:	d008      	beq.n	80055b8 <UART_SetConfig+0x1e8>
 80055a6:	e00f      	b.n	80055c8 <UART_SetConfig+0x1f8>
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ae:	e082      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80055b0:	2302      	movs	r3, #2
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b6:	e07e      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80055b8:	2304      	movs	r3, #4
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055be:	e07a      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c6:	e076      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ce:	e072      	b.n	80056b6 <UART_SetConfig+0x2e6>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a35      	ldr	r2, [pc, #212]	@ (80056ac <UART_SetConfig+0x2dc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d12a      	bne.n	8005630 <UART_SetConfig+0x260>
 80055da:	4b30      	ldr	r3, [pc, #192]	@ (800569c <UART_SetConfig+0x2cc>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055e8:	d01a      	beq.n	8005620 <UART_SetConfig+0x250>
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ee:	d81b      	bhi.n	8005628 <UART_SetConfig+0x258>
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055f4:	d00c      	beq.n	8005610 <UART_SetConfig+0x240>
 80055f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055fa:	d815      	bhi.n	8005628 <UART_SetConfig+0x258>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0x238>
 8005600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005604:	d008      	beq.n	8005618 <UART_SetConfig+0x248>
 8005606:	e00f      	b.n	8005628 <UART_SetConfig+0x258>
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560e:	e052      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005610:	2302      	movs	r3, #2
 8005612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005616:	e04e      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800561e:	e04a      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005626:	e046      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562e:	e042      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a17      	ldr	r2, [pc, #92]	@ (8005694 <UART_SetConfig+0x2c4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d13a      	bne.n	80056b0 <UART_SetConfig+0x2e0>
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <UART_SetConfig+0x2cc>)
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005648:	d01a      	beq.n	8005680 <UART_SetConfig+0x2b0>
 800564a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800564e:	d81b      	bhi.n	8005688 <UART_SetConfig+0x2b8>
 8005650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005654:	d00c      	beq.n	8005670 <UART_SetConfig+0x2a0>
 8005656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800565a:	d815      	bhi.n	8005688 <UART_SetConfig+0x2b8>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <UART_SetConfig+0x298>
 8005660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005664:	d008      	beq.n	8005678 <UART_SetConfig+0x2a8>
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x2b8>
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566e:	e022      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005670:	2302      	movs	r3, #2
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005676:	e01e      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567e:	e01a      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005686:	e016      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568e:	e012      	b.n	80056b6 <UART_SetConfig+0x2e6>
 8005690:	efff69f3 	.word	0xefff69f3
 8005694:	40008000 	.word	0x40008000
 8005698:	40013800 	.word	0x40013800
 800569c:	40021000 	.word	0x40021000
 80056a0:	40004400 	.word	0x40004400
 80056a4:	40004800 	.word	0x40004800
 80056a8:	40004c00 	.word	0x40004c00
 80056ac:	40005000 	.word	0x40005000
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a9f      	ldr	r2, [pc, #636]	@ (8005938 <UART_SetConfig+0x568>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d17a      	bne.n	80057b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d824      	bhi.n	8005712 <UART_SetConfig+0x342>
 80056c8:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <UART_SetConfig+0x300>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	08005713 	.word	0x08005713
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005713 	.word	0x08005713
 80056e0:	08005703 	.word	0x08005703
 80056e4:	08005713 	.word	0x08005713
 80056e8:	08005713 	.word	0x08005713
 80056ec:	08005713 	.word	0x08005713
 80056f0:	0800570b 	.word	0x0800570b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f4:	f7fd ff0c 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 80056f8:	61f8      	str	r0, [r7, #28]
        break;
 80056fa:	e010      	b.n	800571e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056fc:	4b8f      	ldr	r3, [pc, #572]	@ (800593c <UART_SetConfig+0x56c>)
 80056fe:	61fb      	str	r3, [r7, #28]
        break;
 8005700:	e00d      	b.n	800571e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005702:	f7fd fe6d 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 8005706:	61f8      	str	r0, [r7, #28]
        break;
 8005708:	e009      	b.n	800571e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800570e:	61fb      	str	r3, [r7, #28]
        break;
 8005710:	e005      	b.n	800571e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800571c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80fb 	beq.w	800591c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	429a      	cmp	r2, r3
 8005734:	d305      	bcc.n	8005742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	429a      	cmp	r2, r3
 8005740:	d903      	bls.n	800574a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005748:	e0e8      	b.n	800591c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2200      	movs	r2, #0
 800574e:	461c      	mov	r4, r3
 8005750:	4615      	mov	r5, r2
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	022b      	lsls	r3, r5, #8
 800575c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005760:	0222      	lsls	r2, r4, #8
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	6849      	ldr	r1, [r1, #4]
 8005766:	0849      	lsrs	r1, r1, #1
 8005768:	2000      	movs	r0, #0
 800576a:	4688      	mov	r8, r1
 800576c:	4681      	mov	r9, r0
 800576e:	eb12 0a08 	adds.w	sl, r2, r8
 8005772:	eb43 0b09 	adc.w	fp, r3, r9
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	603b      	str	r3, [r7, #0]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005784:	4650      	mov	r0, sl
 8005786:	4659      	mov	r1, fp
 8005788:	f7fb fa8e 	bl	8000ca8 <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800579a:	d308      	bcc.n	80057ae <UART_SetConfig+0x3de>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057a2:	d204      	bcs.n	80057ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	60da      	str	r2, [r3, #12]
 80057ac:	e0b6      	b.n	800591c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057b4:	e0b2      	b.n	800591c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057be:	d15e      	bne.n	800587e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d828      	bhi.n	800581a <UART_SetConfig+0x44a>
 80057c8:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <UART_SetConfig+0x400>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	08005805 	.word	0x08005805
 80057dc:	0800581b 	.word	0x0800581b
 80057e0:	0800580b 	.word	0x0800580b
 80057e4:	0800581b 	.word	0x0800581b
 80057e8:	0800581b 	.word	0x0800581b
 80057ec:	0800581b 	.word	0x0800581b
 80057f0:	08005813 	.word	0x08005813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f4:	f7fd fe8c 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
        break;
 80057fa:	e014      	b.n	8005826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057fc:	f7fd fe9e 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 8005800:	61f8      	str	r0, [r7, #28]
        break;
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005804:	4b4d      	ldr	r3, [pc, #308]	@ (800593c <UART_SetConfig+0x56c>)
 8005806:	61fb      	str	r3, [r7, #28]
        break;
 8005808:	e00d      	b.n	8005826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fd fde9 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 800580e:	61f8      	str	r0, [r7, #28]
        break;
 8005810:	e009      	b.n	8005826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005816:	61fb      	str	r3, [r7, #28]
        break;
 8005818:	e005      	b.n	8005826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d077      	beq.n	800591c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	005a      	lsls	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	441a      	add	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	2b0f      	cmp	r3, #15
 8005846:	d916      	bls.n	8005876 <UART_SetConfig+0x4a6>
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800584e:	d212      	bcs.n	8005876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f023 030f 	bic.w	r3, r3, #15
 8005858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	b29b      	uxth	r3, r3
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	b29a      	uxth	r2, r3
 8005866:	8afb      	ldrh	r3, [r7, #22]
 8005868:	4313      	orrs	r3, r2
 800586a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	8afa      	ldrh	r2, [r7, #22]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	e052      	b.n	800591c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800587c:	e04e      	b.n	800591c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800587e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005882:	2b08      	cmp	r3, #8
 8005884:	d827      	bhi.n	80058d6 <UART_SetConfig+0x506>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <UART_SetConfig+0x4bc>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058b9 	.word	0x080058b9
 8005894:	080058c1 	.word	0x080058c1
 8005898:	080058d7 	.word	0x080058d7
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	080058d7 	.word	0x080058d7
 80058a4:	080058d7 	.word	0x080058d7
 80058a8:	080058d7 	.word	0x080058d7
 80058ac:	080058cf 	.word	0x080058cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fd fe2e 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 80058b4:	61f8      	str	r0, [r7, #28]
        break;
 80058b6:	e014      	b.n	80058e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fd fe40 	bl	800353c <HAL_RCC_GetPCLK2Freq>
 80058bc:	61f8      	str	r0, [r7, #28]
        break;
 80058be:	e010      	b.n	80058e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c0:	4b1e      	ldr	r3, [pc, #120]	@ (800593c <UART_SetConfig+0x56c>)
 80058c2:	61fb      	str	r3, [r7, #28]
        break;
 80058c4:	e00d      	b.n	80058e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058c6:	f7fd fd8b 	bl	80033e0 <HAL_RCC_GetSysClockFreq>
 80058ca:	61f8      	str	r0, [r7, #28]
        break;
 80058cc:	e009      	b.n	80058e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058d2:	61fb      	str	r3, [r7, #28]
        break;
 80058d4:	e005      	b.n	80058e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058e0:	bf00      	nop
    }

    if (pclk != 0U)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d019      	beq.n	800591c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	085a      	lsrs	r2, r3, #1
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d909      	bls.n	8005916 <UART_SetConfig+0x546>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d205      	bcs.n	8005916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60da      	str	r2, [r3, #12]
 8005914:	e002      	b.n	800591c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005928:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800592c:	4618      	mov	r0, r3
 800592e:	3728      	adds	r7, #40	@ 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005936:	bf00      	nop
 8005938:	40008000 	.word	0x40008000
 800593c:	00f42400 	.word	0x00f42400

08005940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a3e:	d10a      	bne.n	8005a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b098      	sub	sp, #96	@ 0x60
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a94:	f7fc fc46 	bl	8002324 <HAL_GetTick>
 8005a98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d12e      	bne.n	8005b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f88c 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d021      	beq.n	8005b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e6      	bne.n	8005ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e062      	b.n	8005bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d149      	bne.n	8005ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f856 	bl	8005bd4 <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d03c      	beq.n	8005ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b80:	61fa      	str	r2, [r7, #28]
 8005b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e5      	bne.n	8005b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e011      	b.n	8005bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3758      	adds	r7, #88	@ 0x58
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be4:	e04f      	b.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d04b      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fc fb99 	bl	8002324 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e04e      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d037      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b80      	cmp	r3, #128	@ 0x80
 8005c1a:	d034      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d031      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f003 0308 	and.w	r3, r3, #8
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d110      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f838 	bl	8005cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2208      	movs	r2, #8
 8005c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e029      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c60:	d111      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f81e 	bl	8005cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e00f      	b.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	bf0c      	ite	eq
 8005c96:	2301      	moveq	r3, #1
 8005c98:	2300      	movne	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d0a0      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b095      	sub	sp, #84	@ 0x54
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3308      	adds	r3, #8
 8005d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d118      	bne.n	8005d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0310 	bic.w	r3, r3, #16
 8005d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e6      	bne.n	8005d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d6a:	bf00      	nop
 8005d6c:	3754      	adds	r7, #84	@ 0x54
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d7c:	4904      	ldr	r1, [pc, #16]	@ (8005d90 <MX_FATFS_Init+0x18>)
 8005d7e:	4805      	ldr	r0, [pc, #20]	@ (8005d94 <MX_FATFS_Init+0x1c>)
 8005d80:	f002 fef2 	bl	8008b68 <FATFS_LinkDriver>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4b03      	ldr	r3, [pc, #12]	@ (8005d98 <MX_FATFS_Init+0x20>)
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d8c:	bf00      	nop
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	2000054c 	.word	0x2000054c
 8005d94:	20000014 	.word	0x20000014
 8005d98:	20000548 	.word	0x20000548

08005d9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005da0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 f9d3 	bl	8006164 <USER_SPI_initialize>
 8005dbe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fab1 	bl	800633c <USER_SPI_status>
 8005dda:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8005df4:	7bf8      	ldrb	r0, [r7, #15]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	f000 fab4 	bl	8006368 <USER_SPI_read>
 8005e00:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8005e1a:	7bf8      	ldrb	r0, [r7, #15]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	f000 fb07 	bl	8006434 <USER_SPI_write>
 8005e26:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	603a      	str	r2, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8005e40:	79b9      	ldrb	r1, [r7, #6]
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fb70 	bl	800652c <USER_SPI_ioctl>
 8005e4c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005e60:	f7fc fa60 	bl	8002324 <HAL_GetTick>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4a04      	ldr	r2, [pc, #16]	@ (8005e78 <SPI_Timer_On+0x20>)
 8005e68:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005e6a:	4a04      	ldr	r2, [pc, #16]	@ (8005e7c <SPI_Timer_On+0x24>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6013      	str	r3, [r2, #0]
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000554 	.word	0x20000554
 8005e7c:	20000558 	.word	0x20000558

08005e80 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005e84:	f7fc fa4e 	bl	8002324 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <SPI_Timer_Status+0x24>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <SPI_Timer_Status+0x28>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bf34      	ite	cc
 8005e98:	2301      	movcc	r3, #1
 8005e9a:	2300      	movcs	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000554 	.word	0x20000554
 8005ea8:	20000558 	.word	0x20000558

08005eac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005eb6:	f107 020f 	add.w	r2, r7, #15
 8005eba:	1df9      	adds	r1, r7, #7
 8005ebc:	2332      	movs	r3, #50	@ 0x32
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4804      	ldr	r0, [pc, #16]	@ (8005ed4 <xchg_spi+0x28>)
 8005ec4:	f7fe fab7 	bl	8004436 <HAL_SPI_TransmitReceive>
    return rxDat;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000210 	.word	0x20000210

08005ed8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e00a      	b.n	8005efe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	18d4      	adds	r4, r2, r3
 8005eee:	20ff      	movs	r0, #255	@ 0xff
 8005ef0:	f7ff ffdc 	bl	8005eac <xchg_spi>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3301      	adds	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3f0      	bcc.n	8005ee8 <rcvr_spi_multi+0x10>
	}
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4803      	ldr	r0, [pc, #12]	@ (8005f34 <xmit_spi_multi+0x24>)
 8005f26:	f7fe f910 	bl	800414a <HAL_SPI_Transmit>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000210 	.word	0x20000210

08005f38 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005f40:	f7fc f9f0 	bl	8002324 <HAL_GetTick>
 8005f44:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005f4a:	20ff      	movs	r0, #255	@ 0xff
 8005f4c:	f7ff ffae 	bl	8005eac <xchg_spi>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2bff      	cmp	r3, #255	@ 0xff
 8005f58:	d007      	beq.n	8005f6a <wait_ready+0x32>
 8005f5a:	f7fc f9e3 	bl	8002324 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d8ef      	bhi.n	8005f4a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	2bff      	cmp	r3, #255	@ 0xff
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005f84:	2201      	movs	r2, #1
 8005f86:	2140      	movs	r1, #64	@ 0x40
 8005f88:	4803      	ldr	r0, [pc, #12]	@ (8005f98 <despiselect+0x18>)
 8005f8a:	f7fc fc9f 	bl	80028cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005f8e:	20ff      	movs	r0, #255	@ 0xff
 8005f90:	f7ff ff8c 	bl	8005eac <xchg_spi>

}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	48000400 	.word	0x48000400

08005f9c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2140      	movs	r1, #64	@ 0x40
 8005fa4:	4809      	ldr	r0, [pc, #36]	@ (8005fcc <spiselect+0x30>)
 8005fa6:	f7fc fc91 	bl	80028cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005faa:	20ff      	movs	r0, #255	@ 0xff
 8005fac:	f7ff ff7e 	bl	8005eac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005fb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005fb4:	f7ff ffc0 	bl	8005f38 <wait_ready>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <spiselect+0x26>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e002      	b.n	8005fc8 <spiselect+0x2c>

	despiselect();
 8005fc2:	f7ff ffdd 	bl	8005f80 <despiselect>
	return 0;	/* Timeout */
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	48000400 	.word	0x48000400

08005fd0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005fda:	20c8      	movs	r0, #200	@ 0xc8
 8005fdc:	f7ff ff3c 	bl	8005e58 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005fe0:	20ff      	movs	r0, #255	@ 0xff
 8005fe2:	f7ff ff63 	bl	8005eac <xchg_spi>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2bff      	cmp	r3, #255	@ 0xff
 8005fee:	d104      	bne.n	8005ffa <rcvr_datablock+0x2a>
 8005ff0:	f7ff ff46 	bl	8005e80 <SPI_Timer_Status>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f2      	bne.n	8005fe0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ffe:	d001      	beq.n	8006004 <rcvr_datablock+0x34>
 8006000:	2300      	movs	r3, #0
 8006002:	e00a      	b.n	800601a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff66 	bl	8005ed8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800600c:	20ff      	movs	r0, #255	@ 0xff
 800600e:	f7ff ff4d 	bl	8005eac <xchg_spi>
 8006012:	20ff      	movs	r0, #255	@ 0xff
 8006014:	f7ff ff4a 	bl	8005eac <xchg_spi>

	return 1;						/* Function succeeded */
 8006018:	2301      	movs	r3, #1
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800602e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006032:	f7ff ff81 	bl	8005f38 <wait_ready>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xmit_datablock+0x1e>
 800603c:	2300      	movs	r3, #0
 800603e:	e01e      	b.n	800607e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff ff32 	bl	8005eac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	2bfd      	cmp	r3, #253	@ 0xfd
 800604c:	d016      	beq.n	800607c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800604e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff5c 	bl	8005f10 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006058:	20ff      	movs	r0, #255	@ 0xff
 800605a:	f7ff ff27 	bl	8005eac <xchg_spi>
 800605e:	20ff      	movs	r0, #255	@ 0xff
 8006060:	f7ff ff24 	bl	8005eac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006064:	20ff      	movs	r0, #255	@ 0xff
 8006066:	f7ff ff21 	bl	8005eac <xchg_spi>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2b05      	cmp	r3, #5
 8006076:	d001      	beq.n	800607c <xmit_datablock+0x5a>
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <xmit_datablock+0x5c>
	}
	return 1;
 800607c:	2301      	movs	r3, #1
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	4603      	mov	r3, r0
 800608e:	6039      	str	r1, [r7, #0]
 8006090:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	2b00      	cmp	r3, #0
 8006098:	da0e      	bge.n	80060b8 <send_cmd+0x32>
		cmd &= 0x7F;
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80060a2:	2100      	movs	r1, #0
 80060a4:	2037      	movs	r0, #55	@ 0x37
 80060a6:	f7ff ffee 	bl	8006086 <send_cmd>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d901      	bls.n	80060b8 <send_cmd+0x32>
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	e051      	b.n	800615c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d008      	beq.n	80060d0 <send_cmd+0x4a>
		despiselect();
 80060be:	f7ff ff5f 	bl	8005f80 <despiselect>
		if (!spiselect()) return 0xFF;
 80060c2:	f7ff ff6b 	bl	8005f9c <spiselect>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <send_cmd+0x4a>
 80060cc:	23ff      	movs	r3, #255	@ 0xff
 80060ce:	e045      	b.n	800615c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fee7 	bl	8005eac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	0e1b      	lsrs	r3, r3, #24
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fee1 	bl	8005eac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fedb 	bl	8005eac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fed5 	bl	8005eac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fed0 	bl	8005eac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <send_cmd+0x94>
 8006116:	2395      	movs	r3, #149	@ 0x95
 8006118:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d101      	bne.n	8006124 <send_cmd+0x9e>
 8006120:	2387      	movs	r3, #135	@ 0x87
 8006122:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fec0 	bl	8005eac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b0c      	cmp	r3, #12
 8006130:	d102      	bne.n	8006138 <send_cmd+0xb2>
 8006132:	20ff      	movs	r0, #255	@ 0xff
 8006134:	f7ff feba 	bl	8005eac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006138:	230a      	movs	r3, #10
 800613a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800613c:	20ff      	movs	r0, #255	@ 0xff
 800613e:	f7ff feb5 	bl	8005eac <xchg_spi>
 8006142:	4603      	mov	r3, r0
 8006144:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da05      	bge.n	800615a <send_cmd+0xd4>
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	3b01      	subs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <send_cmd+0xb6>

	return res;							/* Return received response */
 800615a:	7bbb      	ldrb	r3, [r7, #14]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <USER_SPI_initialize+0x14>
 8006174:	2301      	movs	r3, #1
 8006176:	e0d6      	b.n	8006326 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006178:	4b6d      	ldr	r3, [pc, #436]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <USER_SPI_initialize+0x2a>
 8006186:	4b6a      	ldr	r3, [pc, #424]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	e0cb      	b.n	8006326 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800618e:	4b69      	ldr	r3, [pc, #420]	@ (8006334 <USER_SPI_initialize+0x1d0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006198:	4b66      	ldr	r3, [pc, #408]	@ (8006334 <USER_SPI_initialize+0x1d0>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80061a0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80061a2:	230a      	movs	r3, #10
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	e005      	b.n	80061b4 <USER_SPI_initialize+0x50>
 80061a8:	20ff      	movs	r0, #255	@ 0xff
 80061aa:	f7ff fe7f 	bl	8005eac <xchg_spi>
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f6      	bne.n	80061a8 <USER_SPI_initialize+0x44>

	ty = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80061be:	2100      	movs	r1, #0
 80061c0:	2000      	movs	r0, #0
 80061c2:	f7ff ff60 	bl	8006086 <send_cmd>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	f040 808b 	bne.w	80062e4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80061ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80061d2:	f7ff fe41 	bl	8005e58 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80061d6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80061da:	2008      	movs	r0, #8
 80061dc:	f7ff ff53 	bl	8006086 <send_cmd>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d151      	bne.n	800628a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e00d      	b.n	8006208 <USER_SPI_initialize+0xa4>
 80061ec:	7bfc      	ldrb	r4, [r7, #15]
 80061ee:	20ff      	movs	r0, #255	@ 0xff
 80061f0:	f7ff fe5c 	bl	8005eac <xchg_spi>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	f104 0310 	add.w	r3, r4, #16
 80061fc:	443b      	add	r3, r7
 80061fe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	3301      	adds	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b03      	cmp	r3, #3
 800620c:	d9ee      	bls.n	80061ec <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800620e:	7abb      	ldrb	r3, [r7, #10]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d167      	bne.n	80062e4 <USER_SPI_initialize+0x180>
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	2baa      	cmp	r3, #170	@ 0xaa
 8006218:	d164      	bne.n	80062e4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800621a:	bf00      	nop
 800621c:	f7ff fe30 	bl	8005e80 <SPI_Timer_Status>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <USER_SPI_initialize+0xd2>
 8006226:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800622a:	20a9      	movs	r0, #169	@ 0xa9
 800622c:	f7ff ff2b 	bl	8006086 <send_cmd>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f2      	bne.n	800621c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006236:	f7ff fe23 	bl	8005e80 <SPI_Timer_Status>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d051      	beq.n	80062e4 <USER_SPI_initialize+0x180>
 8006240:	2100      	movs	r1, #0
 8006242:	203a      	movs	r0, #58	@ 0x3a
 8006244:	f7ff ff1f 	bl	8006086 <send_cmd>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d14a      	bne.n	80062e4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	e00d      	b.n	8006270 <USER_SPI_initialize+0x10c>
 8006254:	7bfc      	ldrb	r4, [r7, #15]
 8006256:	20ff      	movs	r0, #255	@ 0xff
 8006258:	f7ff fe28 	bl	8005eac <xchg_spi>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	f104 0310 	add.w	r3, r4, #16
 8006264:	443b      	add	r3, r7
 8006266:	f803 2c08 	strb.w	r2, [r3, #-8]
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	3301      	adds	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d9ee      	bls.n	8006254 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006276:	7a3b      	ldrb	r3, [r7, #8]
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <USER_SPI_initialize+0x120>
 8006280:	230c      	movs	r3, #12
 8006282:	e000      	b.n	8006286 <USER_SPI_initialize+0x122>
 8006284:	2304      	movs	r3, #4
 8006286:	737b      	strb	r3, [r7, #13]
 8006288:	e02c      	b.n	80062e4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800628a:	2100      	movs	r1, #0
 800628c:	20a9      	movs	r0, #169	@ 0xa9
 800628e:	f7ff fefa 	bl	8006086 <send_cmd>
 8006292:	4603      	mov	r3, r0
 8006294:	2b01      	cmp	r3, #1
 8006296:	d804      	bhi.n	80062a2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006298:	2302      	movs	r3, #2
 800629a:	737b      	strb	r3, [r7, #13]
 800629c:	23a9      	movs	r3, #169	@ 0xa9
 800629e:	73bb      	strb	r3, [r7, #14]
 80062a0:	e003      	b.n	80062aa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80062a2:	2301      	movs	r3, #1
 80062a4:	737b      	strb	r3, [r7, #13]
 80062a6:	2301      	movs	r3, #1
 80062a8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80062aa:	bf00      	nop
 80062ac:	f7ff fde8 	bl	8005e80 <SPI_Timer_Status>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <USER_SPI_initialize+0x162>
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fee3 	bl	8006086 <send_cmd>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f2      	bne.n	80062ac <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80062c6:	f7ff fddb 	bl	8005e80 <SPI_Timer_Status>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <USER_SPI_initialize+0x17c>
 80062d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80062d4:	2010      	movs	r0, #16
 80062d6:	f7ff fed6 	bl	8006086 <send_cmd>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <USER_SPI_initialize+0x180>
				ty = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80062e4:	4a14      	ldr	r2, [pc, #80]	@ (8006338 <USER_SPI_initialize+0x1d4>)
 80062e6:	7b7b      	ldrb	r3, [r7, #13]
 80062e8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80062ea:	f7ff fe49 	bl	8005f80 <despiselect>

	if (ty) {			/* OK */
 80062ee:	7b7b      	ldrb	r3, [r7, #13]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d012      	beq.n	800631a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80062f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <USER_SPI_initialize+0x1d0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80062fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <USER_SPI_initialize+0x1d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0210 	orr.w	r2, r2, #16
 8006306:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006308:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	b2da      	uxtb	r2, r3
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e002      	b.n	8006320 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800631a:	4b05      	ldr	r3, [pc, #20]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006320:	4b03      	ldr	r3, [pc, #12]	@ (8006330 <USER_SPI_initialize+0x1cc>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	bf00      	nop
 8006330:	20000028 	.word	0x20000028
 8006334:	20000210 	.word	0x20000210
 8006338:	20000550 	.word	0x20000550

0800633c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <USER_SPI_status+0x14>
 800634c:	2301      	movs	r3, #1
 800634e:	e002      	b.n	8006356 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006350:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <USER_SPI_status+0x28>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b2db      	uxtb	r3, r3
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000028 	.word	0x20000028

08006368 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <USER_SPI_read+0x1c>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USER_SPI_read+0x20>
 8006384:	2304      	movs	r3, #4
 8006386:	e04d      	b.n	8006424 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006388:	4b28      	ldr	r3, [pc, #160]	@ (800642c <USER_SPI_read+0xc4>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <USER_SPI_read+0x32>
 8006396:	2303      	movs	r3, #3
 8006398:	e044      	b.n	8006424 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800639a:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <USER_SPI_read+0xc8>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <USER_SPI_read+0x44>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	025b      	lsls	r3, r3, #9
 80063aa:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d111      	bne.n	80063d6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	2011      	movs	r0, #17
 80063b6:	f7ff fe66 	bl	8006086 <send_cmd>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d129      	bne.n	8006414 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80063c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063c4:	68b8      	ldr	r0, [r7, #8]
 80063c6:	f7ff fe03 	bl	8005fd0 <rcvr_datablock>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d021      	beq.n	8006414 <USER_SPI_read+0xac>
			count = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	e01e      	b.n	8006414 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	2012      	movs	r0, #18
 80063da:	f7ff fe54 	bl	8006086 <send_cmd>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d117      	bne.n	8006414 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80063e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063e8:	68b8      	ldr	r0, [r7, #8]
 80063ea:	f7ff fdf1 	bl	8005fd0 <rcvr_datablock>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <USER_SPI_read+0xa2>
				buff += 512;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80063fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1ed      	bne.n	80063e4 <USER_SPI_read+0x7c>
 8006408:	e000      	b.n	800640c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800640a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800640c:	2100      	movs	r1, #0
 800640e:	200c      	movs	r0, #12
 8006410:	f7ff fe39 	bl	8006086 <send_cmd>
		}
	}
	despiselect();
 8006414:	f7ff fdb4 	bl	8005f80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bf14      	ite	ne
 800641e:	2301      	movne	r3, #1
 8006420:	2300      	moveq	r3, #0
 8006422:	b2db      	uxtb	r3, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20000028 	.word	0x20000028
 8006430:	20000550 	.word	0x20000550

08006434 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <USER_SPI_write+0x1c>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <USER_SPI_write+0x20>
 8006450:	2304      	movs	r3, #4
 8006452:	e063      	b.n	800651c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006454:	4b33      	ldr	r3, [pc, #204]	@ (8006524 <USER_SPI_write+0xf0>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <USER_SPI_write+0x32>
 8006462:	2303      	movs	r3, #3
 8006464:	e05a      	b.n	800651c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006466:	4b2f      	ldr	r3, [pc, #188]	@ (8006524 <USER_SPI_write+0xf0>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USER_SPI_write+0x44>
 8006474:	2302      	movs	r3, #2
 8006476:	e051      	b.n	800651c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006478:	4b2b      	ldr	r3, [pc, #172]	@ (8006528 <USER_SPI_write+0xf4>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <USER_SPI_write+0x56>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	025b      	lsls	r3, r3, #9
 8006488:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d110      	bne.n	80064b2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	2018      	movs	r0, #24
 8006494:	f7ff fdf7 	bl	8006086 <send_cmd>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d136      	bne.n	800650c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800649e:	21fe      	movs	r1, #254	@ 0xfe
 80064a0:	68b8      	ldr	r0, [r7, #8]
 80064a2:	f7ff fdbe 	bl	8006022 <xmit_datablock>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d02f      	beq.n	800650c <USER_SPI_write+0xd8>
			count = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	e02c      	b.n	800650c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80064b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006528 <USER_SPI_write+0xf4>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	f003 0306 	and.w	r3, r3, #6
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <USER_SPI_write+0x92>
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	2097      	movs	r0, #151	@ 0x97
 80064c2:	f7ff fde0 	bl	8006086 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	2019      	movs	r0, #25
 80064ca:	f7ff fddc 	bl	8006086 <send_cmd>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11b      	bne.n	800650c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80064d4:	21fc      	movs	r1, #252	@ 0xfc
 80064d6:	68b8      	ldr	r0, [r7, #8]
 80064d8:	f7ff fda3 	bl	8006022 <xmit_datablock>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <USER_SPI_write+0xc4>
				buff += 512;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80064e8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ee      	bne.n	80064d4 <USER_SPI_write+0xa0>
 80064f6:	e000      	b.n	80064fa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80064f8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80064fa:	21fd      	movs	r1, #253	@ 0xfd
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7ff fd90 	bl	8006022 <xmit_datablock>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USER_SPI_write+0xd8>
 8006508:	2301      	movs	r3, #1
 800650a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800650c:	f7ff fd38 	bl	8005f80 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf14      	ite	ne
 8006516:	2301      	movne	r3, #1
 8006518:	2300      	moveq	r3, #0
 800651a:	b2db      	uxtb	r3, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000028 	.word	0x20000028
 8006528:	20000550 	.word	0x20000550

0800652c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08c      	sub	sp, #48	@ 0x30
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	603a      	str	r2, [r7, #0]
 8006536:	71fb      	strb	r3, [r7, #7]
 8006538:	460b      	mov	r3, r1
 800653a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <USER_SPI_ioctl+0x1a>
 8006542:	2304      	movs	r3, #4
 8006544:	e15a      	b.n	80067fc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006546:	4baf      	ldr	r3, [pc, #700]	@ (8006804 <USER_SPI_ioctl+0x2d8>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USER_SPI_ioctl+0x2c>
 8006554:	2303      	movs	r3, #3
 8006556:	e151      	b.n	80067fc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800655e:	79bb      	ldrb	r3, [r7, #6]
 8006560:	2b04      	cmp	r3, #4
 8006562:	f200 8136 	bhi.w	80067d2 <USER_SPI_ioctl+0x2a6>
 8006566:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <USER_SPI_ioctl+0x40>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006581 	.word	0x08006581
 8006570:	08006595 	.word	0x08006595
 8006574:	080067d3 	.word	0x080067d3
 8006578:	08006641 	.word	0x08006641
 800657c:	08006737 	.word	0x08006737
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006580:	f7ff fd0c 	bl	8005f9c <spiselect>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 8127 	beq.w	80067da <USER_SPI_ioctl+0x2ae>
 800658c:	2300      	movs	r3, #0
 800658e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006592:	e122      	b.n	80067da <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006594:	2100      	movs	r1, #0
 8006596:	2009      	movs	r0, #9
 8006598:	f7ff fd75 	bl	8006086 <send_cmd>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 811d 	bne.w	80067de <USER_SPI_ioctl+0x2b2>
 80065a4:	f107 030c 	add.w	r3, r7, #12
 80065a8:	2110      	movs	r1, #16
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fd10 	bl	8005fd0 <rcvr_datablock>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8113 	beq.w	80067de <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d111      	bne.n	80065e6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80065c2:	7d7b      	ldrb	r3, [r7, #21]
 80065c4:	461a      	mov	r2, r3
 80065c6:	7d3b      	ldrb	r3, [r7, #20]
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	4413      	add	r3, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	7cfb      	ldrb	r3, [r7, #19]
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80065d6:	4413      	add	r3, r2
 80065d8:	3301      	adds	r3, #1
 80065da:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	029a      	lsls	r2, r3, #10
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e028      	b.n	8006638 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80065e6:	7c7b      	ldrb	r3, [r7, #17]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	7dbb      	ldrb	r3, [r7, #22]
 80065f0:	09db      	lsrs	r3, r3, #7
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4413      	add	r3, r2
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	7d7b      	ldrb	r3, [r7, #21]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4413      	add	r3, r2
 8006606:	b2db      	uxtb	r3, r3
 8006608:	3302      	adds	r3, #2
 800660a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800660e:	7d3b      	ldrb	r3, [r7, #20]
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	7cfb      	ldrb	r3, [r7, #19]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	441a      	add	r2, r3
 800661c:	7cbb      	ldrb	r3, [r7, #18]
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006624:	4413      	add	r3, r2
 8006626:	3301      	adds	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800662a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800662e:	3b09      	subs	r3, #9
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	409a      	lsls	r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800663e:	e0ce      	b.n	80067de <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006640:	4b71      	ldr	r3, [pc, #452]	@ (8006808 <USER_SPI_ioctl+0x2dc>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	d031      	beq.n	80066b0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800664c:	2100      	movs	r1, #0
 800664e:	208d      	movs	r0, #141	@ 0x8d
 8006650:	f7ff fd19 	bl	8006086 <send_cmd>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80c3 	bne.w	80067e2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800665c:	20ff      	movs	r0, #255	@ 0xff
 800665e:	f7ff fc25 	bl	8005eac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006662:	f107 030c 	add.w	r3, r7, #12
 8006666:	2110      	movs	r1, #16
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fcb1 	bl	8005fd0 <rcvr_datablock>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80b6 	beq.w	80067e2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006676:	2330      	movs	r3, #48	@ 0x30
 8006678:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800667c:	e007      	b.n	800668e <USER_SPI_ioctl+0x162>
 800667e:	20ff      	movs	r0, #255	@ 0xff
 8006680:	f7ff fc14 	bl	8005eac <xchg_spi>
 8006684:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006688:	3b01      	subs	r3, #1
 800668a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800668e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f3      	bne.n	800667e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006696:	7dbb      	ldrb	r3, [r7, #22]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	2310      	movs	r3, #16
 80066a0:	fa03 f202 	lsl.w	r2, r3, r2
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80066ae:	e098      	b.n	80067e2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80066b0:	2100      	movs	r1, #0
 80066b2:	2009      	movs	r0, #9
 80066b4:	f7ff fce7 	bl	8006086 <send_cmd>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 8091 	bne.w	80067e2 <USER_SPI_ioctl+0x2b6>
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	2110      	movs	r1, #16
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fc82 	bl	8005fd0 <rcvr_datablock>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8087 	beq.w	80067e2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80066d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006808 <USER_SPI_ioctl+0x2dc>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d012      	beq.n	8006706 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80066e0:	7dbb      	ldrb	r3, [r7, #22]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80066e8:	7dfa      	ldrb	r2, [r7, #23]
 80066ea:	09d2      	lsrs	r2, r2, #7
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	4413      	add	r3, r2
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	7e7b      	ldrb	r3, [r7, #25]
 80066f4:	099b      	lsrs	r3, r3, #6
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e013      	b.n	800672e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006706:	7dbb      	ldrb	r3, [r7, #22]
 8006708:	109b      	asrs	r3, r3, #2
 800670a:	b29b      	uxth	r3, r3
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	3301      	adds	r3, #1
 8006712:	7dfa      	ldrb	r2, [r7, #23]
 8006714:	00d2      	lsls	r2, r2, #3
 8006716:	f002 0218 	and.w	r2, r2, #24
 800671a:	7df9      	ldrb	r1, [r7, #23]
 800671c:	0949      	lsrs	r1, r1, #5
 800671e:	b2c9      	uxtb	r1, r1
 8006720:	440a      	add	r2, r1
 8006722:	3201      	adds	r2, #1
 8006724:	fb02 f303 	mul.w	r3, r2, r3
 8006728:	461a      	mov	r2, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006734:	e055      	b.n	80067e2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006736:	4b34      	ldr	r3, [pc, #208]	@ (8006808 <USER_SPI_ioctl+0x2dc>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 0306 	and.w	r3, r3, #6
 800673e:	2b00      	cmp	r3, #0
 8006740:	d051      	beq.n	80067e6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006742:	f107 020c 	add.w	r2, r7, #12
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	210b      	movs	r1, #11
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff feee 	bl	800652c <USER_SPI_ioctl>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d149      	bne.n	80067ea <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006756:	7b3b      	ldrb	r3, [r7, #12]
 8006758:	099b      	lsrs	r3, r3, #6
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USER_SPI_ioctl+0x23e>
 8006760:	7dbb      	ldrb	r3, [r7, #22]
 8006762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d041      	beq.n	80067ee <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <USER_SPI_ioctl+0x2dc>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	025b      	lsls	r3, r3, #9
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	025b      	lsls	r3, r3, #9
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006792:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006794:	2020      	movs	r0, #32
 8006796:	f7ff fc76 	bl	8006086 <send_cmd>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d128      	bne.n	80067f2 <USER_SPI_ioctl+0x2c6>
 80067a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067a2:	2021      	movs	r0, #33	@ 0x21
 80067a4:	f7ff fc6f 	bl	8006086 <send_cmd>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d121      	bne.n	80067f2 <USER_SPI_ioctl+0x2c6>
 80067ae:	2100      	movs	r1, #0
 80067b0:	2026      	movs	r0, #38	@ 0x26
 80067b2:	f7ff fc68 	bl	8006086 <send_cmd>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11a      	bne.n	80067f2 <USER_SPI_ioctl+0x2c6>
 80067bc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80067c0:	f7ff fbba 	bl	8005f38 <wait_ready>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80067ca:	2300      	movs	r3, #0
 80067cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80067d0:	e00f      	b.n	80067f2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80067d2:	2304      	movs	r3, #4
 80067d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80067d8:	e00c      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		break;
 80067da:	bf00      	nop
 80067dc:	e00a      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		break;
 80067de:	bf00      	nop
 80067e0:	e008      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		break;
 80067e2:	bf00      	nop
 80067e4:	e006      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80067e6:	bf00      	nop
 80067e8:	e004      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <USER_SPI_ioctl+0x2c8>
		break;
 80067f2:	bf00      	nop
	}

	despiselect();
 80067f4:	f7ff fbc4 	bl	8005f80 <despiselect>

	return res;
 80067f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3730      	adds	r7, #48	@ 0x30
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000028 	.word	0x20000028
 8006808:	20000550 	.word	0x20000550

0800680c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	4a08      	ldr	r2, [pc, #32]	@ (800683c <disk_status+0x30>)
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	79fa      	ldrb	r2, [r7, #7]
 8006824:	4905      	ldr	r1, [pc, #20]	@ (800683c <disk_status+0x30>)
 8006826:	440a      	add	r2, r1
 8006828:	7a12      	ldrb	r2, [r2, #8]
 800682a:	4610      	mov	r0, r2
 800682c:	4798      	blx	r3
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006832:	7bfb      	ldrb	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000584 	.word	0x20000584

08006840 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	4a0d      	ldr	r2, [pc, #52]	@ (8006888 <disk_initialize+0x48>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d111      	bne.n	800687c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	4a0b      	ldr	r2, [pc, #44]	@ (8006888 <disk_initialize+0x48>)
 800685c:	2101      	movs	r1, #1
 800685e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <disk_initialize+0x48>)
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	79fa      	ldrb	r2, [r7, #7]
 800686e:	4906      	ldr	r1, [pc, #24]	@ (8006888 <disk_initialize+0x48>)
 8006870:	440a      	add	r2, r1
 8006872:	7a12      	ldrb	r2, [r2, #8]
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000584 	.word	0x20000584

0800688c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <disk_read+0x3c>)
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	689c      	ldr	r4, [r3, #8]
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	4a07      	ldr	r2, [pc, #28]	@ (80068c8 <disk_read+0x3c>)
 80068ac:	4413      	add	r3, r2
 80068ae:	7a18      	ldrb	r0, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	47a0      	blx	r4
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd90      	pop	{r4, r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000584 	.word	0x20000584

080068cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	4a0a      	ldr	r2, [pc, #40]	@ (8006908 <disk_write+0x3c>)
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68dc      	ldr	r4, [r3, #12]
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	4a07      	ldr	r2, [pc, #28]	@ (8006908 <disk_write+0x3c>)
 80068ec:	4413      	add	r3, r2
 80068ee:	7a18      	ldrb	r0, [r3, #8]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	47a0      	blx	r4
 80068f8:	4603      	mov	r3, r0
 80068fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}
 8006906:	bf00      	nop
 8006908:	20000584 	.word	0x20000584

0800690c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	603a      	str	r2, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
 8006918:	460b      	mov	r3, r1
 800691a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	4a09      	ldr	r2, [pc, #36]	@ (8006944 <disk_ioctl+0x38>)
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	79fa      	ldrb	r2, [r7, #7]
 800692a:	4906      	ldr	r1, [pc, #24]	@ (8006944 <disk_ioctl+0x38>)
 800692c:	440a      	add	r2, r1
 800692e:	7a10      	ldrb	r0, [r2, #8]
 8006930:	79b9      	ldrb	r1, [r7, #6]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	4798      	blx	r3
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
  return res;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000584 	.word	0x20000584

08006948 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	b21a      	sxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b21b      	sxth	r3, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	b21b      	sxth	r3, r3
 800696a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800696c:	89fb      	ldrh	r3, [r7, #14]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3303      	adds	r3, #3
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	3202      	adds	r2, #2
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	3201      	adds	r2, #1
 80069a0:	7812      	ldrb	r2, [r2, #0]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	7812      	ldrb	r2, [r2, #0]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
	return rv;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	887a      	ldrh	r2, [r7, #2]
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	887a      	ldrh	r2, [r7, #2]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006a4e:	b480      	push	{r7}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	1c53      	adds	r3, r2, #1
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	1c59      	adds	r1, r3, #1
 8006a72:	6179      	str	r1, [r7, #20]
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f1      	bne.n	8006a68 <mem_cpy+0x1a>
	}
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	617a      	str	r2, [r7, #20]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f3      	bne.n	8006aa0 <mem_set+0x10>
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ac6:	b480      	push	{r7}
 8006ac8:	b089      	sub	sp, #36	@ 0x24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	61fa      	str	r2, [r7, #28]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	61ba      	str	r2, [r7, #24]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	1acb      	subs	r3, r1, r3
 8006af2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <mem_cmp+0x40>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0eb      	beq.n	8006ade <mem_cmp+0x18>

	return r;
 8006b06:	697b      	ldr	r3, [r7, #20]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3724      	adds	r7, #36	@ 0x24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006b1e:	e002      	b.n	8006b26 <chk_chr+0x12>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3301      	adds	r3, #1
 8006b24:	607b      	str	r3, [r7, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <chk_chr+0x26>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d1f2      	bne.n	8006b20 <chk_chr+0xc>
	return *str;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	e029      	b.n	8006bb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006b60:	4a27      	ldr	r2, [pc, #156]	@ (8006c00 <chk_lock+0xb4>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4413      	add	r3, r2
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01d      	beq.n	8006baa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b6e:	4a24      	ldr	r2, [pc, #144]	@ (8006c00 <chk_lock+0xb4>)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	4413      	add	r3, r2
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d116      	bne.n	8006bae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006b80:	4a1f      	ldr	r2, [pc, #124]	@ (8006c00 <chk_lock+0xb4>)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d10c      	bne.n	8006bae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006b94:	4a1a      	ldr	r2, [pc, #104]	@ (8006c00 <chk_lock+0xb4>)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d102      	bne.n	8006bae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ba8:	e007      	b.n	8006bba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d9d2      	bls.n	8006b60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d109      	bne.n	8006bd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <chk_lock+0x80>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d101      	bne.n	8006bd0 <chk_lock+0x84>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e010      	b.n	8006bf2 <chk_lock+0xa6>
 8006bd0:	2312      	movs	r3, #18
 8006bd2:	e00e      	b.n	8006bf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <chk_lock+0xa0>
 8006bda:	4a09      	ldr	r2, [pc, #36]	@ (8006c00 <chk_lock+0xb4>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	4413      	add	r3, r2
 8006be2:	330c      	adds	r3, #12
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bea:	d101      	bne.n	8006bf0 <chk_lock+0xa4>
 8006bec:	2310      	movs	r3, #16
 8006bee:	e000      	b.n	8006bf2 <chk_lock+0xa6>
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000564 	.word	0x20000564

08006c04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	e002      	b.n	8006c16 <enq_lock+0x12>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3301      	adds	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d806      	bhi.n	8006c2a <enq_lock+0x26>
 8006c1c:	4a09      	ldr	r2, [pc, #36]	@ (8006c44 <enq_lock+0x40>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	4413      	add	r3, r2
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f2      	bne.n	8006c10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000564 	.word	0x20000564

08006c48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e01f      	b.n	8006c98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006c58:	4a41      	ldr	r2, [pc, #260]	@ (8006d60 <inc_lock+0x118>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	4413      	add	r3, r2
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d113      	bne.n	8006c92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8006d60 <inc_lock+0x118>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	3304      	adds	r3, #4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d109      	bne.n	8006c92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006c7e:	4a38      	ldr	r2, [pc, #224]	@ (8006d60 <inc_lock+0x118>)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	4413      	add	r3, r2
 8006c86:	3308      	adds	r3, #8
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d006      	beq.n	8006ca0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d9dc      	bls.n	8006c58 <inc_lock+0x10>
 8006c9e:	e000      	b.n	8006ca2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006ca0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d132      	bne.n	8006d0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e002      	b.n	8006cb4 <inc_lock+0x6c>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d806      	bhi.n	8006cc8 <inc_lock+0x80>
 8006cba:	4a29      	ldr	r2, [pc, #164]	@ (8006d60 <inc_lock+0x118>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	4413      	add	r3, r2
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f2      	bne.n	8006cae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d101      	bne.n	8006cd2 <inc_lock+0x8a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e040      	b.n	8006d54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4922      	ldr	r1, [pc, #136]	@ (8006d60 <inc_lock+0x118>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	440b      	add	r3, r1
 8006cde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	491e      	ldr	r1, [pc, #120]	@ (8006d60 <inc_lock+0x118>)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	440b      	add	r3, r1
 8006cec:	3304      	adds	r3, #4
 8006cee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695a      	ldr	r2, [r3, #20]
 8006cf4:	491a      	ldr	r1, [pc, #104]	@ (8006d60 <inc_lock+0x118>)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d00:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <inc_lock+0x118>)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	4413      	add	r3, r2
 8006d08:	330c      	adds	r3, #12
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <inc_lock+0xe0>
 8006d14:	4a12      	ldr	r2, [pc, #72]	@ (8006d60 <inc_lock+0x118>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	4413      	add	r3, r2
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <inc_lock+0xe0>
 8006d24:	2300      	movs	r3, #0
 8006d26:	e015      	b.n	8006d54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d108      	bne.n	8006d40 <inc_lock+0xf8>
 8006d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d60 <inc_lock+0x118>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	4413      	add	r3, r2
 8006d36:	330c      	adds	r3, #12
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	e001      	b.n	8006d44 <inc_lock+0xfc>
 8006d40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d44:	4906      	ldr	r1, [pc, #24]	@ (8006d60 <inc_lock+0x118>)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	440b      	add	r3, r1
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000564 	.word	0x20000564

08006d64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d825      	bhi.n	8006dc4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006d78:	4a17      	ldr	r2, [pc, #92]	@ (8006dd8 <dec_lock+0x74>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	4413      	add	r3, r2
 8006d80:	330c      	adds	r3, #12
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006d86:	89fb      	ldrh	r3, [r7, #14]
 8006d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d8c:	d101      	bne.n	8006d92 <dec_lock+0x2e>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006d92:	89fb      	ldrh	r3, [r7, #14]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <dec_lock+0x3a>
 8006d98:	89fb      	ldrh	r3, [r7, #14]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd8 <dec_lock+0x74>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	4413      	add	r3, r2
 8006da6:	330c      	adds	r3, #12
 8006da8:	89fa      	ldrh	r2, [r7, #14]
 8006daa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006dac:	89fb      	ldrh	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <dec_lock+0x5a>
 8006db2:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <dec_lock+0x74>)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	4413      	add	r3, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	737b      	strb	r3, [r7, #13]
 8006dc2:	e001      	b.n	8006dc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006dc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000564 	.word	0x20000564

08006ddc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e010      	b.n	8006e0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006dea:	4a0d      	ldr	r2, [pc, #52]	@ (8006e20 <clear_lock+0x44>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	4413      	add	r3, r2
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d105      	bne.n	8006e06 <clear_lock+0x2a>
 8006dfa:	4a09      	ldr	r2, [pc, #36]	@ (8006e20 <clear_lock+0x44>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	4413      	add	r3, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d9eb      	bls.n	8006dea <clear_lock+0xe>
	}
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000564 	.word	0x20000564

08006e24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	78db      	ldrb	r3, [r3, #3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d034      	beq.n	8006ea2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7858      	ldrb	r0, [r3, #1]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e48:	2301      	movs	r3, #1
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	f7ff fd3e 	bl	80068cc <disk_write>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e022      	b.n	8006ea2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d217      	bcs.n	8006ea2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	789b      	ldrb	r3, [r3, #2]
 8006e76:	613b      	str	r3, [r7, #16]
 8006e78:	e010      	b.n	8006e9c <sync_window+0x78>
					wsect += fs->fsize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7858      	ldrb	r0, [r3, #1]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e8e:	2301      	movs	r3, #1
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	f7ff fd1b 	bl	80068cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d8eb      	bhi.n	8006e7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d01b      	beq.n	8006efc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ffad 	bl	8006e24 <sync_window>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d113      	bne.n	8006efc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7858      	ldrb	r0, [r3, #1]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ede:	2301      	movs	r3, #1
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	f7ff fcd3 	bl	800688c <disk_read>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006eec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff ff87 	bl	8006e24 <sync_window>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d158      	bne.n	8006fd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d148      	bne.n	8006fba <sync_fs+0xb2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	791b      	ldrb	r3, [r3, #4]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d144      	bne.n	8006fba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3330      	adds	r3, #48	@ 0x30
 8006f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fda8 	bl	8006a90 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3330      	adds	r3, #48	@ 0x30
 8006f44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f48:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff fd37 	bl	80069c0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3330      	adds	r3, #48	@ 0x30
 8006f56:	4921      	ldr	r1, [pc, #132]	@ (8006fdc <sync_fs+0xd4>)
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fd4c 	bl	80069f6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3330      	adds	r3, #48	@ 0x30
 8006f62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006f66:	491e      	ldr	r1, [pc, #120]	@ (8006fe0 <sync_fs+0xd8>)
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7ff fd44 	bl	80069f6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3330      	adds	r3, #48	@ 0x30
 8006f72:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7ff fd3a 	bl	80069f6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3330      	adds	r3, #48	@ 0x30
 8006f86:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7ff fd30 	bl	80069f6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7858      	ldrb	r0, [r3, #1]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f7ff fc8c 	bl	80068cc <disk_write>
			fs->fsi_flag = 0;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fca2 	bl	800690c <disk_ioctl>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <sync_fs+0xca>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	41615252 	.word	0x41615252
 8006fe0:	61417272 	.word	0x61417272

08006fe4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	3b02      	subs	r3, #2
 8006ff2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	3b02      	subs	r3, #2
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d301      	bcc.n	8007004 <clust2sect+0x20>
 8007000:	2300      	movs	r3, #0
 8007002:	e008      	b.n	8007016 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	895b      	ldrh	r3, [r3, #10]
 8007008:	461a      	mov	r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	fb03 f202 	mul.w	r2, r3, r2
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	4413      	add	r3, r2
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b086      	sub	sp, #24
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d904      	bls.n	8007042 <get_fat+0x20>
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	683a      	ldr	r2, [r7, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007042:	2301      	movs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	e08e      	b.n	8007166 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007048:	f04f 33ff 	mov.w	r3, #4294967295
 800704c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d061      	beq.n	800711a <get_fat+0xf8>
 8007056:	2b03      	cmp	r3, #3
 8007058:	dc7b      	bgt.n	8007152 <get_fat+0x130>
 800705a:	2b01      	cmp	r3, #1
 800705c:	d002      	beq.n	8007064 <get_fat+0x42>
 800705e:	2b02      	cmp	r3, #2
 8007060:	d041      	beq.n	80070e6 <get_fat+0xc4>
 8007062:	e076      	b.n	8007152 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	0a5b      	lsrs	r3, r3, #9
 800707a:	4413      	add	r3, r2
 800707c:	4619      	mov	r1, r3
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f7ff ff14 	bl	8006eac <move_window>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d166      	bne.n	8007158 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	60fa      	str	r2, [r7, #12]
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800709c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	6a1a      	ldr	r2, [r3, #32]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	0a5b      	lsrs	r3, r3, #9
 80070a6:	4413      	add	r3, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	6938      	ldr	r0, [r7, #16]
 80070ac:	f7ff fefe 	bl	8006eac <move_window>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d152      	bne.n	800715c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <get_fat+0xba>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	e002      	b.n	80070e2 <get_fat+0xc0>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e2:	617b      	str	r3, [r7, #20]
			break;
 80070e4:	e03f      	b.n	8007166 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6a1a      	ldr	r2, [r3, #32]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	4413      	add	r3, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	6938      	ldr	r0, [r7, #16]
 80070f4:	f7ff feda 	bl	8006eac <move_window>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d130      	bne.n	8007160 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800710c:	4413      	add	r3, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fc1a 	bl	8006948 <ld_word>
 8007114:	4603      	mov	r3, r0
 8007116:	617b      	str	r3, [r7, #20]
			break;
 8007118:	e025      	b.n	8007166 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	09db      	lsrs	r3, r3, #7
 8007122:	4413      	add	r3, r2
 8007124:	4619      	mov	r1, r3
 8007126:	6938      	ldr	r0, [r7, #16]
 8007128:	f7ff fec0 	bl	8006eac <move_window>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d118      	bne.n	8007164 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007140:	4413      	add	r3, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fc19 	bl	800697a <ld_dword>
 8007148:	4603      	mov	r3, r0
 800714a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800714e:	617b      	str	r3, [r7, #20]
			break;
 8007150:	e009      	b.n	8007166 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007152:	2301      	movs	r3, #1
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e006      	b.n	8007166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007158:	bf00      	nop
 800715a:	e004      	b.n	8007166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800715c:	bf00      	nop
 800715e:	e002      	b.n	8007166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007164:	bf00      	nop
		}
	}

	return val;
 8007166:	697b      	ldr	r3, [r7, #20]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b089      	sub	sp, #36	@ 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800717c:	2302      	movs	r3, #2
 800717e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b01      	cmp	r3, #1
 8007184:	f240 80d9 	bls.w	800733a <put_fat+0x1ca>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	429a      	cmp	r2, r3
 8007190:	f080 80d3 	bcs.w	800733a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b03      	cmp	r3, #3
 800719a:	f000 8096 	beq.w	80072ca <put_fat+0x15a>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	f300 80cb 	bgt.w	800733a <put_fat+0x1ca>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d002      	beq.n	80071ae <put_fat+0x3e>
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d06e      	beq.n	800728a <put_fat+0x11a>
 80071ac:	e0c5      	b.n	800733a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	4413      	add	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	4413      	add	r3, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fe6f 	bl	8006eac <move_window>
 80071ce:	4603      	mov	r3, r0
 80071d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80a9 	bne.w	800732c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	1c59      	adds	r1, r3, #1
 80071e4:	61b9      	str	r1, [r7, #24]
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	4413      	add	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00d      	beq.n	8007214 <put_fat+0xa4>
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	b25b      	sxtb	r3, r3
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	b25a      	sxtb	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	b25b      	sxtb	r3, r3
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	b25b      	sxtb	r3, r3
 800720c:	4313      	orrs	r3, r2
 800720e:	b25b      	sxtb	r3, r3
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e001      	b.n	8007218 <put_fat+0xa8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	0a5b      	lsrs	r3, r3, #9
 800722a:	4413      	add	r3, r2
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fe3c 	bl	8006eac <move_window>
 8007234:	4603      	mov	r3, r0
 8007236:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007238:	7ffb      	ldrb	r3, [r7, #31]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d178      	bne.n	8007330 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	4413      	add	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <put_fat+0xf0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	091b      	lsrs	r3, r3, #4
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e00e      	b.n	800727e <put_fat+0x10e>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f023 030f 	bic.w	r3, r3, #15
 800726a:	b25a      	sxtb	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	0a1b      	lsrs	r3, r3, #8
 8007270:	b25b      	sxtb	r3, r3
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	b25b      	sxtb	r3, r3
 8007278:	4313      	orrs	r3, r2
 800727a:	b25b      	sxtb	r3, r3
 800727c:	b2db      	uxtb	r3, r3
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	70da      	strb	r2, [r3, #3]
			break;
 8007288:	e057      	b.n	800733a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	4413      	add	r3, r2
 8007294:	4619      	mov	r1, r3
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fe08 	bl	8006eac <move_window>
 800729c:	4603      	mov	r3, r0
 800729e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072a0:	7ffb      	ldrb	r3, [r7, #31]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d146      	bne.n	8007334 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80072b4:	4413      	add	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	b292      	uxth	r2, r2
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fb7f 	bl	80069c0 <st_word>
			fs->wflag = 1;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	70da      	strb	r2, [r3, #3]
			break;
 80072c8:	e037      	b.n	800733a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	09db      	lsrs	r3, r3, #7
 80072d2:	4413      	add	r3, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff fde8 	bl	8006eac <move_window>
 80072dc:	4603      	mov	r3, r0
 80072de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d128      	bne.n	8007338 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80072fa:	4413      	add	r3, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fb3c 	bl	800697a <ld_dword>
 8007302:	4603      	mov	r3, r0
 8007304:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007308:	4323      	orrs	r3, r4
 800730a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800731a:	4413      	add	r3, r2
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fb69 	bl	80069f6 <st_dword>
			fs->wflag = 1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	70da      	strb	r2, [r3, #3]
			break;
 800732a:	e006      	b.n	800733a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800732c:	bf00      	nop
 800732e:	e004      	b.n	800733a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007330:	bf00      	nop
 8007332:	e002      	b.n	800733a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007338:	bf00      	nop
		}
	}
	return res;
 800733a:	7ffb      	ldrb	r3, [r7, #31]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3724      	adds	r7, #36	@ 0x24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd90      	pop	{r4, r7, pc}

08007344 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d904      	bls.n	800736a <remove_chain+0x26>
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d301      	bcc.n	800736e <remove_chain+0x2a>
 800736a:	2302      	movs	r3, #2
 800736c:	e04b      	b.n	8007406 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	69b8      	ldr	r0, [r7, #24]
 800737c:	f7ff fef8 	bl	8007170 <put_fat>
 8007380:	4603      	mov	r3, r0
 8007382:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007384:	7ffb      	ldrb	r3, [r7, #31]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <remove_chain+0x4a>
 800738a:	7ffb      	ldrb	r3, [r7, #31]
 800738c:	e03b      	b.n	8007406 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f7ff fe46 	bl	8007022 <get_fat>
 8007396:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d031      	beq.n	8007402 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <remove_chain+0x64>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e02e      	b.n	8007406 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d101      	bne.n	80073b4 <remove_chain+0x70>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e028      	b.n	8007406 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80073b4:	2200      	movs	r2, #0
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	69b8      	ldr	r0, [r7, #24]
 80073ba:	f7ff fed9 	bl	8007170 <put_fat>
 80073be:	4603      	mov	r3, r0
 80073c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <remove_chain+0x88>
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
 80073ca:	e01c      	b.n	8007406 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	3b02      	subs	r3, #2
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d20b      	bcs.n	80073f2 <remove_chain+0xae>
			fs->free_clst++;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3c6      	bcc.n	800738e <remove_chain+0x4a>
 8007400:	e000      	b.n	8007404 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007402:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b088      	sub	sp, #32
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10d      	bne.n	8007440 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <create_chain+0x2c>
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	429a      	cmp	r2, r3
 8007438:	d31b      	bcc.n	8007472 <create_chain+0x64>
 800743a:	2301      	movs	r3, #1
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e018      	b.n	8007472 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fded 	bl	8007022 <get_fat>
 8007448:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d801      	bhi.n	8007454 <create_chain+0x46>
 8007450:	2301      	movs	r3, #1
 8007452:	e070      	b.n	8007536 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745a:	d101      	bne.n	8007460 <create_chain+0x52>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	e06a      	b.n	8007536 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	429a      	cmp	r2, r3
 8007468:	d201      	bcs.n	800746e <create_chain+0x60>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	e063      	b.n	8007536 <create_chain+0x128>
		scl = clst;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3301      	adds	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	429a      	cmp	r2, r3
 8007484:	d307      	bcc.n	8007496 <create_chain+0x88>
				ncl = 2;
 8007486:	2302      	movs	r3, #2
 8007488:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d901      	bls.n	8007496 <create_chain+0x88>
 8007492:	2300      	movs	r3, #0
 8007494:	e04f      	b.n	8007536 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007496:	69f9      	ldr	r1, [r7, #28]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fdc2 	bl	8007022 <get_fat>
 800749e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d003      	beq.n	80074b4 <create_chain+0xa6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d101      	bne.n	80074b8 <create_chain+0xaa>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	e03e      	b.n	8007536 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d1da      	bne.n	8007476 <create_chain+0x68>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e038      	b.n	8007536 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80074c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	6938      	ldr	r0, [r7, #16]
 80074ce:	f7ff fe4f 	bl	8007170 <put_fat>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <create_chain+0xe2>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6938      	ldr	r0, [r7, #16]
 80074e8:	f7ff fe42 	bl	8007170 <put_fat>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d116      	bne.n	8007524 <create_chain+0x116>
		fs->last_clst = ncl;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	3b02      	subs	r3, #2
 8007506:	429a      	cmp	r2, r3
 8007508:	d804      	bhi.n	8007514 <create_chain+0x106>
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	e007      	b.n	8007534 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d102      	bne.n	8007530 <create_chain+0x122>
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	e000      	b.n	8007532 <create_chain+0x124>
 8007530:	2301      	movs	r3, #1
 8007532:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007534:	69fb      	ldr	r3, [r7, #28]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800753e:	b480      	push	{r7}
 8007540:	b087      	sub	sp, #28
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007552:	3304      	adds	r3, #4
 8007554:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	0a5b      	lsrs	r3, r3, #9
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	8952      	ldrh	r2, [r2, #10]
 800755e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007562:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	613a      	str	r2, [r7, #16]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <clmt_clust+0x3a>
 8007574:	2300      	movs	r3, #0
 8007576:	e010      	b.n	800759a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	429a      	cmp	r2, r3
 800757e:	d307      	bcc.n	8007590 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3304      	adds	r3, #4
 800758c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800758e:	e7e9      	b.n	8007564 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007590:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	4413      	add	r3, r2
}
 800759a:	4618      	mov	r0, r3
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075bc:	d204      	bcs.n	80075c8 <dir_sdi+0x22>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <dir_sdi+0x26>
		return FR_INT_ERR;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e063      	b.n	8007694 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <dir_sdi+0x46>
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d902      	bls.n	80075ec <dir_sdi+0x46>
		clst = fs->dirbase;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10c      	bne.n	800760c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	8912      	ldrh	r2, [r2, #8]
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d301      	bcc.n	8007602 <dir_sdi+0x5c>
 80075fe:	2302      	movs	r3, #2
 8007600:	e048      	b.n	8007694 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e029      	b.n	8007660 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	895b      	ldrh	r3, [r3, #10]
 8007610:	025b      	lsls	r3, r3, #9
 8007612:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007614:	e019      	b.n	800764a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6979      	ldr	r1, [r7, #20]
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fd01 	bl	8007022 <get_fat>
 8007620:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d101      	bne.n	800762e <dir_sdi+0x88>
 800762a:	2301      	movs	r3, #1
 800762c:	e032      	b.n	8007694 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d904      	bls.n	800763e <dir_sdi+0x98>
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	429a      	cmp	r2, r3
 800763c:	d301      	bcc.n	8007642 <dir_sdi+0x9c>
 800763e:	2302      	movs	r3, #2
 8007640:	e028      	b.n	8007694 <dir_sdi+0xee>
			ofs -= csz;
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	d2e1      	bcs.n	8007616 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007652:	6979      	ldr	r1, [r7, #20]
 8007654:	6938      	ldr	r0, [r7, #16]
 8007656:	f7ff fcc5 	bl	8006fe4 <clust2sect>
 800765a:	4602      	mov	r2, r0
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <dir_sdi+0xcc>
 800766e:	2302      	movs	r3, #2
 8007670:	e010      	b.n	8007694 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69da      	ldr	r2, [r3, #28]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	0a5b      	lsrs	r3, r3, #9
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	441a      	add	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	3320      	adds	r3, #32
 80076b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <dir_next+0x28>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c2:	d301      	bcc.n	80076c8 <dir_next+0x2c>
 80076c4:	2304      	movs	r3, #4
 80076c6:	e0aa      	b.n	800781e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 8098 	bne.w	8007804 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10b      	bne.n	80076fe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	8912      	ldrh	r2, [r2, #8]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	f0c0 8088 	bcc.w	8007804 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	61da      	str	r2, [r3, #28]
 80076fa:	2304      	movs	r3, #4
 80076fc:	e08f      	b.n	800781e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	0a5b      	lsrs	r3, r3, #9
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	8952      	ldrh	r2, [r2, #10]
 8007706:	3a01      	subs	r2, #1
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d17a      	bne.n	8007804 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7ff fc83 	bl	8007022 <get_fat>
 800771c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d801      	bhi.n	8007728 <dir_next+0x8c>
 8007724:	2302      	movs	r3, #2
 8007726:	e07a      	b.n	800781e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d101      	bne.n	8007734 <dir_next+0x98>
 8007730:	2301      	movs	r3, #1
 8007732:	e074      	b.n	800781e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	429a      	cmp	r2, r3
 800773c:	d358      	bcc.n	80077f0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	61da      	str	r2, [r3, #28]
 800774a:	2304      	movs	r3, #4
 800774c:	e067      	b.n	800781e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7ff fe59 	bl	800740e <create_chain>
 800775c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <dir_next+0xcc>
 8007764:	2307      	movs	r3, #7
 8007766:	e05a      	b.n	800781e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <dir_next+0xd6>
 800776e:	2302      	movs	r3, #2
 8007770:	e055      	b.n	800781e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d101      	bne.n	800777e <dir_next+0xe2>
 800777a:	2301      	movs	r3, #1
 800777c:	e04f      	b.n	800781e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fb50 	bl	8006e24 <sync_window>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <dir_next+0xf2>
 800778a:	2301      	movs	r3, #1
 800778c:	e047      	b.n	800781e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3330      	adds	r3, #48	@ 0x30
 8007792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff f979 	bl	8006a90 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800779e:	2300      	movs	r3, #0
 80077a0:	613b      	str	r3, [r7, #16]
 80077a2:	6979      	ldr	r1, [r7, #20]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff fc1d 	bl	8006fe4 <clust2sect>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077b0:	e012      	b.n	80077d8 <dir_next+0x13c>
						fs->wflag = 1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff fb33 	bl	8006e24 <sync_window>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <dir_next+0x12c>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e02a      	b.n	800781e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3301      	adds	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	895b      	ldrh	r3, [r3, #10]
 80077dc:	461a      	mov	r2, r3
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d3e6      	bcc.n	80077b2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077f6:	6979      	ldr	r1, [r7, #20]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fbf3 	bl	8006fe4 <clust2sect>
 80077fe:	4602      	mov	r2, r0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007836:	2100      	movs	r1, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff feb4 	bl	80075a6 <dir_sdi>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d12b      	bne.n	80078a0 <dir_alloc+0x7a>
		n = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	4619      	mov	r1, r3
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fb2a 	bl	8006eac <move_window>
 8007858:	4603      	mov	r3, r0
 800785a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11d      	bne.n	800789e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2be5      	cmp	r3, #229	@ 0xe5
 800786a:	d004      	beq.n	8007876 <dir_alloc+0x50>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3301      	adds	r3, #1
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d102      	bne.n	800788a <dir_alloc+0x64>
 8007884:	e00c      	b.n	80078a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800788a:	2101      	movs	r1, #1
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff ff05 	bl	800769c <dir_next>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0d7      	beq.n	800784c <dir_alloc+0x26>
 800789c:	e000      	b.n	80078a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800789e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d101      	bne.n	80078aa <dir_alloc+0x84>
 80078a6:	2307      	movs	r3, #7
 80078a8:	75fb      	strb	r3, [r7, #23]
	return res;
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	331a      	adds	r3, #26
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff f840 	bl	8006948 <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d109      	bne.n	80078e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	3314      	adds	r3, #20
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff f835 	bl	8006948 <ld_word>
 80078de:	4603      	mov	r3, r0
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078e8:	68fb      	ldr	r3, [r7, #12]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	331a      	adds	r3, #26
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	b292      	uxth	r2, r2
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff f859 	bl	80069c0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d109      	bne.n	800792a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f103 0214 	add.w	r2, r3, #20
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	0c1b      	lsrs	r3, r3, #16
 8007920:	b29b      	uxth	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7ff f84b 	bl	80069c0 <st_word>
	}
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007940:	2100      	movs	r1, #0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fe2f 	bl	80075a6 <dir_sdi>
 8007948:	4603      	mov	r3, r0
 800794a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <dir_find+0x24>
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	e03e      	b.n	80079d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	4619      	mov	r1, r3
 800795c:	6938      	ldr	r0, [r7, #16]
 800795e:	f7ff faa5 	bl	8006eac <move_window>
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d12f      	bne.n	80079cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <dir_find+0x4e>
 800797a:	2304      	movs	r3, #4
 800797c:	75fb      	strb	r3, [r7, #23]
 800797e:	e028      	b.n	80079d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	330b      	adds	r3, #11
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800798c:	b2da      	uxtb	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	330b      	adds	r3, #11
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <dir_find+0x86>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a18      	ldr	r0, [r3, #32]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3324      	adds	r3, #36	@ 0x24
 80079aa:	220b      	movs	r2, #11
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7ff f88a 	bl	8006ac6 <mem_cmp>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80079b8:	2100      	movs	r1, #0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fe6e 	bl	800769c <dir_next>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c5      	beq.n	8007956 <dir_find+0x24>
 80079ca:	e002      	b.n	80079d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079d0:	bf00      	nop

	return res;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80079ea:	2101      	movs	r1, #1
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff ff1a 	bl	8007826 <dir_alloc>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11c      	bne.n	8007a36 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	4619      	mov	r1, r3
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f7ff fa52 	bl	8006eac <move_window>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d111      	bne.n	8007a36 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	2220      	movs	r2, #32
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff f838 	bl	8006a90 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a18      	ldr	r0, [r3, #32]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3324      	adds	r3, #36	@ 0x24
 8007a28:	220b      	movs	r2, #11
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f7ff f80f 	bl	8006a4e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2201      	movs	r2, #1
 8007a34:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3324      	adds	r3, #36	@ 0x24
 8007a54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a56:	220b      	movs	r2, #11
 8007a58:	2120      	movs	r1, #32
 8007a5a:	68b8      	ldr	r0, [r7, #8]
 8007a5c:	f7ff f818 	bl	8006a90 <mem_set>
	si = i = 0; ni = 8;
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	2308      	movs	r3, #8
 8007a6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	61fa      	str	r2, [r7, #28]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a7a:	7efb      	ldrb	r3, [r7, #27]
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d94e      	bls.n	8007b1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a80:	7efb      	ldrb	r3, [r7, #27]
 8007a82:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a84:	d006      	beq.n	8007a94 <create_name+0x54>
 8007a86:	7efb      	ldrb	r3, [r7, #27]
 8007a88:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a8a:	d110      	bne.n	8007aae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a8c:	e002      	b.n	8007a94 <create_name+0x54>
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	3301      	adds	r3, #1
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a9e:	d0f6      	beq.n	8007a8e <create_name+0x4e>
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007aaa:	d0f0      	beq.n	8007a8e <create_name+0x4e>
			break;
 8007aac:	e038      	b.n	8007b20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007aae:	7efb      	ldrb	r3, [r7, #27]
 8007ab0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab2:	d003      	beq.n	8007abc <create_name+0x7c>
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d30c      	bcc.n	8007ad6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b0b      	cmp	r3, #11
 8007ac0:	d002      	beq.n	8007ac8 <create_name+0x88>
 8007ac2:	7efb      	ldrb	r3, [r7, #27]
 8007ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac6:	d001      	beq.n	8007acc <create_name+0x8c>
 8007ac8:	2306      	movs	r3, #6
 8007aca:	e044      	b.n	8007b56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007acc:	2308      	movs	r3, #8
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	230b      	movs	r3, #11
 8007ad2:	617b      	str	r3, [r7, #20]
			continue;
 8007ad4:	e022      	b.n	8007b1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ad6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da04      	bge.n	8007ae8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ade:	7efb      	ldrb	r3, [r7, #27]
 8007ae0:	3b80      	subs	r3, #128	@ 0x80
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b60 <create_name+0x120>)
 8007ae4:	5cd3      	ldrb	r3, [r2, r3]
 8007ae6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ae8:	7efb      	ldrb	r3, [r7, #27]
 8007aea:	4619      	mov	r1, r3
 8007aec:	481d      	ldr	r0, [pc, #116]	@ (8007b64 <create_name+0x124>)
 8007aee:	f7ff f811 	bl	8006b14 <chk_chr>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <create_name+0xbc>
 8007af8:	2306      	movs	r3, #6
 8007afa:	e02c      	b.n	8007b56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007afc:	7efb      	ldrb	r3, [r7, #27]
 8007afe:	2b60      	cmp	r3, #96	@ 0x60
 8007b00:	d905      	bls.n	8007b0e <create_name+0xce>
 8007b02:	7efb      	ldrb	r3, [r7, #27]
 8007b04:	2b7a      	cmp	r3, #122	@ 0x7a
 8007b06:	d802      	bhi.n	8007b0e <create_name+0xce>
 8007b08:	7efb      	ldrb	r3, [r7, #27]
 8007b0a:	3b20      	subs	r3, #32
 8007b0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	613a      	str	r2, [r7, #16]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4413      	add	r3, r2
 8007b18:	7efa      	ldrb	r2, [r7, #27]
 8007b1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007b1c:	e7a6      	b.n	8007a6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007b1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	441a      	add	r2, r3
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <create_name+0xf4>
 8007b30:	2306      	movs	r3, #6
 8007b32:	e010      	b.n	8007b56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2be5      	cmp	r3, #229	@ 0xe5
 8007b3a:	d102      	bne.n	8007b42 <create_name+0x102>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2205      	movs	r2, #5
 8007b40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b42:	7efb      	ldrb	r3, [r7, #27]
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d801      	bhi.n	8007b4c <create_name+0x10c>
 8007b48:	2204      	movs	r2, #4
 8007b4a:	e000      	b.n	8007b4e <create_name+0x10e>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330b      	adds	r3, #11
 8007b52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	0800c004 	.word	0x0800c004
 8007b64:	0800bf78 	.word	0x0800bf78

08007b68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b7c:	e002      	b.n	8007b84 <follow_path+0x1c>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b8a:	d0f8      	beq.n	8007b7e <follow_path+0x16>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b92:	d0f4      	beq.n	8007b7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b1f      	cmp	r3, #31
 8007ba0:	d80a      	bhi.n	8007bb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2280      	movs	r2, #128	@ 0x80
 8007ba6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fcfa 	bl	80075a6 <dir_sdi>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e043      	b.n	8007c40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bb8:	463b      	mov	r3, r7
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff3f 	bl	8007a40 <create_name>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d134      	bne.n	8007c36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff feb0 	bl	8007932 <dir_find>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007bdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d127      	bne.n	8007c3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d122      	bne.n	8007c3a <follow_path+0xd2>
 8007bf4:	2305      	movs	r3, #5
 8007bf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007bf8:	e01f      	b.n	8007c3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11c      	bne.n	8007c3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	799b      	ldrb	r3, [r3, #6]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c10:	2305      	movs	r3, #5
 8007c12:	75fb      	strb	r3, [r7, #23]
 8007c14:	e014      	b.n	8007c40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c24:	4413      	add	r3, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fe43 	bl	80078b4 <ld_clust>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c34:	e7c0      	b.n	8007bb8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c36:	bf00      	nop
 8007c38:	e002      	b.n	8007c40 <follow_path+0xd8>
				break;
 8007c3a:	bf00      	nop
 8007c3c:	e000      	b.n	8007c40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c3e:	bf00      	nop
			}
		}
	}

	return res;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d031      	beq.n	8007cc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	e002      	b.n	8007c6e <get_ldnumber+0x24>
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d903      	bls.n	8007c7e <get_ldnumber+0x34>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c7c:	d1f4      	bne.n	8007c68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c84:	d11c      	bne.n	8007cc0 <get_ldnumber+0x76>
			tp = *path;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	60fa      	str	r2, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	3b30      	subs	r3, #48	@ 0x30
 8007c96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d80e      	bhi.n	8007cbc <get_ldnumber+0x72>
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d10a      	bne.n	8007cbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <get_ldnumber+0x72>
					vol = (int)i;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	e002      	b.n	8007cc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007cc4:	693b      	ldr	r3, [r7, #16]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	70da      	strb	r2, [r3, #3]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff f8dc 	bl	8006eac <move_window>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <check_fs+0x2a>
 8007cfa:	2304      	movs	r3, #4
 8007cfc:	e038      	b.n	8007d70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3330      	adds	r3, #48	@ 0x30
 8007d02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fe1e 	bl	8006948 <ld_word>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <check_fs+0x48>
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e029      	b.n	8007d70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d22:	2be9      	cmp	r3, #233	@ 0xe9
 8007d24:	d009      	beq.n	8007d3a <check_fs+0x66>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d2c:	2beb      	cmp	r3, #235	@ 0xeb
 8007d2e:	d11e      	bne.n	8007d6e <check_fs+0x9a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007d36:	2b90      	cmp	r3, #144	@ 0x90
 8007d38:	d119      	bne.n	8007d6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3330      	adds	r3, #48	@ 0x30
 8007d3e:	3336      	adds	r3, #54	@ 0x36
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fe1a 	bl	800697a <ld_dword>
 8007d46:	4603      	mov	r3, r0
 8007d48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d78 <check_fs+0xa4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d101      	bne.n	8007d56 <check_fs+0x82>
 8007d52:	2300      	movs	r3, #0
 8007d54:	e00c      	b.n	8007d70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3330      	adds	r3, #48	@ 0x30
 8007d5a:	3352      	adds	r3, #82	@ 0x52
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fe0c 	bl	800697a <ld_dword>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4a05      	ldr	r2, [pc, #20]	@ (8007d7c <check_fs+0xa8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d101      	bne.n	8007d6e <check_fs+0x9a>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e000      	b.n	8007d70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d6e:	2302      	movs	r3, #2
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	00544146 	.word	0x00544146
 8007d7c:	33544146 	.word	0x33544146

08007d80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b096      	sub	sp, #88	@ 0x58
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff ff58 	bl	8007c4a <get_ldnumber>
 8007d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da01      	bge.n	8007da6 <find_volume+0x26>
 8007da2:	230b      	movs	r3, #11
 8007da4:	e22d      	b.n	8008202 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007da6:	4aa1      	ldr	r2, [pc, #644]	@ (800802c <find_volume+0x2ac>)
 8007da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <find_volume+0x3a>
 8007db6:	230c      	movs	r3, #12
 8007db8:	e223      	b.n	8008202 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01a      	beq.n	8007e06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe fd19 	bl	800680c <disk_status>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007de0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10c      	bne.n	8007e06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <find_volume+0x82>
 8007df2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e1ff      	b.n	8008202 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007e02:	2300      	movs	r3, #0
 8007e04:	e1fd      	b.n	8008202 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe fd11 	bl	8006840 <disk_initialize>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e30:	2303      	movs	r3, #3
 8007e32:	e1e6      	b.n	8008202 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d007      	beq.n	8007e4a <find_volume+0xca>
 8007e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e46:	230a      	movs	r3, #10
 8007e48:	e1db      	b.n	8008202 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e52:	f7ff ff3f 	bl	8007cd4 <check_fs>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d149      	bne.n	8007ef8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e64:	2300      	movs	r3, #0
 8007e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e68:	e01e      	b.n	8007ea8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007e78:	4413      	add	r3, r2
 8007e7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	3304      	adds	r3, #4
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d006      	beq.n	8007e94 <find_volume+0x114>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	3308      	adds	r3, #8
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fd75 	bl	800697a <ld_dword>
 8007e90:	4602      	mov	r2, r0
 8007e92:	e000      	b.n	8007e96 <find_volume+0x116>
 8007e94:	2200      	movs	r2, #0
 8007e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	3358      	adds	r3, #88	@ 0x58
 8007e9c:	443b      	add	r3, r7
 8007e9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d9dd      	bls.n	8007e6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007eae:	2300      	movs	r3, #0
 8007eb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <find_volume+0x13e>
 8007eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	3358      	adds	r3, #88	@ 0x58
 8007ec4:	443b      	add	r3, r7
 8007ec6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <find_volume+0x15e>
 8007ed2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ed4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ed6:	f7ff fefd 	bl	8007cd4 <check_fs>
 8007eda:	4603      	mov	r3, r0
 8007edc:	e000      	b.n	8007ee0 <find_volume+0x160>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d905      	bls.n	8007ef8 <find_volume+0x178>
 8007eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eee:	3301      	adds	r3, #1
 8007ef0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d9e2      	bls.n	8007ebe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d101      	bne.n	8007f04 <find_volume+0x184>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e17e      	b.n	8008202 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d901      	bls.n	8007f10 <find_volume+0x190>
 8007f0c:	230d      	movs	r3, #13
 8007f0e:	e178      	b.n	8008202 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	3330      	adds	r3, #48	@ 0x30
 8007f14:	330b      	adds	r3, #11
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fd16 	bl	8006948 <ld_word>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f22:	d001      	beq.n	8007f28 <find_volume+0x1a8>
 8007f24:	230d      	movs	r3, #13
 8007f26:	e16c      	b.n	8008202 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	3330      	adds	r3, #48	@ 0x30
 8007f2c:	3316      	adds	r3, #22
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fd0a 	bl	8006948 <ld_word>
 8007f34:	4603      	mov	r3, r0
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <find_volume+0x1cc>
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	3330      	adds	r3, #48	@ 0x30
 8007f42:	3324      	adds	r3, #36	@ 0x24
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fd18 	bl	800697a <ld_dword>
 8007f4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f54:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	789b      	ldrb	r3, [r3, #2]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d005      	beq.n	8007f70 <find_volume+0x1f0>
 8007f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f66:	789b      	ldrb	r3, [r3, #2]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d001      	beq.n	8007f70 <find_volume+0x1f0>
 8007f6c:	230d      	movs	r3, #13
 8007f6e:	e148      	b.n	8008202 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	789b      	ldrb	r3, [r3, #2]
 8007f74:	461a      	mov	r2, r3
 8007f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f78:	fb02 f303 	mul.w	r3, r2, r3
 8007f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f84:	461a      	mov	r2, r3
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	895b      	ldrh	r3, [r3, #10]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <find_volume+0x224>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	895b      	ldrh	r3, [r3, #10]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	895b      	ldrh	r3, [r3, #10]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <find_volume+0x228>
 8007fa4:	230d      	movs	r3, #13
 8007fa6:	e12c      	b.n	8008202 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007faa:	3330      	adds	r3, #48	@ 0x30
 8007fac:	3311      	adds	r3, #17
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fcca 	bl	8006948 <ld_word>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	891b      	ldrh	r3, [r3, #8]
 8007fc0:	f003 030f 	and.w	r3, r3, #15
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <find_volume+0x24e>
 8007fca:	230d      	movs	r3, #13
 8007fcc:	e119      	b.n	8008202 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	3330      	adds	r3, #48	@ 0x30
 8007fd2:	3313      	adds	r3, #19
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe fcb7 	bl	8006948 <ld_word>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <find_volume+0x272>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	3330      	adds	r3, #48	@ 0x30
 8007fe8:	3320      	adds	r3, #32
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fcc5 	bl	800697a <ld_dword>
 8007ff0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff4:	3330      	adds	r3, #48	@ 0x30
 8007ff6:	330e      	adds	r3, #14
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe fca5 	bl	8006948 <ld_word>
 8007ffe:	4603      	mov	r3, r0
 8008000:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008002:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <find_volume+0x28c>
 8008008:	230d      	movs	r3, #13
 800800a:	e0fa      	b.n	8008202 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800800c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800800e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008010:	4413      	add	r3, r2
 8008012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008014:	8912      	ldrh	r2, [r2, #8]
 8008016:	0912      	lsrs	r2, r2, #4
 8008018:	b292      	uxth	r2, r2
 800801a:	4413      	add	r3, r2
 800801c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800801e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	429a      	cmp	r2, r3
 8008024:	d204      	bcs.n	8008030 <find_volume+0x2b0>
 8008026:	230d      	movs	r3, #13
 8008028:	e0eb      	b.n	8008202 <find_volume+0x482>
 800802a:	bf00      	nop
 800802c:	2000055c 	.word	0x2000055c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008038:	8952      	ldrh	r2, [r2, #10]
 800803a:	fbb3 f3f2 	udiv	r3, r3, r2
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <find_volume+0x2ca>
 8008046:	230d      	movs	r3, #13
 8008048:	e0db      	b.n	8008202 <find_volume+0x482>
		fmt = FS_FAT32;
 800804a:	2303      	movs	r3, #3
 800804c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008056:	4293      	cmp	r3, r2
 8008058:	d802      	bhi.n	8008060 <find_volume+0x2e0>
 800805a:	2302      	movs	r3, #2
 800805c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008066:	4293      	cmp	r3, r2
 8008068:	d802      	bhi.n	8008070 <find_volume+0x2f0>
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	1c9a      	adds	r2, r3, #2
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800807c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800807e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008082:	441a      	add	r2, r3
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008088:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	441a      	add	r2, r3
 800808e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008090:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008092:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008096:	2b03      	cmp	r3, #3
 8008098:	d11e      	bne.n	80080d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	3330      	adds	r3, #48	@ 0x30
 800809e:	332a      	adds	r3, #42	@ 0x2a
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe fc51 	bl	8006948 <ld_word>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <find_volume+0x330>
 80080ac:	230d      	movs	r3, #13
 80080ae:	e0a8      	b.n	8008202 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	891b      	ldrh	r3, [r3, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <find_volume+0x33c>
 80080b8:	230d      	movs	r3, #13
 80080ba:	e0a2      	b.n	8008202 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080be:	3330      	adds	r3, #48	@ 0x30
 80080c0:	332c      	adds	r3, #44	@ 0x2c
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fc59 	bl	800697a <ld_dword>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080d6:	e01f      	b.n	8008118 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	891b      	ldrh	r3, [r3, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <find_volume+0x364>
 80080e0:	230d      	movs	r3, #13
 80080e2:	e08e      	b.n	8008202 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ea:	441a      	add	r2, r3
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d103      	bne.n	8008100 <find_volume+0x380>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	e00a      	b.n	8008116 <find_volume+0x396>
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	4613      	mov	r3, r2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	4413      	add	r3, r2
 800810a:	085a      	lsrs	r2, r3, #1
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008116:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	699a      	ldr	r2, [r3, #24]
 800811c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800811e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008122:	0a5b      	lsrs	r3, r3, #9
 8008124:	429a      	cmp	r2, r3
 8008126:	d201      	bcs.n	800812c <find_volume+0x3ac>
 8008128:	230d      	movs	r3, #13
 800812a:	e06a      	b.n	8008202 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800812c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	611a      	str	r2, [r3, #16]
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800813c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813e:	2280      	movs	r2, #128	@ 0x80
 8008140:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008142:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008146:	2b03      	cmp	r3, #3
 8008148:	d149      	bne.n	80081de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	3330      	adds	r3, #48	@ 0x30
 800814e:	3330      	adds	r3, #48	@ 0x30
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe fbf9 	bl	8006948 <ld_word>
 8008156:	4603      	mov	r3, r0
 8008158:	2b01      	cmp	r3, #1
 800815a:	d140      	bne.n	80081de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800815c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800815e:	3301      	adds	r3, #1
 8008160:	4619      	mov	r1, r3
 8008162:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008164:	f7fe fea2 	bl	8006eac <move_window>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d137      	bne.n	80081de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	2200      	movs	r2, #0
 8008172:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	3330      	adds	r3, #48	@ 0x30
 8008178:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800817c:	4618      	mov	r0, r3
 800817e:	f7fe fbe3 	bl	8006948 <ld_word>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800818a:	429a      	cmp	r2, r3
 800818c:	d127      	bne.n	80081de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	3330      	adds	r3, #48	@ 0x30
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe fbf1 	bl	800697a <ld_dword>
 8008198:	4603      	mov	r3, r0
 800819a:	4a1c      	ldr	r2, [pc, #112]	@ (800820c <find_volume+0x48c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d11e      	bne.n	80081de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	3330      	adds	r3, #48	@ 0x30
 80081a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fbe6 	bl	800697a <ld_dword>
 80081ae:	4603      	mov	r3, r0
 80081b0:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <find_volume+0x490>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d113      	bne.n	80081de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	3330      	adds	r3, #48	@ 0x30
 80081ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fbdb 	bl	800697a <ld_dword>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	3330      	adds	r3, #48	@ 0x30
 80081ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fbd1 	bl	800697a <ld_dword>
 80081d8:	4602      	mov	r2, r0
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80081e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008214 <find_volume+0x494>)
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	4b09      	ldr	r3, [pc, #36]	@ (8008214 <find_volume+0x494>)
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	4b08      	ldr	r3, [pc, #32]	@ (8008214 <find_volume+0x494>)
 80081f4:	881a      	ldrh	r2, [r3, #0]
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081fc:	f7fe fdee 	bl	8006ddc <clear_lock>
#endif
	return FR_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3758      	adds	r7, #88	@ 0x58
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	41615252 	.word	0x41615252
 8008210:	61417272 	.word	0x61417272
 8008214:	20000560 	.word	0x20000560

08008218 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008222:	2309      	movs	r3, #9
 8008224:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01c      	beq.n	8008266 <validate+0x4e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d018      	beq.n	8008266 <validate+0x4e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d013      	beq.n	8008266 <validate+0x4e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	889a      	ldrh	r2, [r3, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	88db      	ldrh	r3, [r3, #6]
 8008248:	429a      	cmp	r2, r3
 800824a:	d10c      	bne.n	8008266 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fada 	bl	800680c <disk_status>
 8008258:	4603      	mov	r3, r0
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <validate+0x4e>
			res = FR_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <validate+0x5a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	e000      	b.n	8008274 <validate+0x5c>
 8008272:	2300      	movs	r3, #0
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	6013      	str	r3, [r2, #0]
	return res;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008296:	f107 0310 	add.w	r3, r7, #16
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fcd5 	bl	8007c4a <get_ldnumber>
 80082a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da01      	bge.n	80082ac <f_mount+0x28>
 80082a8:	230b      	movs	r3, #11
 80082aa:	e02b      	b.n	8008304 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082ac:	4a17      	ldr	r2, [pc, #92]	@ (800830c <f_mount+0x88>)
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082bc:	69b8      	ldr	r0, [r7, #24]
 80082be:	f7fe fd8d 	bl	8006ddc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	490d      	ldr	r1, [pc, #52]	@ (800830c <f_mount+0x88>)
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <f_mount+0x66>
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d001      	beq.n	80082ee <f_mount+0x6a>
 80082ea:	2300      	movs	r3, #0
 80082ec:	e00a      	b.n	8008304 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082ee:	f107 010c 	add.w	r1, r7, #12
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	2200      	movs	r2, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff fd41 	bl	8007d80 <find_volume>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008302:	7dfb      	ldrb	r3, [r7, #23]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	2000055c 	.word	0x2000055c

08008310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b098      	sub	sp, #96	@ 0x60
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <f_open+0x18>
 8008324:	2309      	movs	r3, #9
 8008326:	e1a9      	b.n	800867c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800832e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008330:	79fa      	ldrb	r2, [r7, #7]
 8008332:	f107 0110 	add.w	r1, r7, #16
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fd20 	bl	8007d80 <find_volume>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800834a:	2b00      	cmp	r3, #0
 800834c:	f040 818d 	bne.w	800866a <f_open+0x35a>
		dj.obj.fs = fs;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	f107 0314 	add.w	r3, r7, #20
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fc03 	bl	8007b68 <follow_path>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800836c:	2b00      	cmp	r3, #0
 800836e:	d118      	bne.n	80083a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008370:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008374:	b25b      	sxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	da03      	bge.n	8008382 <f_open+0x72>
				res = FR_INVALID_NAME;
 800837a:	2306      	movs	r3, #6
 800837c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008380:	e00f      	b.n	80083a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	2b01      	cmp	r3, #1
 8008386:	bf8c      	ite	hi
 8008388:	2301      	movhi	r3, #1
 800838a:	2300      	movls	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fbd8 	bl	8006b4c <chk_lock>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f003 031c 	and.w	r3, r3, #28
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d07f      	beq.n	80084ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80083ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d017      	beq.n	80083e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d10e      	bne.n	80083da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083bc:	f7fe fc22 	bl	8006c04 <enq_lock>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <f_open+0xc4>
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fb06 	bl	80079dc <dir_register>
 80083d0:	4603      	mov	r3, r0
 80083d2:	e000      	b.n	80083d6 <f_open+0xc6>
 80083d4:	2312      	movs	r3, #18
 80083d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	f043 0308 	orr.w	r3, r3, #8
 80083e0:	71fb      	strb	r3, [r7, #7]
 80083e2:	e010      	b.n	8008406 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80083e4:	7ebb      	ldrb	r3, [r7, #26]
 80083e6:	f003 0311 	and.w	r3, r3, #17
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <f_open+0xe6>
					res = FR_DENIED;
 80083ee:	2307      	movs	r3, #7
 80083f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80083f4:	e007      	b.n	8008406 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <f_open+0xf6>
 8008400:	2308      	movs	r3, #8
 8008402:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008406:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800840a:	2b00      	cmp	r3, #0
 800840c:	d168      	bne.n	80084e0 <f_open+0x1d0>
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d063      	beq.n	80084e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008418:	f7fd fcc0 	bl	8005d9c <get_fattime>
 800841c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	330e      	adds	r3, #14
 8008422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fae6 	bl	80069f6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800842a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842c:	3316      	adds	r3, #22
 800842e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fae0 	bl	80069f6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	330b      	adds	r3, #11
 800843a:	2220      	movs	r2, #32
 800843c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fa35 	bl	80078b4 <ld_clust>
 800844a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008450:	2200      	movs	r2, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fa4d 	bl	80078f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	331c      	adds	r3, #28
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fac9 	bl	80069f6 <st_dword>
					fs->wflag = 1;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2201      	movs	r2, #1
 8008468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800846a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d037      	beq.n	80084e0 <f_open+0x1d0>
						dw = fs->winsect;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008476:	f107 0314 	add.w	r3, r7, #20
 800847a:	2200      	movs	r2, #0
 800847c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ff60 	bl	8007344 <remove_chain>
 8008484:	4603      	mov	r3, r0
 8008486:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800848a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800848e:	2b00      	cmp	r3, #0
 8008490:	d126      	bne.n	80084e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fd08 	bl	8006eac <move_window>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084a6:	3a01      	subs	r2, #1
 80084a8:	60da      	str	r2, [r3, #12]
 80084aa:	e019      	b.n	80084e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80084ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d115      	bne.n	80084e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80084b4:	7ebb      	ldrb	r3, [r7, #26]
 80084b6:	f003 0310 	and.w	r3, r3, #16
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80084be:	2304      	movs	r3, #4
 80084c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80084c4:	e00c      	b.n	80084e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <f_open+0x1d0>
 80084d0:	7ebb      	ldrb	r3, [r7, #26]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <f_open+0x1d0>
						res = FR_DENIED;
 80084da:	2307      	movs	r3, #7
 80084dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80084e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d126      	bne.n	8008536 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	2b01      	cmp	r3, #1
 800850c:	bf8c      	ite	hi
 800850e:	2301      	movhi	r3, #1
 8008510:	2300      	movls	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	f107 0314 	add.w	r3, r7, #20
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe fb93 	bl	8006c48 <inc_lock>
 8008522:	4602      	mov	r2, r0
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <f_open+0x226>
 8008530:	2302      	movs	r3, #2
 8008532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008536:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 8095 	bne.w	800866a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008544:	4611      	mov	r1, r2
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff f9b4 	bl	80078b4 <ld_clust>
 800854c:	4602      	mov	r2, r0
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008554:	331c      	adds	r3, #28
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fa0f 	bl	800697a <ld_dword>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	88da      	ldrh	r2, [r3, #6]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	79fa      	ldrb	r2, [r7, #7]
 800857a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3330      	adds	r3, #48	@ 0x30
 8008592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008596:	2100      	movs	r1, #0
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fa79 	bl	8006a90 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d060      	beq.n	800866a <f_open+0x35a>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d05c      	beq.n	800866a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	895b      	ldrh	r3, [r3, #10]
 80085bc:	025b      	lsls	r3, r3, #9
 80085be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80085cc:	e016      	b.n	80085fc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fd25 	bl	8007022 <get_fat>
 80085d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80085da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d802      	bhi.n	80085e6 <f_open+0x2d6>
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d102      	bne.n	80085f4 <f_open+0x2e4>
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <f_open+0x2fc>
 8008604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008608:	429a      	cmp	r2, r3
 800860a:	d8e0      	bhi.n	80085ce <f_open+0x2be>
				}
				fp->clust = clst;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008610:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008612:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008616:	2b00      	cmp	r3, #0
 8008618:	d127      	bne.n	800866a <f_open+0x35a>
 800861a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800861c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008620:	2b00      	cmp	r3, #0
 8008622:	d022      	beq.n	800866a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fcdb 	bl	8006fe4 <clust2sect>
 800862e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <f_open+0x32e>
						res = FR_INT_ERR;
 8008636:	2302      	movs	r3, #2
 8008638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800863c:	e015      	b.n	800866a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800863e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008640:	0a5a      	lsrs	r2, r3, #9
 8008642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	7858      	ldrb	r0, [r3, #1]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a1a      	ldr	r2, [r3, #32]
 8008658:	2301      	movs	r3, #1
 800865a:	f7fe f917 	bl	800688c <disk_read>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <f_open+0x35a>
 8008664:	2301      	movs	r3, #1
 8008666:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800866a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <f_open+0x368>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800867c:	4618      	mov	r0, r3
 800867e:	3760      	adds	r7, #96	@ 0x60
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08e      	sub	sp, #56	@ 0x38
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f107 0214 	add.w	r2, r7, #20
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fdb7 	bl	8008218 <validate>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80086b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d107      	bne.n	80086c8 <f_read+0x44>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	7d5b      	ldrb	r3, [r3, #21]
 80086bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <f_read+0x4a>
 80086c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086cc:	e115      	b.n	80088fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	7d1b      	ldrb	r3, [r3, #20]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <f_read+0x5a>
 80086da:	2307      	movs	r3, #7
 80086dc:	e10d      	b.n	80088fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	f240 80fe 	bls.w	80088f0 <f_read+0x26c>
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80086f8:	e0fa      	b.n	80088f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 80c6 	bne.w	8008894 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	0a5b      	lsrs	r3, r3, #9
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	8952      	ldrh	r2, [r2, #10]
 8008712:	3a01      	subs	r2, #1
 8008714:	4013      	ands	r3, r2
 8008716:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d12f      	bne.n	800877e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d103      	bne.n	800872e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30
 800872c:	e013      	b.n	8008756 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	4619      	mov	r1, r3
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7fe fefe 	bl	800753e <clmt_clust>
 8008742:	6338      	str	r0, [r7, #48]	@ 0x30
 8008744:	e007      	b.n	8008756 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fc67 	bl	8007022 <get_fat>
 8008754:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	2b01      	cmp	r3, #1
 800875a:	d804      	bhi.n	8008766 <f_read+0xe2>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	755a      	strb	r2, [r3, #21]
 8008762:	2302      	movs	r3, #2
 8008764:	e0c9      	b.n	80088fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876c:	d104      	bne.n	8008778 <f_read+0xf4>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	755a      	strb	r2, [r3, #21]
 8008774:	2301      	movs	r3, #1
 8008776:	e0c0      	b.n	80088fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe fc2c 	bl	8006fe4 <clust2sect>
 800878c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d104      	bne.n	800879e <f_read+0x11a>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2202      	movs	r2, #2
 8008798:	755a      	strb	r2, [r3, #21]
 800879a:	2302      	movs	r3, #2
 800879c:	e0ad      	b.n	80088fa <f_read+0x276>
			sect += csect;
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	0a5b      	lsrs	r3, r3, #9
 80087aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d039      	beq.n	8008826 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b6:	4413      	add	r3, r2
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	8952      	ldrh	r2, [r2, #10]
 80087bc:	4293      	cmp	r3, r2
 80087be:	d905      	bls.n	80087cc <f_read+0x148>
					cc = fs->csize - csect;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	895b      	ldrh	r3, [r3, #10]
 80087c4:	461a      	mov	r2, r3
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	7858      	ldrb	r0, [r3, #1]
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80087d6:	f7fe f859 	bl	800688c <disk_read>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <f_read+0x166>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	755a      	strb	r2, [r3, #21]
 80087e6:	2301      	movs	r3, #1
 80087e8:	e087      	b.n	80088fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	7d1b      	ldrb	r3, [r3, #20]
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da14      	bge.n	800881e <f_read+0x19a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a1a      	ldr	r2, [r3, #32]
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087fe:	429a      	cmp	r2, r3
 8008800:	d90d      	bls.n	800881e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1a      	ldr	r2, [r3, #32]
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	025b      	lsls	r3, r3, #9
 800880c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880e:	18d0      	adds	r0, r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3330      	adds	r3, #48	@ 0x30
 8008814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008818:	4619      	mov	r1, r3
 800881a:	f7fe f918 	bl	8006a4e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	025b      	lsls	r3, r3, #9
 8008822:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008824:	e050      	b.n	80088c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	d02e      	beq.n	800888e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	7d1b      	ldrb	r3, [r3, #20]
 8008834:	b25b      	sxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	da18      	bge.n	800886c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	7858      	ldrb	r0, [r3, #1]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1a      	ldr	r2, [r3, #32]
 8008848:	2301      	movs	r3, #1
 800884a:	f7fe f83f 	bl	80068cc <disk_write>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <f_read+0x1da>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	755a      	strb	r2, [r3, #21]
 800885a:	2301      	movs	r3, #1
 800885c:	e04d      	b.n	80088fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	7d1b      	ldrb	r3, [r3, #20]
 8008862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008866:	b2da      	uxtb	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	7858      	ldrb	r0, [r3, #1]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008876:	2301      	movs	r3, #1
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	f7fe f807 	bl	800688c <disk_read>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <f_read+0x20a>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	755a      	strb	r2, [r3, #21]
 800888a:	2301      	movs	r3, #1
 800888c:	e035      	b.n	80088fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80088a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80088a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d901      	bls.n	80088ae <f_read+0x22a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088bc:	4413      	add	r3, r2
 80088be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c0:	4619      	mov	r1, r3
 80088c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088c4:	f7fe f8c3 	bl	8006a4e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80088c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	4413      	add	r3, r2
 80088ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d6:	441a      	add	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	619a      	str	r2, [r3, #24]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	441a      	add	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f47f af01 	bne.w	80086fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3738      	adds	r7, #56	@ 0x38
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4611      	mov	r1, r2
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fc80 	bl	8008218 <validate>
 8008918:	4603      	mov	r3, r0
 800891a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d168      	bne.n	80089f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7d1b      	ldrb	r3, [r3, #20]
 8008926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d062      	beq.n	80089f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7d1b      	ldrb	r3, [r3, #20]
 8008932:	b25b      	sxtb	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	da15      	bge.n	8008964 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	7858      	ldrb	r0, [r3, #1]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1a      	ldr	r2, [r3, #32]
 8008946:	2301      	movs	r3, #1
 8008948:	f7fd ffc0 	bl	80068cc <disk_write>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <f_sync+0x54>
 8008952:	2301      	movs	r3, #1
 8008954:	e04f      	b.n	80089f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7d1b      	ldrb	r3, [r3, #20]
 800895a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800895e:	b2da      	uxtb	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008964:	f7fd fa1a 	bl	8005d9c <get_fattime>
 8008968:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f7fe fa9a 	bl	8006eac <move_window>
 8008978:	4603      	mov	r3, r0
 800897a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d138      	bne.n	80089f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	330b      	adds	r3, #11
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	330b      	adds	r3, #11
 8008992:	f042 0220 	orr.w	r2, r2, #32
 8008996:	b2d2      	uxtb	r2, r2
 8008998:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	461a      	mov	r2, r3
 80089a4:	68f9      	ldr	r1, [r7, #12]
 80089a6:	f7fe ffa4 	bl	80078f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f103 021c 	add.w	r2, r3, #28
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f7fe f81d 	bl	80069f6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3316      	adds	r3, #22
 80089c0:	6939      	ldr	r1, [r7, #16]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe f817 	bl	80069f6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3312      	adds	r3, #18
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fd fff6 	bl	80069c0 <st_word>
					fs->wflag = 1;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2201      	movs	r2, #1
 80089d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe fa93 	bl	8006f08 <sync_fs>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7d1b      	ldrb	r3, [r3, #20]
 80089ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ff7b 	bl	8008902 <f_sync>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d118      	bne.n	8008a48 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f107 0208 	add.w	r2, r7, #8
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fbfa 	bl	8008218 <validate>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10c      	bne.n	8008a48 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe f996 	bl	8006d64 <dec_lock>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b088      	sub	sp, #32
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a66:	e01c      	b.n	8008aa2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008a68:	f107 0310 	add.w	r3, r7, #16
 8008a6c:	f107 0114 	add.w	r1, r7, #20
 8008a70:	2201      	movs	r2, #1
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fe06 	bl	8008684 <f_read>
		if (rc != 1) break;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d117      	bne.n	8008aae <f_gets+0x5c>
		c = s[0];
 8008a7e:	7d3b      	ldrb	r3, [r7, #20]
 8008a80:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b0d      	cmp	r3, #13
 8008a86:	d00b      	beq.n	8008aa0 <f_gets+0x4e>
		*p++ = c;
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	61ba      	str	r2, [r7, #24]
 8008a8e:	7dfa      	ldrb	r2, [r7, #23]
 8008a90:	701a      	strb	r2, [r3, #0]
		n++;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3301      	adds	r3, #1
 8008a96:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b0a      	cmp	r3, #10
 8008a9c:	d009      	beq.n	8008ab2 <f_gets+0x60>
 8008a9e:	e000      	b.n	8008aa2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008aa0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	dbdd      	blt.n	8008a68 <f_gets+0x16>
 8008aac:	e002      	b.n	8008ab4 <f_gets+0x62>
		if (rc != 1) break;
 8008aae:	bf00      	nop
 8008ab0:	e000      	b.n	8008ab4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8008ab2:	bf00      	nop
	}
	*p = 0;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <f_gets+0x72>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	e000      	b.n	8008ac6 <f_gets+0x74>
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008ae8:	7a5b      	ldrb	r3, [r3, #9]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d131      	bne.n	8008b54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008af0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008af2:	7a5b      	ldrb	r3, [r3, #9]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008afa:	2100      	movs	r1, #0
 8008afc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008afe:	4b19      	ldr	r3, [pc, #100]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b00:	7a5b      	ldrb	r3, [r3, #9]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	4a17      	ldr	r2, [pc, #92]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b0e:	4b15      	ldr	r3, [pc, #84]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b10:	7a5b      	ldrb	r3, [r3, #9]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b13      	ldr	r3, [pc, #76]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b18:	4413      	add	r3, r2
 8008b1a:	79fa      	ldrb	r2, [r7, #7]
 8008b1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b1e:	4b11      	ldr	r3, [pc, #68]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b20:	7a5b      	ldrb	r3, [r3, #9]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	b2d1      	uxtb	r1, r2
 8008b28:	4a0e      	ldr	r2, [pc, #56]	@ (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b2a:	7251      	strb	r1, [r2, #9]
 8008b2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b2e:	7dbb      	ldrb	r3, [r7, #22]
 8008b30:	3330      	adds	r3, #48	@ 0x30
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	223a      	movs	r2, #58	@ 0x3a
 8008b3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3302      	adds	r3, #2
 8008b44:	222f      	movs	r2, #47	@ 0x2f
 8008b46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3303      	adds	r3, #3
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20000584 	.word	0x20000584

08008b68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b72:	2200      	movs	r2, #0
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff ffaa 	bl	8008ad0 <FATFS_LinkDriverEx>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <atof>:
 8008b86:	2100      	movs	r1, #0
 8008b88:	f000 be06 	b.w	8009798 <strtod>

08008b8c <atoi>:
 8008b8c:	220a      	movs	r2, #10
 8008b8e:	2100      	movs	r1, #0
 8008b90:	f000 be88 	b.w	80098a4 <strtol>

08008b94 <sulp>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	ec45 4b10 	vmov	d0, r4, r5
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	f002 f836 	bl	800ac10 <__ulp>
 8008ba4:	ec51 0b10 	vmov	r0, r1, d0
 8008ba8:	b17e      	cbz	r6, 8008bca <sulp+0x36>
 8008baa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dd09      	ble.n	8008bca <sulp+0x36>
 8008bb6:	051b      	lsls	r3, r3, #20
 8008bb8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bbc:	2400      	movs	r4, #0
 8008bbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	ec41 0b10 	vmov	d0, r0, r1
 8008bce:	bd70      	pop	{r4, r5, r6, pc}

08008bd0 <_strtod_l>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	b09f      	sub	sp, #124	@ 0x7c
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bda:	2200      	movs	r2, #0
 8008bdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bde:	9005      	str	r0, [sp, #20]
 8008be0:	f04f 0a00 	mov.w	sl, #0
 8008be4:	f04f 0b00 	mov.w	fp, #0
 8008be8:	460a      	mov	r2, r1
 8008bea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bec:	7811      	ldrb	r1, [r2, #0]
 8008bee:	292b      	cmp	r1, #43	@ 0x2b
 8008bf0:	d04a      	beq.n	8008c88 <_strtod_l+0xb8>
 8008bf2:	d838      	bhi.n	8008c66 <_strtod_l+0x96>
 8008bf4:	290d      	cmp	r1, #13
 8008bf6:	d832      	bhi.n	8008c5e <_strtod_l+0x8e>
 8008bf8:	2908      	cmp	r1, #8
 8008bfa:	d832      	bhi.n	8008c62 <_strtod_l+0x92>
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d03b      	beq.n	8008c78 <_strtod_l+0xa8>
 8008c00:	2200      	movs	r2, #0
 8008c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c06:	782a      	ldrb	r2, [r5, #0]
 8008c08:	2a30      	cmp	r2, #48	@ 0x30
 8008c0a:	f040 80b2 	bne.w	8008d72 <_strtod_l+0x1a2>
 8008c0e:	786a      	ldrb	r2, [r5, #1]
 8008c10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c14:	2a58      	cmp	r2, #88	@ 0x58
 8008c16:	d16e      	bne.n	8008cf6 <_strtod_l+0x126>
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4a8f      	ldr	r2, [pc, #572]	@ (8008e60 <_strtod_l+0x290>)
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c28:	a919      	add	r1, sp, #100	@ 0x64
 8008c2a:	f001 f8f3 	bl	8009e14 <__gethex>
 8008c2e:	f010 060f 	ands.w	r6, r0, #15
 8008c32:	4604      	mov	r4, r0
 8008c34:	d005      	beq.n	8008c42 <_strtod_l+0x72>
 8008c36:	2e06      	cmp	r6, #6
 8008c38:	d128      	bne.n	8008c8c <_strtod_l+0xbc>
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c40:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 858e 	bne.w	8009766 <_strtod_l+0xb96>
 8008c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c4c:	b1cb      	cbz	r3, 8008c82 <_strtod_l+0xb2>
 8008c4e:	4652      	mov	r2, sl
 8008c50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c54:	ec43 2b10 	vmov	d0, r2, r3
 8008c58:	b01f      	add	sp, #124	@ 0x7c
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	2920      	cmp	r1, #32
 8008c60:	d1ce      	bne.n	8008c00 <_strtod_l+0x30>
 8008c62:	3201      	adds	r2, #1
 8008c64:	e7c1      	b.n	8008bea <_strtod_l+0x1a>
 8008c66:	292d      	cmp	r1, #45	@ 0x2d
 8008c68:	d1ca      	bne.n	8008c00 <_strtod_l+0x30>
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008c6e:	1c51      	adds	r1, r2, #1
 8008c70:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c72:	7852      	ldrb	r2, [r2, #1]
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d1c5      	bne.n	8008c04 <_strtod_l+0x34>
 8008c78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f040 8570 	bne.w	8009762 <_strtod_l+0xb92>
 8008c82:	4652      	mov	r2, sl
 8008c84:	465b      	mov	r3, fp
 8008c86:	e7e5      	b.n	8008c54 <_strtod_l+0x84>
 8008c88:	2100      	movs	r1, #0
 8008c8a:	e7ef      	b.n	8008c6c <_strtod_l+0x9c>
 8008c8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c8e:	b13a      	cbz	r2, 8008ca0 <_strtod_l+0xd0>
 8008c90:	2135      	movs	r1, #53	@ 0x35
 8008c92:	a81c      	add	r0, sp, #112	@ 0x70
 8008c94:	f002 f8b6 	bl	800ae04 <__copybits>
 8008c98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c9a:	9805      	ldr	r0, [sp, #20]
 8008c9c:	f001 fc8c 	bl	800a5b8 <_Bfree>
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ca4:	2e04      	cmp	r6, #4
 8008ca6:	d806      	bhi.n	8008cb6 <_strtod_l+0xe6>
 8008ca8:	e8df f006 	tbb	[pc, r6]
 8008cac:	201d0314 	.word	0x201d0314
 8008cb0:	14          	.byte	0x14
 8008cb1:	00          	.byte	0x00
 8008cb2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cb6:	05e1      	lsls	r1, r4, #23
 8008cb8:	bf48      	it	mi
 8008cba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cc2:	0d1b      	lsrs	r3, r3, #20
 8008cc4:	051b      	lsls	r3, r3, #20
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1bb      	bne.n	8008c42 <_strtod_l+0x72>
 8008cca:	f000 ffab 	bl	8009c24 <__errno>
 8008cce:	2322      	movs	r3, #34	@ 0x22
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	e7b6      	b.n	8008c42 <_strtod_l+0x72>
 8008cd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cdc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ce0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ce4:	e7e7      	b.n	8008cb6 <_strtod_l+0xe6>
 8008ce6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008e68 <_strtod_l+0x298>
 8008cea:	e7e4      	b.n	8008cb6 <_strtod_l+0xe6>
 8008cec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008cf0:	f04f 3aff 	mov.w	sl, #4294967295
 8008cf4:	e7df      	b.n	8008cb6 <_strtod_l+0xe6>
 8008cf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b30      	cmp	r3, #48	@ 0x30
 8008d00:	d0f9      	beq.n	8008cf6 <_strtod_l+0x126>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d09d      	beq.n	8008c42 <_strtod_l+0x72>
 8008d06:	2301      	movs	r3, #1
 8008d08:	2700      	movs	r7, #0
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008d12:	46b9      	mov	r9, r7
 8008d14:	220a      	movs	r2, #10
 8008d16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d18:	7805      	ldrb	r5, [r0, #0]
 8008d1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d1e:	b2d9      	uxtb	r1, r3
 8008d20:	2909      	cmp	r1, #9
 8008d22:	d928      	bls.n	8008d76 <_strtod_l+0x1a6>
 8008d24:	494f      	ldr	r1, [pc, #316]	@ (8008e64 <_strtod_l+0x294>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	f000 ff10 	bl	8009b4c <strncmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d032      	beq.n	8008d96 <_strtod_l+0x1c6>
 8008d30:	2000      	movs	r0, #0
 8008d32:	462a      	mov	r2, r5
 8008d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d36:	464d      	mov	r5, r9
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2a65      	cmp	r2, #101	@ 0x65
 8008d3c:	d001      	beq.n	8008d42 <_strtod_l+0x172>
 8008d3e:	2a45      	cmp	r2, #69	@ 0x45
 8008d40:	d114      	bne.n	8008d6c <_strtod_l+0x19c>
 8008d42:	b91d      	cbnz	r5, 8008d4c <_strtod_l+0x17c>
 8008d44:	9a08      	ldr	r2, [sp, #32]
 8008d46:	4302      	orrs	r2, r0
 8008d48:	d096      	beq.n	8008c78 <_strtod_l+0xa8>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d4e:	1c62      	adds	r2, r4, #1
 8008d50:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d52:	7862      	ldrb	r2, [r4, #1]
 8008d54:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d56:	d07a      	beq.n	8008e4e <_strtod_l+0x27e>
 8008d58:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d5a:	d07e      	beq.n	8008e5a <_strtod_l+0x28a>
 8008d5c:	f04f 0c00 	mov.w	ip, #0
 8008d60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d64:	2909      	cmp	r1, #9
 8008d66:	f240 8085 	bls.w	8008e74 <_strtod_l+0x2a4>
 8008d6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d6c:	f04f 0800 	mov.w	r8, #0
 8008d70:	e0a5      	b.n	8008ebe <_strtod_l+0x2ee>
 8008d72:	2300      	movs	r3, #0
 8008d74:	e7c8      	b.n	8008d08 <_strtod_l+0x138>
 8008d76:	f1b9 0f08 	cmp.w	r9, #8
 8008d7a:	bfd8      	it	le
 8008d7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008d7e:	f100 0001 	add.w	r0, r0, #1
 8008d82:	bfda      	itte	le
 8008d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008d8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008d8e:	f109 0901 	add.w	r9, r9, #1
 8008d92:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d94:	e7bf      	b.n	8008d16 <_strtod_l+0x146>
 8008d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d9c:	785a      	ldrb	r2, [r3, #1]
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	d03b      	beq.n	8008e1c <_strtod_l+0x24c>
 8008da4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008da6:	464d      	mov	r5, r9
 8008da8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d912      	bls.n	8008dd6 <_strtod_l+0x206>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7c2      	b.n	8008d3a <_strtod_l+0x16a>
 8008db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dba:	785a      	ldrb	r2, [r3, #1]
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	2a30      	cmp	r2, #48	@ 0x30
 8008dc0:	d0f8      	beq.n	8008db4 <_strtod_l+0x1e4>
 8008dc2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	f200 84d2 	bhi.w	8009770 <_strtod_l+0xba0>
 8008dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dce:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	3a30      	subs	r2, #48	@ 0x30
 8008dd8:	f100 0301 	add.w	r3, r0, #1
 8008ddc:	d018      	beq.n	8008e10 <_strtod_l+0x240>
 8008dde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008de0:	4419      	add	r1, r3
 8008de2:	910a      	str	r1, [sp, #40]	@ 0x28
 8008de4:	462e      	mov	r6, r5
 8008de6:	f04f 0e0a 	mov.w	lr, #10
 8008dea:	1c71      	adds	r1, r6, #1
 8008dec:	eba1 0c05 	sub.w	ip, r1, r5
 8008df0:	4563      	cmp	r3, ip
 8008df2:	dc15      	bgt.n	8008e20 <_strtod_l+0x250>
 8008df4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008df8:	182b      	adds	r3, r5, r0
 8008dfa:	2b08      	cmp	r3, #8
 8008dfc:	f105 0501 	add.w	r5, r5, #1
 8008e00:	4405      	add	r5, r0
 8008e02:	dc1a      	bgt.n	8008e3a <_strtod_l+0x26a>
 8008e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e06:	230a      	movs	r3, #10
 8008e08:	fb03 2301 	mla	r3, r3, r1, r2
 8008e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e12:	1c51      	adds	r1, r2, #1
 8008e14:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e16:	7852      	ldrb	r2, [r2, #1]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	e7c5      	b.n	8008da8 <_strtod_l+0x1d8>
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	e7ce      	b.n	8008dbe <_strtod_l+0x1ee>
 8008e20:	2e08      	cmp	r6, #8
 8008e22:	dc05      	bgt.n	8008e30 <_strtod_l+0x260>
 8008e24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e26:	fb0e f606 	mul.w	r6, lr, r6
 8008e2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	e7dc      	b.n	8008dea <_strtod_l+0x21a>
 8008e30:	2910      	cmp	r1, #16
 8008e32:	bfd8      	it	le
 8008e34:	fb0e f707 	mulle.w	r7, lr, r7
 8008e38:	e7f8      	b.n	8008e2c <_strtod_l+0x25c>
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	bfdc      	itt	le
 8008e3e:	230a      	movle	r3, #10
 8008e40:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e44:	e7e3      	b.n	8008e0e <_strtod_l+0x23e>
 8008e46:	2300      	movs	r3, #0
 8008e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e77a      	b.n	8008d44 <_strtod_l+0x174>
 8008e4e:	f04f 0c00 	mov.w	ip, #0
 8008e52:	1ca2      	adds	r2, r4, #2
 8008e54:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e56:	78a2      	ldrb	r2, [r4, #2]
 8008e58:	e782      	b.n	8008d60 <_strtod_l+0x190>
 8008e5a:	f04f 0c01 	mov.w	ip, #1
 8008e5e:	e7f8      	b.n	8008e52 <_strtod_l+0x282>
 8008e60:	0800c200 	.word	0x0800c200
 8008e64:	0800c084 	.word	0x0800c084
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e6e:	1c51      	adds	r1, r2, #1
 8008e70:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e72:	7852      	ldrb	r2, [r2, #1]
 8008e74:	2a30      	cmp	r2, #48	@ 0x30
 8008e76:	d0f9      	beq.n	8008e6c <_strtod_l+0x29c>
 8008e78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e7c:	2908      	cmp	r1, #8
 8008e7e:	f63f af75 	bhi.w	8008d6c <_strtod_l+0x19c>
 8008e82:	3a30      	subs	r2, #48	@ 0x30
 8008e84:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e8a:	f04f 080a 	mov.w	r8, #10
 8008e8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e90:	1c56      	adds	r6, r2, #1
 8008e92:	9619      	str	r6, [sp, #100]	@ 0x64
 8008e94:	7852      	ldrb	r2, [r2, #1]
 8008e96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008e9a:	f1be 0f09 	cmp.w	lr, #9
 8008e9e:	d939      	bls.n	8008f14 <_strtod_l+0x344>
 8008ea0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ea2:	1a76      	subs	r6, r6, r1
 8008ea4:	2e08      	cmp	r6, #8
 8008ea6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008eaa:	dc03      	bgt.n	8008eb4 <_strtod_l+0x2e4>
 8008eac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008eae:	4588      	cmp	r8, r1
 8008eb0:	bfa8      	it	ge
 8008eb2:	4688      	movge	r8, r1
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	d001      	beq.n	8008ebe <_strtod_l+0x2ee>
 8008eba:	f1c8 0800 	rsb	r8, r8, #0
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d14e      	bne.n	8008f60 <_strtod_l+0x390>
 8008ec2:	9908      	ldr	r1, [sp, #32]
 8008ec4:	4308      	orrs	r0, r1
 8008ec6:	f47f aebc 	bne.w	8008c42 <_strtod_l+0x72>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f aed4 	bne.w	8008c78 <_strtod_l+0xa8>
 8008ed0:	2a69      	cmp	r2, #105	@ 0x69
 8008ed2:	d028      	beq.n	8008f26 <_strtod_l+0x356>
 8008ed4:	dc25      	bgt.n	8008f22 <_strtod_l+0x352>
 8008ed6:	2a49      	cmp	r2, #73	@ 0x49
 8008ed8:	d025      	beq.n	8008f26 <_strtod_l+0x356>
 8008eda:	2a4e      	cmp	r2, #78	@ 0x4e
 8008edc:	f47f aecc 	bne.w	8008c78 <_strtod_l+0xa8>
 8008ee0:	499a      	ldr	r1, [pc, #616]	@ (800914c <_strtod_l+0x57c>)
 8008ee2:	a819      	add	r0, sp, #100	@ 0x64
 8008ee4:	f001 f9b8 	bl	800a258 <__match>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f43f aec5 	beq.w	8008c78 <_strtod_l+0xa8>
 8008eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b28      	cmp	r3, #40	@ 0x28
 8008ef4:	d12e      	bne.n	8008f54 <_strtod_l+0x384>
 8008ef6:	4996      	ldr	r1, [pc, #600]	@ (8009150 <_strtod_l+0x580>)
 8008ef8:	aa1c      	add	r2, sp, #112	@ 0x70
 8008efa:	a819      	add	r0, sp, #100	@ 0x64
 8008efc:	f001 f9c0 	bl	800a280 <__hexnan>
 8008f00:	2805      	cmp	r0, #5
 8008f02:	d127      	bne.n	8008f54 <_strtod_l+0x384>
 8008f04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f12:	e696      	b.n	8008c42 <_strtod_l+0x72>
 8008f14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f16:	fb08 2101 	mla	r1, r8, r1, r2
 8008f1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f20:	e7b5      	b.n	8008e8e <_strtod_l+0x2be>
 8008f22:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f24:	e7da      	b.n	8008edc <_strtod_l+0x30c>
 8008f26:	498b      	ldr	r1, [pc, #556]	@ (8009154 <_strtod_l+0x584>)
 8008f28:	a819      	add	r0, sp, #100	@ 0x64
 8008f2a:	f001 f995 	bl	800a258 <__match>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aea2 	beq.w	8008c78 <_strtod_l+0xa8>
 8008f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f36:	4988      	ldr	r1, [pc, #544]	@ (8009158 <_strtod_l+0x588>)
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	a819      	add	r0, sp, #100	@ 0x64
 8008f3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f3e:	f001 f98b 	bl	800a258 <__match>
 8008f42:	b910      	cbnz	r0, 8008f4a <_strtod_l+0x37a>
 8008f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f46:	3301      	adds	r3, #1
 8008f48:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f4a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009168 <_strtod_l+0x598>
 8008f4e:	f04f 0a00 	mov.w	sl, #0
 8008f52:	e676      	b.n	8008c42 <_strtod_l+0x72>
 8008f54:	4881      	ldr	r0, [pc, #516]	@ (800915c <_strtod_l+0x58c>)
 8008f56:	f000 fea3 	bl	8009ca0 <nan>
 8008f5a:	ec5b ab10 	vmov	sl, fp, d0
 8008f5e:	e670      	b.n	8008c42 <_strtod_l+0x72>
 8008f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f62:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008f64:	eba8 0303 	sub.w	r3, r8, r3
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	46a9      	moveq	r9, r5
 8008f70:	2d10      	cmp	r5, #16
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	462c      	mov	r4, r5
 8008f76:	bfa8      	it	ge
 8008f78:	2410      	movge	r4, #16
 8008f7a:	f7f7 fad3 	bl	8000524 <__aeabi_ui2d>
 8008f7e:	2d09      	cmp	r5, #9
 8008f80:	4682      	mov	sl, r0
 8008f82:	468b      	mov	fp, r1
 8008f84:	dc13      	bgt.n	8008fae <_strtod_l+0x3de>
 8008f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f43f ae5a 	beq.w	8008c42 <_strtod_l+0x72>
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	dd78      	ble.n	8009084 <_strtod_l+0x4b4>
 8008f92:	2b16      	cmp	r3, #22
 8008f94:	dc5f      	bgt.n	8009056 <_strtod_l+0x486>
 8008f96:	4972      	ldr	r1, [pc, #456]	@ (8009160 <_strtod_l+0x590>)
 8008f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	465b      	mov	r3, fp
 8008fa4:	f7f7 fb38 	bl	8000618 <__aeabi_dmul>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	468b      	mov	fp, r1
 8008fac:	e649      	b.n	8008c42 <_strtod_l+0x72>
 8008fae:	4b6c      	ldr	r3, [pc, #432]	@ (8009160 <_strtod_l+0x590>)
 8008fb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fb8:	f7f7 fb2e 	bl	8000618 <__aeabi_dmul>
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	f7f7 faaf 	bl	8000524 <__aeabi_ui2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4650      	mov	r0, sl
 8008fcc:	4659      	mov	r1, fp
 8008fce:	f7f7 f96d 	bl	80002ac <__adddf3>
 8008fd2:	2d0f      	cmp	r5, #15
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	468b      	mov	fp, r1
 8008fd8:	ddd5      	ble.n	8008f86 <_strtod_l+0x3b6>
 8008fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fdc:	1b2c      	subs	r4, r5, r4
 8008fde:	441c      	add	r4, r3
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	f340 8093 	ble.w	800910c <_strtod_l+0x53c>
 8008fe6:	f014 030f 	ands.w	r3, r4, #15
 8008fea:	d00a      	beq.n	8009002 <_strtod_l+0x432>
 8008fec:	495c      	ldr	r1, [pc, #368]	@ (8009160 <_strtod_l+0x590>)
 8008fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ffa:	f7f7 fb0d 	bl	8000618 <__aeabi_dmul>
 8008ffe:	4682      	mov	sl, r0
 8009000:	468b      	mov	fp, r1
 8009002:	f034 040f 	bics.w	r4, r4, #15
 8009006:	d073      	beq.n	80090f0 <_strtod_l+0x520>
 8009008:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800900c:	dd49      	ble.n	80090a2 <_strtod_l+0x4d2>
 800900e:	2400      	movs	r4, #0
 8009010:	46a0      	mov	r8, r4
 8009012:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009014:	46a1      	mov	r9, r4
 8009016:	9a05      	ldr	r2, [sp, #20]
 8009018:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009168 <_strtod_l+0x598>
 800901c:	2322      	movs	r3, #34	@ 0x22
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	f04f 0a00 	mov.w	sl, #0
 8009024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	f43f ae0b 	beq.w	8008c42 <_strtod_l+0x72>
 800902c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800902e:	9805      	ldr	r0, [sp, #20]
 8009030:	f001 fac2 	bl	800a5b8 <_Bfree>
 8009034:	9805      	ldr	r0, [sp, #20]
 8009036:	4649      	mov	r1, r9
 8009038:	f001 fabe 	bl	800a5b8 <_Bfree>
 800903c:	9805      	ldr	r0, [sp, #20]
 800903e:	4641      	mov	r1, r8
 8009040:	f001 faba 	bl	800a5b8 <_Bfree>
 8009044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f001 fab6 	bl	800a5b8 <_Bfree>
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	4621      	mov	r1, r4
 8009050:	f001 fab2 	bl	800a5b8 <_Bfree>
 8009054:	e5f5      	b.n	8008c42 <_strtod_l+0x72>
 8009056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009058:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800905c:	4293      	cmp	r3, r2
 800905e:	dbbc      	blt.n	8008fda <_strtod_l+0x40a>
 8009060:	4c3f      	ldr	r4, [pc, #252]	@ (8009160 <_strtod_l+0x590>)
 8009062:	f1c5 050f 	rsb	r5, r5, #15
 8009066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009072:	f7f7 fad1 	bl	8000618 <__aeabi_dmul>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	1b5d      	subs	r5, r3, r5
 800907a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800907e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009082:	e78f      	b.n	8008fa4 <_strtod_l+0x3d4>
 8009084:	3316      	adds	r3, #22
 8009086:	dba8      	blt.n	8008fda <_strtod_l+0x40a>
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	eba3 0808 	sub.w	r8, r3, r8
 800908e:	4b34      	ldr	r3, [pc, #208]	@ (8009160 <_strtod_l+0x590>)
 8009090:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009094:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009098:	4650      	mov	r0, sl
 800909a:	4659      	mov	r1, fp
 800909c:	f7f7 fbe6 	bl	800086c <__aeabi_ddiv>
 80090a0:	e782      	b.n	8008fa8 <_strtod_l+0x3d8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	4f2f      	ldr	r7, [pc, #188]	@ (8009164 <_strtod_l+0x594>)
 80090a6:	1124      	asrs	r4, r4, #4
 80090a8:	4650      	mov	r0, sl
 80090aa:	4659      	mov	r1, fp
 80090ac:	461e      	mov	r6, r3
 80090ae:	2c01      	cmp	r4, #1
 80090b0:	dc21      	bgt.n	80090f6 <_strtod_l+0x526>
 80090b2:	b10b      	cbz	r3, 80090b8 <_strtod_l+0x4e8>
 80090b4:	4682      	mov	sl, r0
 80090b6:	468b      	mov	fp, r1
 80090b8:	492a      	ldr	r1, [pc, #168]	@ (8009164 <_strtod_l+0x594>)
 80090ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090c2:	4652      	mov	r2, sl
 80090c4:	465b      	mov	r3, fp
 80090c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ca:	f7f7 faa5 	bl	8000618 <__aeabi_dmul>
 80090ce:	4b26      	ldr	r3, [pc, #152]	@ (8009168 <_strtod_l+0x598>)
 80090d0:	460a      	mov	r2, r1
 80090d2:	400b      	ands	r3, r1
 80090d4:	4925      	ldr	r1, [pc, #148]	@ (800916c <_strtod_l+0x59c>)
 80090d6:	428b      	cmp	r3, r1
 80090d8:	4682      	mov	sl, r0
 80090da:	d898      	bhi.n	800900e <_strtod_l+0x43e>
 80090dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf86      	itte	hi
 80090e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009170 <_strtod_l+0x5a0>
 80090e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80090ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80090f0:	2300      	movs	r3, #0
 80090f2:	9308      	str	r3, [sp, #32]
 80090f4:	e076      	b.n	80091e4 <_strtod_l+0x614>
 80090f6:	07e2      	lsls	r2, r4, #31
 80090f8:	d504      	bpl.n	8009104 <_strtod_l+0x534>
 80090fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090fe:	f7f7 fa8b 	bl	8000618 <__aeabi_dmul>
 8009102:	2301      	movs	r3, #1
 8009104:	3601      	adds	r6, #1
 8009106:	1064      	asrs	r4, r4, #1
 8009108:	3708      	adds	r7, #8
 800910a:	e7d0      	b.n	80090ae <_strtod_l+0x4de>
 800910c:	d0f0      	beq.n	80090f0 <_strtod_l+0x520>
 800910e:	4264      	negs	r4, r4
 8009110:	f014 020f 	ands.w	r2, r4, #15
 8009114:	d00a      	beq.n	800912c <_strtod_l+0x55c>
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <_strtod_l+0x590>)
 8009118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 fba2 	bl	800086c <__aeabi_ddiv>
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	1124      	asrs	r4, r4, #4
 800912e:	d0df      	beq.n	80090f0 <_strtod_l+0x520>
 8009130:	2c1f      	cmp	r4, #31
 8009132:	dd1f      	ble.n	8009174 <_strtod_l+0x5a4>
 8009134:	2400      	movs	r4, #0
 8009136:	46a0      	mov	r8, r4
 8009138:	940b      	str	r4, [sp, #44]	@ 0x2c
 800913a:	46a1      	mov	r9, r4
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	f04f 0a00 	mov.w	sl, #0
 8009144:	f04f 0b00 	mov.w	fp, #0
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e76b      	b.n	8009024 <_strtod_l+0x454>
 800914c:	0800c08f 	.word	0x0800c08f
 8009150:	0800c1ec 	.word	0x0800c1ec
 8009154:	0800c086 	.word	0x0800c086
 8009158:	0800c089 	.word	0x0800c089
 800915c:	0800c1e9 	.word	0x0800c1e9
 8009160:	0800c378 	.word	0x0800c378
 8009164:	0800c350 	.word	0x0800c350
 8009168:	7ff00000 	.word	0x7ff00000
 800916c:	7ca00000 	.word	0x7ca00000
 8009170:	7fefffff 	.word	0x7fefffff
 8009174:	f014 0310 	ands.w	r3, r4, #16
 8009178:	bf18      	it	ne
 800917a:	236a      	movne	r3, #106	@ 0x6a
 800917c:	4ea9      	ldr	r6, [pc, #676]	@ (8009424 <_strtod_l+0x854>)
 800917e:	9308      	str	r3, [sp, #32]
 8009180:	4650      	mov	r0, sl
 8009182:	4659      	mov	r1, fp
 8009184:	2300      	movs	r3, #0
 8009186:	07e7      	lsls	r7, r4, #31
 8009188:	d504      	bpl.n	8009194 <_strtod_l+0x5c4>
 800918a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800918e:	f7f7 fa43 	bl	8000618 <__aeabi_dmul>
 8009192:	2301      	movs	r3, #1
 8009194:	1064      	asrs	r4, r4, #1
 8009196:	f106 0608 	add.w	r6, r6, #8
 800919a:	d1f4      	bne.n	8009186 <_strtod_l+0x5b6>
 800919c:	b10b      	cbz	r3, 80091a2 <_strtod_l+0x5d2>
 800919e:	4682      	mov	sl, r0
 80091a0:	468b      	mov	fp, r1
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	b1b3      	cbz	r3, 80091d4 <_strtod_l+0x604>
 80091a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	4659      	mov	r1, fp
 80091b2:	dd0f      	ble.n	80091d4 <_strtod_l+0x604>
 80091b4:	2b1f      	cmp	r3, #31
 80091b6:	dd56      	ble.n	8009266 <_strtod_l+0x696>
 80091b8:	2b34      	cmp	r3, #52	@ 0x34
 80091ba:	bfde      	ittt	le
 80091bc:	f04f 33ff 	movle.w	r3, #4294967295
 80091c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091c4:	4093      	lslle	r3, r2
 80091c6:	f04f 0a00 	mov.w	sl, #0
 80091ca:	bfcc      	ite	gt
 80091cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091d0:	ea03 0b01 	andle.w	fp, r3, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	4650      	mov	r0, sl
 80091da:	4659      	mov	r1, fp
 80091dc:	f7f7 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1a7      	bne.n	8009134 <_strtod_l+0x564>
 80091e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80091ea:	9805      	ldr	r0, [sp, #20]
 80091ec:	462b      	mov	r3, r5
 80091ee:	464a      	mov	r2, r9
 80091f0:	f001 fa4a 	bl	800a688 <__s2b>
 80091f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091f6:	2800      	cmp	r0, #0
 80091f8:	f43f af09 	beq.w	800900e <_strtod_l+0x43e>
 80091fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009200:	2a00      	cmp	r2, #0
 8009202:	eba3 0308 	sub.w	r3, r3, r8
 8009206:	bfa8      	it	ge
 8009208:	2300      	movge	r3, #0
 800920a:	9312      	str	r3, [sp, #72]	@ 0x48
 800920c:	2400      	movs	r4, #0
 800920e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009212:	9316      	str	r3, [sp, #88]	@ 0x58
 8009214:	46a0      	mov	r8, r4
 8009216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009218:	9805      	ldr	r0, [sp, #20]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	f001 f98c 	bl	800a538 <_Balloc>
 8009220:	4681      	mov	r9, r0
 8009222:	2800      	cmp	r0, #0
 8009224:	f43f aef7 	beq.w	8009016 <_strtod_l+0x446>
 8009228:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	3202      	adds	r2, #2
 800922e:	f103 010c 	add.w	r1, r3, #12
 8009232:	0092      	lsls	r2, r2, #2
 8009234:	300c      	adds	r0, #12
 8009236:	f000 fd22 	bl	8009c7e <memcpy>
 800923a:	ec4b ab10 	vmov	d0, sl, fp
 800923e:	9805      	ldr	r0, [sp, #20]
 8009240:	aa1c      	add	r2, sp, #112	@ 0x70
 8009242:	a91b      	add	r1, sp, #108	@ 0x6c
 8009244:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009248:	f001 fd52 	bl	800acf0 <__d2b>
 800924c:	901a      	str	r0, [sp, #104]	@ 0x68
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f aee1 	beq.w	8009016 <_strtod_l+0x446>
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	2101      	movs	r1, #1
 8009258:	f001 faac 	bl	800a7b4 <__i2b>
 800925c:	4680      	mov	r8, r0
 800925e:	b948      	cbnz	r0, 8009274 <_strtod_l+0x6a4>
 8009260:	f04f 0800 	mov.w	r8, #0
 8009264:	e6d7      	b.n	8009016 <_strtod_l+0x446>
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	fa02 f303 	lsl.w	r3, r2, r3
 800926e:	ea03 0a0a 	and.w	sl, r3, sl
 8009272:	e7af      	b.n	80091d4 <_strtod_l+0x604>
 8009274:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009276:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009278:	2d00      	cmp	r5, #0
 800927a:	bfab      	itete	ge
 800927c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800927e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009280:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009282:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009284:	bfac      	ite	ge
 8009286:	18ef      	addge	r7, r5, r3
 8009288:	1b5e      	sublt	r6, r3, r5
 800928a:	9b08      	ldr	r3, [sp, #32]
 800928c:	1aed      	subs	r5, r5, r3
 800928e:	4415      	add	r5, r2
 8009290:	4b65      	ldr	r3, [pc, #404]	@ (8009428 <_strtod_l+0x858>)
 8009292:	3d01      	subs	r5, #1
 8009294:	429d      	cmp	r5, r3
 8009296:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800929a:	da50      	bge.n	800933e <_strtod_l+0x76e>
 800929c:	1b5b      	subs	r3, r3, r5
 800929e:	2b1f      	cmp	r3, #31
 80092a0:	eba2 0203 	sub.w	r2, r2, r3
 80092a4:	f04f 0101 	mov.w	r1, #1
 80092a8:	dc3d      	bgt.n	8009326 <_strtod_l+0x756>
 80092aa:	fa01 f303 	lsl.w	r3, r1, r3
 80092ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092b0:	2300      	movs	r3, #0
 80092b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80092b4:	18bd      	adds	r5, r7, r2
 80092b6:	9b08      	ldr	r3, [sp, #32]
 80092b8:	42af      	cmp	r7, r5
 80092ba:	4416      	add	r6, r2
 80092bc:	441e      	add	r6, r3
 80092be:	463b      	mov	r3, r7
 80092c0:	bfa8      	it	ge
 80092c2:	462b      	movge	r3, r5
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	bfa8      	it	ge
 80092c8:	4633      	movge	r3, r6
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfc2      	ittt	gt
 80092ce:	1aed      	subgt	r5, r5, r3
 80092d0:	1af6      	subgt	r6, r6, r3
 80092d2:	1aff      	subgt	r7, r7, r3
 80092d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd16      	ble.n	8009308 <_strtod_l+0x738>
 80092da:	4641      	mov	r1, r8
 80092dc:	9805      	ldr	r0, [sp, #20]
 80092de:	461a      	mov	r2, r3
 80092e0:	f001 fb20 	bl	800a924 <__pow5mult>
 80092e4:	4680      	mov	r8, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0ba      	beq.n	8009260 <_strtod_l+0x690>
 80092ea:	4601      	mov	r1, r0
 80092ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092ee:	9805      	ldr	r0, [sp, #20]
 80092f0:	f001 fa76 	bl	800a7e0 <__multiply>
 80092f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f ae8d 	beq.w	8009016 <_strtod_l+0x446>
 80092fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	f001 f95a 	bl	800a5b8 <_Bfree>
 8009304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009306:	931a      	str	r3, [sp, #104]	@ 0x68
 8009308:	2d00      	cmp	r5, #0
 800930a:	dc1d      	bgt.n	8009348 <_strtod_l+0x778>
 800930c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd23      	ble.n	800935a <_strtod_l+0x78a>
 8009312:	4649      	mov	r1, r9
 8009314:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f001 fb04 	bl	800a924 <__pow5mult>
 800931c:	4681      	mov	r9, r0
 800931e:	b9e0      	cbnz	r0, 800935a <_strtod_l+0x78a>
 8009320:	f04f 0900 	mov.w	r9, #0
 8009324:	e677      	b.n	8009016 <_strtod_l+0x446>
 8009326:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800932a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800932e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009332:	35e2      	adds	r5, #226	@ 0xe2
 8009334:	fa01 f305 	lsl.w	r3, r1, r5
 8009338:	9310      	str	r3, [sp, #64]	@ 0x40
 800933a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800933c:	e7ba      	b.n	80092b4 <_strtod_l+0x6e4>
 800933e:	2300      	movs	r3, #0
 8009340:	9310      	str	r3, [sp, #64]	@ 0x40
 8009342:	2301      	movs	r3, #1
 8009344:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009346:	e7b5      	b.n	80092b4 <_strtod_l+0x6e4>
 8009348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800934a:	9805      	ldr	r0, [sp, #20]
 800934c:	462a      	mov	r2, r5
 800934e:	f001 fb43 	bl	800a9d8 <__lshift>
 8009352:	901a      	str	r0, [sp, #104]	@ 0x68
 8009354:	2800      	cmp	r0, #0
 8009356:	d1d9      	bne.n	800930c <_strtod_l+0x73c>
 8009358:	e65d      	b.n	8009016 <_strtod_l+0x446>
 800935a:	2e00      	cmp	r6, #0
 800935c:	dd07      	ble.n	800936e <_strtod_l+0x79e>
 800935e:	4649      	mov	r1, r9
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	4632      	mov	r2, r6
 8009364:	f001 fb38 	bl	800a9d8 <__lshift>
 8009368:	4681      	mov	r9, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d0d8      	beq.n	8009320 <_strtod_l+0x750>
 800936e:	2f00      	cmp	r7, #0
 8009370:	dd08      	ble.n	8009384 <_strtod_l+0x7b4>
 8009372:	4641      	mov	r1, r8
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	463a      	mov	r2, r7
 8009378:	f001 fb2e 	bl	800a9d8 <__lshift>
 800937c:	4680      	mov	r8, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f ae49 	beq.w	8009016 <_strtod_l+0x446>
 8009384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	464a      	mov	r2, r9
 800938a:	f001 fbad 	bl	800aae8 <__mdiff>
 800938e:	4604      	mov	r4, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f ae40 	beq.w	8009016 <_strtod_l+0x446>
 8009396:	68c3      	ldr	r3, [r0, #12]
 8009398:	930f      	str	r3, [sp, #60]	@ 0x3c
 800939a:	2300      	movs	r3, #0
 800939c:	60c3      	str	r3, [r0, #12]
 800939e:	4641      	mov	r1, r8
 80093a0:	f001 fb86 	bl	800aab0 <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	da45      	bge.n	8009434 <_strtod_l+0x864>
 80093a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093aa:	ea53 030a 	orrs.w	r3, r3, sl
 80093ae:	d16b      	bne.n	8009488 <_strtod_l+0x8b8>
 80093b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d167      	bne.n	8009488 <_strtod_l+0x8b8>
 80093b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093bc:	0d1b      	lsrs	r3, r3, #20
 80093be:	051b      	lsls	r3, r3, #20
 80093c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093c4:	d960      	bls.n	8009488 <_strtod_l+0x8b8>
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	b913      	cbnz	r3, 80093d0 <_strtod_l+0x800>
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dd5b      	ble.n	8009488 <_strtod_l+0x8b8>
 80093d0:	4621      	mov	r1, r4
 80093d2:	2201      	movs	r2, #1
 80093d4:	9805      	ldr	r0, [sp, #20]
 80093d6:	f001 faff 	bl	800a9d8 <__lshift>
 80093da:	4641      	mov	r1, r8
 80093dc:	4604      	mov	r4, r0
 80093de:	f001 fb67 	bl	800aab0 <__mcmp>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	dd50      	ble.n	8009488 <_strtod_l+0x8b8>
 80093e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ea:	9a08      	ldr	r2, [sp, #32]
 80093ec:	0d1b      	lsrs	r3, r3, #20
 80093ee:	051b      	lsls	r3, r3, #20
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d06a      	beq.n	80094ca <_strtod_l+0x8fa>
 80093f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093f8:	d867      	bhi.n	80094ca <_strtod_l+0x8fa>
 80093fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80093fe:	f67f ae9d 	bls.w	800913c <_strtod_l+0x56c>
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <_strtod_l+0x85c>)
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f905 	bl	8000618 <__aeabi_dmul>
 800940e:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <_strtod_l+0x860>)
 8009410:	400b      	ands	r3, r1
 8009412:	4682      	mov	sl, r0
 8009414:	468b      	mov	fp, r1
 8009416:	2b00      	cmp	r3, #0
 8009418:	f47f ae08 	bne.w	800902c <_strtod_l+0x45c>
 800941c:	9a05      	ldr	r2, [sp, #20]
 800941e:	2322      	movs	r3, #34	@ 0x22
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e603      	b.n	800902c <_strtod_l+0x45c>
 8009424:	0800c218 	.word	0x0800c218
 8009428:	fffffc02 	.word	0xfffffc02
 800942c:	39500000 	.word	0x39500000
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009438:	d165      	bne.n	8009506 <_strtod_l+0x936>
 800943a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800943c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009440:	b35a      	cbz	r2, 800949a <_strtod_l+0x8ca>
 8009442:	4a9f      	ldr	r2, [pc, #636]	@ (80096c0 <_strtod_l+0xaf0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d12b      	bne.n	80094a0 <_strtod_l+0x8d0>
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	4651      	mov	r1, sl
 800944c:	b303      	cbz	r3, 8009490 <_strtod_l+0x8c0>
 800944e:	4b9d      	ldr	r3, [pc, #628]	@ (80096c4 <_strtod_l+0xaf4>)
 8009450:	465a      	mov	r2, fp
 8009452:	4013      	ands	r3, r2
 8009454:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	d81b      	bhi.n	8009496 <_strtod_l+0x8c6>
 800945e:	0d1b      	lsrs	r3, r3, #20
 8009460:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	4299      	cmp	r1, r3
 800946a:	d119      	bne.n	80094a0 <_strtod_l+0x8d0>
 800946c:	4b96      	ldr	r3, [pc, #600]	@ (80096c8 <_strtod_l+0xaf8>)
 800946e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009470:	429a      	cmp	r2, r3
 8009472:	d102      	bne.n	800947a <_strtod_l+0x8aa>
 8009474:	3101      	adds	r1, #1
 8009476:	f43f adce 	beq.w	8009016 <_strtod_l+0x446>
 800947a:	4b92      	ldr	r3, [pc, #584]	@ (80096c4 <_strtod_l+0xaf4>)
 800947c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800947e:	401a      	ands	r2, r3
 8009480:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1b9      	bne.n	8009402 <_strtod_l+0x832>
 800948e:	e5cd      	b.n	800902c <_strtod_l+0x45c>
 8009490:	f04f 33ff 	mov.w	r3, #4294967295
 8009494:	e7e8      	b.n	8009468 <_strtod_l+0x898>
 8009496:	4613      	mov	r3, r2
 8009498:	e7e6      	b.n	8009468 <_strtod_l+0x898>
 800949a:	ea53 030a 	orrs.w	r3, r3, sl
 800949e:	d0a2      	beq.n	80093e6 <_strtod_l+0x816>
 80094a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094a2:	b1db      	cbz	r3, 80094dc <_strtod_l+0x90c>
 80094a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094a6:	4213      	tst	r3, r2
 80094a8:	d0ee      	beq.n	8009488 <_strtod_l+0x8b8>
 80094aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ac:	9a08      	ldr	r2, [sp, #32]
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	b1bb      	cbz	r3, 80094e4 <_strtod_l+0x914>
 80094b4:	f7ff fb6e 	bl	8008b94 <sulp>
 80094b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094bc:	ec53 2b10 	vmov	r2, r3, d0
 80094c0:	f7f6 fef4 	bl	80002ac <__adddf3>
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	e7de      	b.n	8009488 <_strtod_l+0x8b8>
 80094ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094d6:	f04f 3aff 	mov.w	sl, #4294967295
 80094da:	e7d5      	b.n	8009488 <_strtod_l+0x8b8>
 80094dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094de:	ea13 0f0a 	tst.w	r3, sl
 80094e2:	e7e1      	b.n	80094a8 <_strtod_l+0x8d8>
 80094e4:	f7ff fb56 	bl	8008b94 <sulp>
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ec:	ec53 2b10 	vmov	r2, r3, d0
 80094f0:	f7f6 feda 	bl	80002a8 <__aeabi_dsub>
 80094f4:	2200      	movs	r2, #0
 80094f6:	2300      	movs	r3, #0
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	f7f7 faf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009500:	2800      	cmp	r0, #0
 8009502:	d0c1      	beq.n	8009488 <_strtod_l+0x8b8>
 8009504:	e61a      	b.n	800913c <_strtod_l+0x56c>
 8009506:	4641      	mov	r1, r8
 8009508:	4620      	mov	r0, r4
 800950a:	f001 fc49 	bl	800ada0 <__ratio>
 800950e:	ec57 6b10 	vmov	r6, r7, d0
 8009512:	2200      	movs	r2, #0
 8009514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f7 faf8 	bl	8000b10 <__aeabi_dcmple>
 8009520:	2800      	cmp	r0, #0
 8009522:	d06f      	beq.n	8009604 <_strtod_l+0xa34>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d17a      	bne.n	8009620 <_strtod_l+0xa50>
 800952a:	f1ba 0f00 	cmp.w	sl, #0
 800952e:	d158      	bne.n	80095e2 <_strtod_l+0xa12>
 8009530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009536:	2b00      	cmp	r3, #0
 8009538:	d15a      	bne.n	80095f0 <_strtod_l+0xa20>
 800953a:	4b64      	ldr	r3, [pc, #400]	@ (80096cc <_strtod_l+0xafc>)
 800953c:	2200      	movs	r2, #0
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f7 fadb 	bl	8000afc <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d159      	bne.n	80095fe <_strtod_l+0xa2e>
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	4b60      	ldr	r3, [pc, #384]	@ (80096d0 <_strtod_l+0xb00>)
 8009550:	2200      	movs	r2, #0
 8009552:	f7f7 f861 	bl	8000618 <__aeabi_dmul>
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800955e:	9606      	str	r6, [sp, #24]
 8009560:	9307      	str	r3, [sp, #28]
 8009562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009566:	4d57      	ldr	r5, [pc, #348]	@ (80096c4 <_strtod_l+0xaf4>)
 8009568:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800956c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956e:	401d      	ands	r5, r3
 8009570:	4b58      	ldr	r3, [pc, #352]	@ (80096d4 <_strtod_l+0xb04>)
 8009572:	429d      	cmp	r5, r3
 8009574:	f040 80b2 	bne.w	80096dc <_strtod_l+0xb0c>
 8009578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800957a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800957e:	ec4b ab10 	vmov	d0, sl, fp
 8009582:	f001 fb45 	bl	800ac10 <__ulp>
 8009586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800958a:	ec51 0b10 	vmov	r0, r1, d0
 800958e:	f7f7 f843 	bl	8000618 <__aeabi_dmul>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f6 fe89 	bl	80002ac <__adddf3>
 800959a:	460b      	mov	r3, r1
 800959c:	4949      	ldr	r1, [pc, #292]	@ (80096c4 <_strtod_l+0xaf4>)
 800959e:	4a4e      	ldr	r2, [pc, #312]	@ (80096d8 <_strtod_l+0xb08>)
 80095a0:	4019      	ands	r1, r3
 80095a2:	4291      	cmp	r1, r2
 80095a4:	4682      	mov	sl, r0
 80095a6:	d942      	bls.n	800962e <_strtod_l+0xa5e>
 80095a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095aa:	4b47      	ldr	r3, [pc, #284]	@ (80096c8 <_strtod_l+0xaf8>)
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d103      	bne.n	80095b8 <_strtod_l+0x9e8>
 80095b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095b2:	3301      	adds	r3, #1
 80095b4:	f43f ad2f 	beq.w	8009016 <_strtod_l+0x446>
 80095b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096c8 <_strtod_l+0xaf8>
 80095bc:	f04f 3aff 	mov.w	sl, #4294967295
 80095c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095c2:	9805      	ldr	r0, [sp, #20]
 80095c4:	f000 fff8 	bl	800a5b8 <_Bfree>
 80095c8:	9805      	ldr	r0, [sp, #20]
 80095ca:	4649      	mov	r1, r9
 80095cc:	f000 fff4 	bl	800a5b8 <_Bfree>
 80095d0:	9805      	ldr	r0, [sp, #20]
 80095d2:	4641      	mov	r1, r8
 80095d4:	f000 fff0 	bl	800a5b8 <_Bfree>
 80095d8:	9805      	ldr	r0, [sp, #20]
 80095da:	4621      	mov	r1, r4
 80095dc:	f000 ffec 	bl	800a5b8 <_Bfree>
 80095e0:	e619      	b.n	8009216 <_strtod_l+0x646>
 80095e2:	f1ba 0f01 	cmp.w	sl, #1
 80095e6:	d103      	bne.n	80095f0 <_strtod_l+0xa20>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f43f ada6 	beq.w	800913c <_strtod_l+0x56c>
 80095f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096a0 <_strtod_l+0xad0>
 80095f4:	4f35      	ldr	r7, [pc, #212]	@ (80096cc <_strtod_l+0xafc>)
 80095f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095fa:	2600      	movs	r6, #0
 80095fc:	e7b1      	b.n	8009562 <_strtod_l+0x992>
 80095fe:	4f34      	ldr	r7, [pc, #208]	@ (80096d0 <_strtod_l+0xb00>)
 8009600:	2600      	movs	r6, #0
 8009602:	e7aa      	b.n	800955a <_strtod_l+0x98a>
 8009604:	4b32      	ldr	r3, [pc, #200]	@ (80096d0 <_strtod_l+0xb00>)
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	2200      	movs	r2, #0
 800960c:	f7f7 f804 	bl	8000618 <__aeabi_dmul>
 8009610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d09f      	beq.n	800955a <_strtod_l+0x98a>
 800961a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800961e:	e7a0      	b.n	8009562 <_strtod_l+0x992>
 8009620:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096a8 <_strtod_l+0xad8>
 8009624:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009628:	ec57 6b17 	vmov	r6, r7, d7
 800962c:	e799      	b.n	8009562 <_strtod_l+0x992>
 800962e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1c1      	bne.n	80095c0 <_strtod_l+0x9f0>
 800963c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009640:	0d1b      	lsrs	r3, r3, #20
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	429d      	cmp	r5, r3
 8009646:	d1bb      	bne.n	80095c0 <_strtod_l+0x9f0>
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fb44 	bl	8000cd8 <__aeabi_d2lz>
 8009650:	f7f6 ffb4 	bl	80005bc <__aeabi_l2d>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f6 fe24 	bl	80002a8 <__aeabi_dsub>
 8009660:	460b      	mov	r3, r1
 8009662:	4602      	mov	r2, r0
 8009664:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009668:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	ea46 060a 	orr.w	r6, r6, sl
 8009672:	431e      	orrs	r6, r3
 8009674:	d06f      	beq.n	8009756 <_strtod_l+0xb86>
 8009676:	a30e      	add	r3, pc, #56	@ (adr r3, 80096b0 <_strtod_l+0xae0>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f7 fa3e 	bl	8000afc <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	f47f acd3 	bne.w	800902c <_strtod_l+0x45c>
 8009686:	a30c      	add	r3, pc, #48	@ (adr r3, 80096b8 <_strtod_l+0xae8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009690:	f7f7 fa52 	bl	8000b38 <__aeabi_dcmpgt>
 8009694:	2800      	cmp	r0, #0
 8009696:	d093      	beq.n	80095c0 <_strtod_l+0x9f0>
 8009698:	e4c8      	b.n	800902c <_strtod_l+0x45c>
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	00000000 	.word	0x00000000
 80096a4:	bff00000 	.word	0xbff00000
 80096a8:	00000000 	.word	0x00000000
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	94a03595 	.word	0x94a03595
 80096b4:	3fdfffff 	.word	0x3fdfffff
 80096b8:	35afe535 	.word	0x35afe535
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	000fffff 	.word	0x000fffff
 80096c4:	7ff00000 	.word	0x7ff00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	7fe00000 	.word	0x7fe00000
 80096d8:	7c9fffff 	.word	0x7c9fffff
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	b323      	cbz	r3, 800972a <_strtod_l+0xb5a>
 80096e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096e4:	d821      	bhi.n	800972a <_strtod_l+0xb5a>
 80096e6:	a328      	add	r3, pc, #160	@ (adr r3, 8009788 <_strtod_l+0xbb8>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f7 fa0e 	bl	8000b10 <__aeabi_dcmple>
 80096f4:	b1a0      	cbz	r0, 8009720 <_strtod_l+0xb50>
 80096f6:	4639      	mov	r1, r7
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7f7 fa65 	bl	8000bc8 <__aeabi_d2uiz>
 80096fe:	2801      	cmp	r0, #1
 8009700:	bf38      	it	cc
 8009702:	2001      	movcc	r0, #1
 8009704:	f7f6 ff0e 	bl	8000524 <__aeabi_ui2d>
 8009708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800970a:	4606      	mov	r6, r0
 800970c:	460f      	mov	r7, r1
 800970e:	b9fb      	cbnz	r3, 8009750 <_strtod_l+0xb80>
 8009710:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009714:	9014      	str	r0, [sp, #80]	@ 0x50
 8009716:	9315      	str	r3, [sp, #84]	@ 0x54
 8009718:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800971c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009720:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009722:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009726:	1b5b      	subs	r3, r3, r5
 8009728:	9311      	str	r3, [sp, #68]	@ 0x44
 800972a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800972e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009732:	f001 fa6d 	bl	800ac10 <__ulp>
 8009736:	4650      	mov	r0, sl
 8009738:	ec53 2b10 	vmov	r2, r3, d0
 800973c:	4659      	mov	r1, fp
 800973e:	f7f6 ff6b 	bl	8000618 <__aeabi_dmul>
 8009742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009746:	f7f6 fdb1 	bl	80002ac <__adddf3>
 800974a:	4682      	mov	sl, r0
 800974c:	468b      	mov	fp, r1
 800974e:	e770      	b.n	8009632 <_strtod_l+0xa62>
 8009750:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009754:	e7e0      	b.n	8009718 <_strtod_l+0xb48>
 8009756:	a30e      	add	r3, pc, #56	@ (adr r3, 8009790 <_strtod_l+0xbc0>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f7 f9ce 	bl	8000afc <__aeabi_dcmplt>
 8009760:	e798      	b.n	8009694 <_strtod_l+0xac4>
 8009762:	2300      	movs	r3, #0
 8009764:	930e      	str	r3, [sp, #56]	@ 0x38
 8009766:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	f7ff ba6d 	b.w	8008c4a <_strtod_l+0x7a>
 8009770:	2a65      	cmp	r2, #101	@ 0x65
 8009772:	f43f ab68 	beq.w	8008e46 <_strtod_l+0x276>
 8009776:	2a45      	cmp	r2, #69	@ 0x45
 8009778:	f43f ab65 	beq.w	8008e46 <_strtod_l+0x276>
 800977c:	2301      	movs	r3, #1
 800977e:	f7ff bba0 	b.w	8008ec2 <_strtod_l+0x2f2>
 8009782:	bf00      	nop
 8009784:	f3af 8000 	nop.w
 8009788:	ffc00000 	.word	0xffc00000
 800978c:	41dfffff 	.word	0x41dfffff
 8009790:	94a03595 	.word	0x94a03595
 8009794:	3fcfffff 	.word	0x3fcfffff

08009798 <strtod>:
 8009798:	460a      	mov	r2, r1
 800979a:	4601      	mov	r1, r0
 800979c:	4802      	ldr	r0, [pc, #8]	@ (80097a8 <strtod+0x10>)
 800979e:	4b03      	ldr	r3, [pc, #12]	@ (80097ac <strtod+0x14>)
 80097a0:	6800      	ldr	r0, [r0, #0]
 80097a2:	f7ff ba15 	b.w	8008bd0 <_strtod_l>
 80097a6:	bf00      	nop
 80097a8:	200001a4 	.word	0x200001a4
 80097ac:	20000038 	.word	0x20000038

080097b0 <_strtol_l.isra.0>:
 80097b0:	2b24      	cmp	r3, #36	@ 0x24
 80097b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b6:	4686      	mov	lr, r0
 80097b8:	4690      	mov	r8, r2
 80097ba:	d801      	bhi.n	80097c0 <_strtol_l.isra.0+0x10>
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d106      	bne.n	80097ce <_strtol_l.isra.0+0x1e>
 80097c0:	f000 fa30 	bl	8009c24 <__errno>
 80097c4:	2316      	movs	r3, #22
 80097c6:	6003      	str	r3, [r0, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ce:	4834      	ldr	r0, [pc, #208]	@ (80098a0 <_strtol_l.isra.0+0xf0>)
 80097d0:	460d      	mov	r5, r1
 80097d2:	462a      	mov	r2, r5
 80097d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097d8:	5d06      	ldrb	r6, [r0, r4]
 80097da:	f016 0608 	ands.w	r6, r6, #8
 80097de:	d1f8      	bne.n	80097d2 <_strtol_l.isra.0+0x22>
 80097e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80097e2:	d110      	bne.n	8009806 <_strtol_l.isra.0+0x56>
 80097e4:	782c      	ldrb	r4, [r5, #0]
 80097e6:	2601      	movs	r6, #1
 80097e8:	1c95      	adds	r5, r2, #2
 80097ea:	f033 0210 	bics.w	r2, r3, #16
 80097ee:	d115      	bne.n	800981c <_strtol_l.isra.0+0x6c>
 80097f0:	2c30      	cmp	r4, #48	@ 0x30
 80097f2:	d10d      	bne.n	8009810 <_strtol_l.isra.0+0x60>
 80097f4:	782a      	ldrb	r2, [r5, #0]
 80097f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097fa:	2a58      	cmp	r2, #88	@ 0x58
 80097fc:	d108      	bne.n	8009810 <_strtol_l.isra.0+0x60>
 80097fe:	786c      	ldrb	r4, [r5, #1]
 8009800:	3502      	adds	r5, #2
 8009802:	2310      	movs	r3, #16
 8009804:	e00a      	b.n	800981c <_strtol_l.isra.0+0x6c>
 8009806:	2c2b      	cmp	r4, #43	@ 0x2b
 8009808:	bf04      	itt	eq
 800980a:	782c      	ldrbeq	r4, [r5, #0]
 800980c:	1c95      	addeq	r5, r2, #2
 800980e:	e7ec      	b.n	80097ea <_strtol_l.isra.0+0x3a>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1f6      	bne.n	8009802 <_strtol_l.isra.0+0x52>
 8009814:	2c30      	cmp	r4, #48	@ 0x30
 8009816:	bf14      	ite	ne
 8009818:	230a      	movne	r3, #10
 800981a:	2308      	moveq	r3, #8
 800981c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009820:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009824:	2200      	movs	r2, #0
 8009826:	fbbc f9f3 	udiv	r9, ip, r3
 800982a:	4610      	mov	r0, r2
 800982c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009830:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009834:	2f09      	cmp	r7, #9
 8009836:	d80f      	bhi.n	8009858 <_strtol_l.isra.0+0xa8>
 8009838:	463c      	mov	r4, r7
 800983a:	42a3      	cmp	r3, r4
 800983c:	dd1b      	ble.n	8009876 <_strtol_l.isra.0+0xc6>
 800983e:	1c57      	adds	r7, r2, #1
 8009840:	d007      	beq.n	8009852 <_strtol_l.isra.0+0xa2>
 8009842:	4581      	cmp	r9, r0
 8009844:	d314      	bcc.n	8009870 <_strtol_l.isra.0+0xc0>
 8009846:	d101      	bne.n	800984c <_strtol_l.isra.0+0x9c>
 8009848:	45a2      	cmp	sl, r4
 800984a:	db11      	blt.n	8009870 <_strtol_l.isra.0+0xc0>
 800984c:	fb00 4003 	mla	r0, r0, r3, r4
 8009850:	2201      	movs	r2, #1
 8009852:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009856:	e7eb      	b.n	8009830 <_strtol_l.isra.0+0x80>
 8009858:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800985c:	2f19      	cmp	r7, #25
 800985e:	d801      	bhi.n	8009864 <_strtol_l.isra.0+0xb4>
 8009860:	3c37      	subs	r4, #55	@ 0x37
 8009862:	e7ea      	b.n	800983a <_strtol_l.isra.0+0x8a>
 8009864:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009868:	2f19      	cmp	r7, #25
 800986a:	d804      	bhi.n	8009876 <_strtol_l.isra.0+0xc6>
 800986c:	3c57      	subs	r4, #87	@ 0x57
 800986e:	e7e4      	b.n	800983a <_strtol_l.isra.0+0x8a>
 8009870:	f04f 32ff 	mov.w	r2, #4294967295
 8009874:	e7ed      	b.n	8009852 <_strtol_l.isra.0+0xa2>
 8009876:	1c53      	adds	r3, r2, #1
 8009878:	d108      	bne.n	800988c <_strtol_l.isra.0+0xdc>
 800987a:	2322      	movs	r3, #34	@ 0x22
 800987c:	f8ce 3000 	str.w	r3, [lr]
 8009880:	4660      	mov	r0, ip
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	d0a0      	beq.n	80097ca <_strtol_l.isra.0+0x1a>
 8009888:	1e69      	subs	r1, r5, #1
 800988a:	e006      	b.n	800989a <_strtol_l.isra.0+0xea>
 800988c:	b106      	cbz	r6, 8009890 <_strtol_l.isra.0+0xe0>
 800988e:	4240      	negs	r0, r0
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	d099      	beq.n	80097ca <_strtol_l.isra.0+0x1a>
 8009896:	2a00      	cmp	r2, #0
 8009898:	d1f6      	bne.n	8009888 <_strtol_l.isra.0+0xd8>
 800989a:	f8c8 1000 	str.w	r1, [r8]
 800989e:	e794      	b.n	80097ca <_strtol_l.isra.0+0x1a>
 80098a0:	0800c241 	.word	0x0800c241

080098a4 <strtol>:
 80098a4:	4613      	mov	r3, r2
 80098a6:	460a      	mov	r2, r1
 80098a8:	4601      	mov	r1, r0
 80098aa:	4802      	ldr	r0, [pc, #8]	@ (80098b4 <strtol+0x10>)
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f7ff bf7f 	b.w	80097b0 <_strtol_l.isra.0>
 80098b2:	bf00      	nop
 80098b4:	200001a4 	.word	0x200001a4

080098b8 <std>:
 80098b8:	2300      	movs	r3, #0
 80098ba:	b510      	push	{r4, lr}
 80098bc:	4604      	mov	r4, r0
 80098be:	e9c0 3300 	strd	r3, r3, [r0]
 80098c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098c6:	6083      	str	r3, [r0, #8]
 80098c8:	8181      	strh	r1, [r0, #12]
 80098ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80098cc:	81c2      	strh	r2, [r0, #14]
 80098ce:	6183      	str	r3, [r0, #24]
 80098d0:	4619      	mov	r1, r3
 80098d2:	2208      	movs	r2, #8
 80098d4:	305c      	adds	r0, #92	@ 0x5c
 80098d6:	f000 f931 	bl	8009b3c <memset>
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <std+0x58>)
 80098dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80098de:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <std+0x5c>)
 80098e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009918 <std+0x60>)
 80098e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098e6:	4b0d      	ldr	r3, [pc, #52]	@ (800991c <std+0x64>)
 80098e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80098ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <std+0x68>)
 80098ec:	6224      	str	r4, [r4, #32]
 80098ee:	429c      	cmp	r4, r3
 80098f0:	d006      	beq.n	8009900 <std+0x48>
 80098f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80098f6:	4294      	cmp	r4, r2
 80098f8:	d002      	beq.n	8009900 <std+0x48>
 80098fa:	33d0      	adds	r3, #208	@ 0xd0
 80098fc:	429c      	cmp	r4, r3
 80098fe:	d105      	bne.n	800990c <std+0x54>
 8009900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009908:	f000 b9b6 	b.w	8009c78 <__retarget_lock_init_recursive>
 800990c:	bd10      	pop	{r4, pc}
 800990e:	bf00      	nop
 8009910:	08009a3d 	.word	0x08009a3d
 8009914:	08009a5f 	.word	0x08009a5f
 8009918:	08009a97 	.word	0x08009a97
 800991c:	08009abb 	.word	0x08009abb
 8009920:	20000590 	.word	0x20000590

08009924 <stdio_exit_handler>:
 8009924:	4a02      	ldr	r2, [pc, #8]	@ (8009930 <stdio_exit_handler+0xc>)
 8009926:	4903      	ldr	r1, [pc, #12]	@ (8009934 <stdio_exit_handler+0x10>)
 8009928:	4803      	ldr	r0, [pc, #12]	@ (8009938 <stdio_exit_handler+0x14>)
 800992a:	f000 b869 	b.w	8009a00 <_fwalk_sglue>
 800992e:	bf00      	nop
 8009930:	2000002c 	.word	0x2000002c
 8009934:	0800b575 	.word	0x0800b575
 8009938:	200001a8 	.word	0x200001a8

0800993c <cleanup_stdio>:
 800993c:	6841      	ldr	r1, [r0, #4]
 800993e:	4b0c      	ldr	r3, [pc, #48]	@ (8009970 <cleanup_stdio+0x34>)
 8009940:	4299      	cmp	r1, r3
 8009942:	b510      	push	{r4, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	d001      	beq.n	800994c <cleanup_stdio+0x10>
 8009948:	f001 fe14 	bl	800b574 <_fflush_r>
 800994c:	68a1      	ldr	r1, [r4, #8]
 800994e:	4b09      	ldr	r3, [pc, #36]	@ (8009974 <cleanup_stdio+0x38>)
 8009950:	4299      	cmp	r1, r3
 8009952:	d002      	beq.n	800995a <cleanup_stdio+0x1e>
 8009954:	4620      	mov	r0, r4
 8009956:	f001 fe0d 	bl	800b574 <_fflush_r>
 800995a:	68e1      	ldr	r1, [r4, #12]
 800995c:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <cleanup_stdio+0x3c>)
 800995e:	4299      	cmp	r1, r3
 8009960:	d004      	beq.n	800996c <cleanup_stdio+0x30>
 8009962:	4620      	mov	r0, r4
 8009964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009968:	f001 be04 	b.w	800b574 <_fflush_r>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	bf00      	nop
 8009970:	20000590 	.word	0x20000590
 8009974:	200005f8 	.word	0x200005f8
 8009978:	20000660 	.word	0x20000660

0800997c <global_stdio_init.part.0>:
 800997c:	b510      	push	{r4, lr}
 800997e:	4b0b      	ldr	r3, [pc, #44]	@ (80099ac <global_stdio_init.part.0+0x30>)
 8009980:	4c0b      	ldr	r4, [pc, #44]	@ (80099b0 <global_stdio_init.part.0+0x34>)
 8009982:	4a0c      	ldr	r2, [pc, #48]	@ (80099b4 <global_stdio_init.part.0+0x38>)
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	4620      	mov	r0, r4
 8009988:	2200      	movs	r2, #0
 800998a:	2104      	movs	r1, #4
 800998c:	f7ff ff94 	bl	80098b8 <std>
 8009990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009994:	2201      	movs	r2, #1
 8009996:	2109      	movs	r1, #9
 8009998:	f7ff ff8e 	bl	80098b8 <std>
 800999c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099a0:	2202      	movs	r2, #2
 80099a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a6:	2112      	movs	r1, #18
 80099a8:	f7ff bf86 	b.w	80098b8 <std>
 80099ac:	200006c8 	.word	0x200006c8
 80099b0:	20000590 	.word	0x20000590
 80099b4:	08009925 	.word	0x08009925

080099b8 <__sfp_lock_acquire>:
 80099b8:	4801      	ldr	r0, [pc, #4]	@ (80099c0 <__sfp_lock_acquire+0x8>)
 80099ba:	f000 b95e 	b.w	8009c7a <__retarget_lock_acquire_recursive>
 80099be:	bf00      	nop
 80099c0:	200006d1 	.word	0x200006d1

080099c4 <__sfp_lock_release>:
 80099c4:	4801      	ldr	r0, [pc, #4]	@ (80099cc <__sfp_lock_release+0x8>)
 80099c6:	f000 b959 	b.w	8009c7c <__retarget_lock_release_recursive>
 80099ca:	bf00      	nop
 80099cc:	200006d1 	.word	0x200006d1

080099d0 <__sinit>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	4604      	mov	r4, r0
 80099d4:	f7ff fff0 	bl	80099b8 <__sfp_lock_acquire>
 80099d8:	6a23      	ldr	r3, [r4, #32]
 80099da:	b11b      	cbz	r3, 80099e4 <__sinit+0x14>
 80099dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e0:	f7ff bff0 	b.w	80099c4 <__sfp_lock_release>
 80099e4:	4b04      	ldr	r3, [pc, #16]	@ (80099f8 <__sinit+0x28>)
 80099e6:	6223      	str	r3, [r4, #32]
 80099e8:	4b04      	ldr	r3, [pc, #16]	@ (80099fc <__sinit+0x2c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1f5      	bne.n	80099dc <__sinit+0xc>
 80099f0:	f7ff ffc4 	bl	800997c <global_stdio_init.part.0>
 80099f4:	e7f2      	b.n	80099dc <__sinit+0xc>
 80099f6:	bf00      	nop
 80099f8:	0800993d 	.word	0x0800993d
 80099fc:	200006c8 	.word	0x200006c8

08009a00 <_fwalk_sglue>:
 8009a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	4607      	mov	r7, r0
 8009a06:	4688      	mov	r8, r1
 8009a08:	4614      	mov	r4, r2
 8009a0a:	2600      	movs	r6, #0
 8009a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a10:	f1b9 0901 	subs.w	r9, r9, #1
 8009a14:	d505      	bpl.n	8009a22 <_fwalk_sglue+0x22>
 8009a16:	6824      	ldr	r4, [r4, #0]
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	d1f7      	bne.n	8009a0c <_fwalk_sglue+0xc>
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d907      	bls.n	8009a38 <_fwalk_sglue+0x38>
 8009a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	d003      	beq.n	8009a38 <_fwalk_sglue+0x38>
 8009a30:	4629      	mov	r1, r5
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	4306      	orrs	r6, r0
 8009a38:	3568      	adds	r5, #104	@ 0x68
 8009a3a:	e7e9      	b.n	8009a10 <_fwalk_sglue+0x10>

08009a3c <__sread>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	460c      	mov	r4, r1
 8009a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a44:	f000 f8ca 	bl	8009bdc <_read_r>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	bfab      	itete	ge
 8009a4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a50:	181b      	addge	r3, r3, r0
 8009a52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a56:	bfac      	ite	ge
 8009a58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a5a:	81a3      	strhlt	r3, [r4, #12]
 8009a5c:	bd10      	pop	{r4, pc}

08009a5e <__swrite>:
 8009a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	461f      	mov	r7, r3
 8009a64:	898b      	ldrh	r3, [r1, #12]
 8009a66:	05db      	lsls	r3, r3, #23
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	d505      	bpl.n	8009a7c <__swrite+0x1e>
 8009a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a74:	2302      	movs	r3, #2
 8009a76:	2200      	movs	r2, #0
 8009a78:	f000 f89e 	bl	8009bb8 <_lseek_r>
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a86:	81a3      	strh	r3, [r4, #12]
 8009a88:	4632      	mov	r2, r6
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	f000 b8b5 	b.w	8009c00 <_write_r>

08009a96 <__sseek>:
 8009a96:	b510      	push	{r4, lr}
 8009a98:	460c      	mov	r4, r1
 8009a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9e:	f000 f88b 	bl	8009bb8 <_lseek_r>
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	bf15      	itete	ne
 8009aa8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009aaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009aae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ab2:	81a3      	strheq	r3, [r4, #12]
 8009ab4:	bf18      	it	ne
 8009ab6:	81a3      	strhne	r3, [r4, #12]
 8009ab8:	bd10      	pop	{r4, pc}

08009aba <__sclose>:
 8009aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009abe:	f000 b86b 	b.w	8009b98 <_close_r>

08009ac2 <_vsniprintf_r>:
 8009ac2:	b530      	push	{r4, r5, lr}
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	2c00      	cmp	r4, #0
 8009ac8:	b09b      	sub	sp, #108	@ 0x6c
 8009aca:	4605      	mov	r5, r0
 8009acc:	461a      	mov	r2, r3
 8009ace:	da05      	bge.n	8009adc <_vsniprintf_r+0x1a>
 8009ad0:	238b      	movs	r3, #139	@ 0x8b
 8009ad2:	6003      	str	r3, [r0, #0]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	b01b      	add	sp, #108	@ 0x6c
 8009ada:	bd30      	pop	{r4, r5, pc}
 8009adc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ae4:	f04f 0300 	mov.w	r3, #0
 8009ae8:	9319      	str	r3, [sp, #100]	@ 0x64
 8009aea:	bf14      	ite	ne
 8009aec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009af0:	4623      	moveq	r3, r4
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009afa:	9100      	str	r1, [sp, #0]
 8009afc:	9104      	str	r1, [sp, #16]
 8009afe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009b02:	4669      	mov	r1, sp
 8009b04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009b06:	f001 fa29 	bl	800af5c <_svfiprintf_r>
 8009b0a:	1c43      	adds	r3, r0, #1
 8009b0c:	bfbc      	itt	lt
 8009b0e:	238b      	movlt	r3, #139	@ 0x8b
 8009b10:	602b      	strlt	r3, [r5, #0]
 8009b12:	2c00      	cmp	r4, #0
 8009b14:	d0e0      	beq.n	8009ad8 <_vsniprintf_r+0x16>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	e7dc      	b.n	8009ad8 <_vsniprintf_r+0x16>
	...

08009b20 <vsniprintf>:
 8009b20:	b507      	push	{r0, r1, r2, lr}
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4613      	mov	r3, r2
 8009b26:	460a      	mov	r2, r1
 8009b28:	4601      	mov	r1, r0
 8009b2a:	4803      	ldr	r0, [pc, #12]	@ (8009b38 <vsniprintf+0x18>)
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	f7ff ffc8 	bl	8009ac2 <_vsniprintf_r>
 8009b32:	b003      	add	sp, #12
 8009b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b38:	200001a4 	.word	0x200001a4

08009b3c <memset>:
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d100      	bne.n	8009b46 <memset+0xa>
 8009b44:	4770      	bx	lr
 8009b46:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4a:	e7f9      	b.n	8009b40 <memset+0x4>

08009b4c <strncmp>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	b16a      	cbz	r2, 8009b6c <strncmp+0x20>
 8009b50:	3901      	subs	r1, #1
 8009b52:	1884      	adds	r4, r0, r2
 8009b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d103      	bne.n	8009b68 <strncmp+0x1c>
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d001      	beq.n	8009b68 <strncmp+0x1c>
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	d1f5      	bne.n	8009b54 <strncmp+0x8>
 8009b68:	1ad0      	subs	r0, r2, r3
 8009b6a:	bd10      	pop	{r4, pc}
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	e7fc      	b.n	8009b6a <strncmp+0x1e>

08009b70 <strncpy>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	3901      	subs	r1, #1
 8009b74:	4603      	mov	r3, r0
 8009b76:	b132      	cbz	r2, 8009b86 <strncpy+0x16>
 8009b78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009b7c:	f803 4b01 	strb.w	r4, [r3], #1
 8009b80:	3a01      	subs	r2, #1
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	d1f7      	bne.n	8009b76 <strncpy+0x6>
 8009b86:	441a      	add	r2, r3
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d100      	bne.n	8009b90 <strncpy+0x20>
 8009b8e:	bd10      	pop	{r4, pc}
 8009b90:	f803 1b01 	strb.w	r1, [r3], #1
 8009b94:	e7f9      	b.n	8009b8a <strncpy+0x1a>
	...

08009b98 <_close_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d06      	ldr	r5, [pc, #24]	@ (8009bb4 <_close_r+0x1c>)
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f8 fae4 	bl	8002170 <_close>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_close_r+0x1a>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_close_r+0x1a>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	200006cc 	.word	0x200006cc

08009bb8 <_lseek_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d07      	ldr	r5, [pc, #28]	@ (8009bd8 <_lseek_r+0x20>)
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	4608      	mov	r0, r1
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	602a      	str	r2, [r5, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f7f8 faf9 	bl	80021be <_lseek>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d102      	bne.n	8009bd6 <_lseek_r+0x1e>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	b103      	cbz	r3, 8009bd6 <_lseek_r+0x1e>
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	200006cc 	.word	0x200006cc

08009bdc <_read_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	4d07      	ldr	r5, [pc, #28]	@ (8009bfc <_read_r+0x20>)
 8009be0:	4604      	mov	r4, r0
 8009be2:	4608      	mov	r0, r1
 8009be4:	4611      	mov	r1, r2
 8009be6:	2200      	movs	r2, #0
 8009be8:	602a      	str	r2, [r5, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f7f8 fa87 	bl	80020fe <_read>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_read_r+0x1e>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_read_r+0x1e>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	200006cc 	.word	0x200006cc

08009c00 <_write_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	@ (8009c20 <_write_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f8 fa92 	bl	8002138 <_write>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_write_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_write_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	200006cc 	.word	0x200006cc

08009c24 <__errno>:
 8009c24:	4b01      	ldr	r3, [pc, #4]	@ (8009c2c <__errno+0x8>)
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	200001a4 	.word	0x200001a4

08009c30 <__libc_init_array>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	4d0d      	ldr	r5, [pc, #52]	@ (8009c68 <__libc_init_array+0x38>)
 8009c34:	4c0d      	ldr	r4, [pc, #52]	@ (8009c6c <__libc_init_array+0x3c>)
 8009c36:	1b64      	subs	r4, r4, r5
 8009c38:	10a4      	asrs	r4, r4, #2
 8009c3a:	2600      	movs	r6, #0
 8009c3c:	42a6      	cmp	r6, r4
 8009c3e:	d109      	bne.n	8009c54 <__libc_init_array+0x24>
 8009c40:	4d0b      	ldr	r5, [pc, #44]	@ (8009c70 <__libc_init_array+0x40>)
 8009c42:	4c0c      	ldr	r4, [pc, #48]	@ (8009c74 <__libc_init_array+0x44>)
 8009c44:	f002 f910 	bl	800be68 <_init>
 8009c48:	1b64      	subs	r4, r4, r5
 8009c4a:	10a4      	asrs	r4, r4, #2
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	42a6      	cmp	r6, r4
 8009c50:	d105      	bne.n	8009c5e <__libc_init_array+0x2e>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c58:	4798      	blx	r3
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	e7ee      	b.n	8009c3c <__libc_init_array+0xc>
 8009c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c62:	4798      	blx	r3
 8009c64:	3601      	adds	r6, #1
 8009c66:	e7f2      	b.n	8009c4e <__libc_init_array+0x1e>
 8009c68:	0800c458 	.word	0x0800c458
 8009c6c:	0800c458 	.word	0x0800c458
 8009c70:	0800c458 	.word	0x0800c458
 8009c74:	0800c45c 	.word	0x0800c45c

08009c78 <__retarget_lock_init_recursive>:
 8009c78:	4770      	bx	lr

08009c7a <__retarget_lock_acquire_recursive>:
 8009c7a:	4770      	bx	lr

08009c7c <__retarget_lock_release_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <memcpy>:
 8009c7e:	440a      	add	r2, r1
 8009c80:	4291      	cmp	r1, r2
 8009c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c86:	d100      	bne.n	8009c8a <memcpy+0xc>
 8009c88:	4770      	bx	lr
 8009c8a:	b510      	push	{r4, lr}
 8009c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c94:	4291      	cmp	r1, r2
 8009c96:	d1f9      	bne.n	8009c8c <memcpy+0xe>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	0000      	movs	r0, r0
 8009c9c:	0000      	movs	r0, r0
	...

08009ca0 <nan>:
 8009ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ca8 <nan+0x8>
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	00000000 	.word	0x00000000
 8009cac:	7ff80000 	.word	0x7ff80000

08009cb0 <_free_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	d041      	beq.n	8009d3c <_free_r+0x8c>
 8009cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cbc:	1f0c      	subs	r4, r1, #4
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bfb8      	it	lt
 8009cc2:	18e4      	addlt	r4, r4, r3
 8009cc4:	f000 fc2c 	bl	800a520 <__malloc_lock>
 8009cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d40 <_free_r+0x90>)
 8009cca:	6813      	ldr	r3, [r2, #0]
 8009ccc:	b933      	cbnz	r3, 8009cdc <_free_r+0x2c>
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	6014      	str	r4, [r2, #0]
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cd8:	f000 bc28 	b.w	800a52c <__malloc_unlock>
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	d908      	bls.n	8009cf2 <_free_r+0x42>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	1821      	adds	r1, r4, r0
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	bf01      	itttt	eq
 8009ce8:	6819      	ldreq	r1, [r3, #0]
 8009cea:	685b      	ldreq	r3, [r3, #4]
 8009cec:	1809      	addeq	r1, r1, r0
 8009cee:	6021      	streq	r1, [r4, #0]
 8009cf0:	e7ed      	b.n	8009cce <_free_r+0x1e>
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	b10b      	cbz	r3, 8009cfc <_free_r+0x4c>
 8009cf8:	42a3      	cmp	r3, r4
 8009cfa:	d9fa      	bls.n	8009cf2 <_free_r+0x42>
 8009cfc:	6811      	ldr	r1, [r2, #0]
 8009cfe:	1850      	adds	r0, r2, r1
 8009d00:	42a0      	cmp	r0, r4
 8009d02:	d10b      	bne.n	8009d1c <_free_r+0x6c>
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	4401      	add	r1, r0
 8009d08:	1850      	adds	r0, r2, r1
 8009d0a:	4283      	cmp	r3, r0
 8009d0c:	6011      	str	r1, [r2, #0]
 8009d0e:	d1e0      	bne.n	8009cd2 <_free_r+0x22>
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	6053      	str	r3, [r2, #4]
 8009d16:	4408      	add	r0, r1
 8009d18:	6010      	str	r0, [r2, #0]
 8009d1a:	e7da      	b.n	8009cd2 <_free_r+0x22>
 8009d1c:	d902      	bls.n	8009d24 <_free_r+0x74>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	e7d6      	b.n	8009cd2 <_free_r+0x22>
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	1821      	adds	r1, r4, r0
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	bf04      	itt	eq
 8009d2c:	6819      	ldreq	r1, [r3, #0]
 8009d2e:	685b      	ldreq	r3, [r3, #4]
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	bf04      	itt	eq
 8009d34:	1809      	addeq	r1, r1, r0
 8009d36:	6021      	streq	r1, [r4, #0]
 8009d38:	6054      	str	r4, [r2, #4]
 8009d3a:	e7ca      	b.n	8009cd2 <_free_r+0x22>
 8009d3c:	bd38      	pop	{r3, r4, r5, pc}
 8009d3e:	bf00      	nop
 8009d40:	200006d8 	.word	0x200006d8

08009d44 <rshift>:
 8009d44:	6903      	ldr	r3, [r0, #16]
 8009d46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d52:	f100 0414 	add.w	r4, r0, #20
 8009d56:	dd45      	ble.n	8009de4 <rshift+0xa0>
 8009d58:	f011 011f 	ands.w	r1, r1, #31
 8009d5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d64:	d10c      	bne.n	8009d80 <rshift+0x3c>
 8009d66:	f100 0710 	add.w	r7, r0, #16
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	42b1      	cmp	r1, r6
 8009d6e:	d334      	bcc.n	8009dda <rshift+0x96>
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	1eea      	subs	r2, r5, #3
 8009d76:	4296      	cmp	r6, r2
 8009d78:	bf38      	it	cc
 8009d7a:	2300      	movcc	r3, #0
 8009d7c:	4423      	add	r3, r4
 8009d7e:	e015      	b.n	8009dac <rshift+0x68>
 8009d80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d84:	f1c1 0820 	rsb	r8, r1, #32
 8009d88:	40cf      	lsrs	r7, r1
 8009d8a:	f105 0e04 	add.w	lr, r5, #4
 8009d8e:	46a1      	mov	r9, r4
 8009d90:	4576      	cmp	r6, lr
 8009d92:	46f4      	mov	ip, lr
 8009d94:	d815      	bhi.n	8009dc2 <rshift+0x7e>
 8009d96:	1a9a      	subs	r2, r3, r2
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	3a04      	subs	r2, #4
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	42ae      	cmp	r6, r5
 8009da0:	bf38      	it	cc
 8009da2:	2200      	movcc	r2, #0
 8009da4:	18a3      	adds	r3, r4, r2
 8009da6:	50a7      	str	r7, [r4, r2]
 8009da8:	b107      	cbz	r7, 8009dac <rshift+0x68>
 8009daa:	3304      	adds	r3, #4
 8009dac:	1b1a      	subs	r2, r3, r4
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009db4:	bf08      	it	eq
 8009db6:	2300      	moveq	r3, #0
 8009db8:	6102      	str	r2, [r0, #16]
 8009dba:	bf08      	it	eq
 8009dbc:	6143      	streq	r3, [r0, #20]
 8009dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	f8dc c000 	ldr.w	ip, [ip]
 8009dc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009dca:	ea4c 0707 	orr.w	r7, ip, r7
 8009dce:	f849 7b04 	str.w	r7, [r9], #4
 8009dd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dd6:	40cf      	lsrs	r7, r1
 8009dd8:	e7da      	b.n	8009d90 <rshift+0x4c>
 8009dda:	f851 cb04 	ldr.w	ip, [r1], #4
 8009dde:	f847 cf04 	str.w	ip, [r7, #4]!
 8009de2:	e7c3      	b.n	8009d6c <rshift+0x28>
 8009de4:	4623      	mov	r3, r4
 8009de6:	e7e1      	b.n	8009dac <rshift+0x68>

08009de8 <__hexdig_fun>:
 8009de8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	d802      	bhi.n	8009df6 <__hexdig_fun+0xe>
 8009df0:	3820      	subs	r0, #32
 8009df2:	b2c0      	uxtb	r0, r0
 8009df4:	4770      	bx	lr
 8009df6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d801      	bhi.n	8009e02 <__hexdig_fun+0x1a>
 8009dfe:	3847      	subs	r0, #71	@ 0x47
 8009e00:	e7f7      	b.n	8009df2 <__hexdig_fun+0xa>
 8009e02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	d801      	bhi.n	8009e0e <__hexdig_fun+0x26>
 8009e0a:	3827      	subs	r0, #39	@ 0x27
 8009e0c:	e7f1      	b.n	8009df2 <__hexdig_fun+0xa>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	4770      	bx	lr
	...

08009e14 <__gethex>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	468a      	mov	sl, r1
 8009e1c:	9302      	str	r3, [sp, #8]
 8009e1e:	680b      	ldr	r3, [r1, #0]
 8009e20:	9001      	str	r0, [sp, #4]
 8009e22:	4690      	mov	r8, r2
 8009e24:	1c9c      	adds	r4, r3, #2
 8009e26:	46a1      	mov	r9, r4
 8009e28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009e2c:	2830      	cmp	r0, #48	@ 0x30
 8009e2e:	d0fa      	beq.n	8009e26 <__gethex+0x12>
 8009e30:	eba9 0303 	sub.w	r3, r9, r3
 8009e34:	f1a3 0b02 	sub.w	fp, r3, #2
 8009e38:	f7ff ffd6 	bl	8009de8 <__hexdig_fun>
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d168      	bne.n	8009f14 <__gethex+0x100>
 8009e42:	49a0      	ldr	r1, [pc, #640]	@ (800a0c4 <__gethex+0x2b0>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	4648      	mov	r0, r9
 8009e48:	f7ff fe80 	bl	8009b4c <strncmp>
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d167      	bne.n	8009f22 <__gethex+0x10e>
 8009e52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009e56:	4626      	mov	r6, r4
 8009e58:	f7ff ffc6 	bl	8009de8 <__hexdig_fun>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d062      	beq.n	8009f26 <__gethex+0x112>
 8009e60:	4623      	mov	r3, r4
 8009e62:	7818      	ldrb	r0, [r3, #0]
 8009e64:	2830      	cmp	r0, #48	@ 0x30
 8009e66:	4699      	mov	r9, r3
 8009e68:	f103 0301 	add.w	r3, r3, #1
 8009e6c:	d0f9      	beq.n	8009e62 <__gethex+0x4e>
 8009e6e:	f7ff ffbb 	bl	8009de8 <__hexdig_fun>
 8009e72:	fab0 f580 	clz	r5, r0
 8009e76:	096d      	lsrs	r5, r5, #5
 8009e78:	f04f 0b01 	mov.w	fp, #1
 8009e7c:	464a      	mov	r2, r9
 8009e7e:	4616      	mov	r6, r2
 8009e80:	3201      	adds	r2, #1
 8009e82:	7830      	ldrb	r0, [r6, #0]
 8009e84:	f7ff ffb0 	bl	8009de8 <__hexdig_fun>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d1f8      	bne.n	8009e7e <__gethex+0x6a>
 8009e8c:	498d      	ldr	r1, [pc, #564]	@ (800a0c4 <__gethex+0x2b0>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff fe5b 	bl	8009b4c <strncmp>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d13f      	bne.n	8009f1a <__gethex+0x106>
 8009e9a:	b944      	cbnz	r4, 8009eae <__gethex+0x9a>
 8009e9c:	1c74      	adds	r4, r6, #1
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	4616      	mov	r6, r2
 8009ea2:	3201      	adds	r2, #1
 8009ea4:	7830      	ldrb	r0, [r6, #0]
 8009ea6:	f7ff ff9f 	bl	8009de8 <__hexdig_fun>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d1f8      	bne.n	8009ea0 <__gethex+0x8c>
 8009eae:	1ba4      	subs	r4, r4, r6
 8009eb0:	00a7      	lsls	r7, r4, #2
 8009eb2:	7833      	ldrb	r3, [r6, #0]
 8009eb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009eb8:	2b50      	cmp	r3, #80	@ 0x50
 8009eba:	d13e      	bne.n	8009f3a <__gethex+0x126>
 8009ebc:	7873      	ldrb	r3, [r6, #1]
 8009ebe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009ec0:	d033      	beq.n	8009f2a <__gethex+0x116>
 8009ec2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009ec4:	d034      	beq.n	8009f30 <__gethex+0x11c>
 8009ec6:	1c71      	adds	r1, r6, #1
 8009ec8:	2400      	movs	r4, #0
 8009eca:	7808      	ldrb	r0, [r1, #0]
 8009ecc:	f7ff ff8c 	bl	8009de8 <__hexdig_fun>
 8009ed0:	1e43      	subs	r3, r0, #1
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b18      	cmp	r3, #24
 8009ed6:	d830      	bhi.n	8009f3a <__gethex+0x126>
 8009ed8:	f1a0 0210 	sub.w	r2, r0, #16
 8009edc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ee0:	f7ff ff82 	bl	8009de8 <__hexdig_fun>
 8009ee4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ee8:	fa5f fc8c 	uxtb.w	ip, ip
 8009eec:	f1bc 0f18 	cmp.w	ip, #24
 8009ef0:	f04f 030a 	mov.w	r3, #10
 8009ef4:	d91e      	bls.n	8009f34 <__gethex+0x120>
 8009ef6:	b104      	cbz	r4, 8009efa <__gethex+0xe6>
 8009ef8:	4252      	negs	r2, r2
 8009efa:	4417      	add	r7, r2
 8009efc:	f8ca 1000 	str.w	r1, [sl]
 8009f00:	b1ed      	cbz	r5, 8009f3e <__gethex+0x12a>
 8009f02:	f1bb 0f00 	cmp.w	fp, #0
 8009f06:	bf0c      	ite	eq
 8009f08:	2506      	moveq	r5, #6
 8009f0a:	2500      	movne	r5, #0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	b005      	add	sp, #20
 8009f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	2500      	movs	r5, #0
 8009f16:	462c      	mov	r4, r5
 8009f18:	e7b0      	b.n	8009e7c <__gethex+0x68>
 8009f1a:	2c00      	cmp	r4, #0
 8009f1c:	d1c7      	bne.n	8009eae <__gethex+0x9a>
 8009f1e:	4627      	mov	r7, r4
 8009f20:	e7c7      	b.n	8009eb2 <__gethex+0x9e>
 8009f22:	464e      	mov	r6, r9
 8009f24:	462f      	mov	r7, r5
 8009f26:	2501      	movs	r5, #1
 8009f28:	e7c3      	b.n	8009eb2 <__gethex+0x9e>
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	1cb1      	adds	r1, r6, #2
 8009f2e:	e7cc      	b.n	8009eca <__gethex+0xb6>
 8009f30:	2401      	movs	r4, #1
 8009f32:	e7fb      	b.n	8009f2c <__gethex+0x118>
 8009f34:	fb03 0002 	mla	r0, r3, r2, r0
 8009f38:	e7ce      	b.n	8009ed8 <__gethex+0xc4>
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	e7de      	b.n	8009efc <__gethex+0xe8>
 8009f3e:	eba6 0309 	sub.w	r3, r6, r9
 8009f42:	3b01      	subs	r3, #1
 8009f44:	4629      	mov	r1, r5
 8009f46:	2b07      	cmp	r3, #7
 8009f48:	dc0a      	bgt.n	8009f60 <__gethex+0x14c>
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	f000 faf4 	bl	800a538 <_Balloc>
 8009f50:	4604      	mov	r4, r0
 8009f52:	b940      	cbnz	r0, 8009f66 <__gethex+0x152>
 8009f54:	4b5c      	ldr	r3, [pc, #368]	@ (800a0c8 <__gethex+0x2b4>)
 8009f56:	4602      	mov	r2, r0
 8009f58:	21e4      	movs	r1, #228	@ 0xe4
 8009f5a:	485c      	ldr	r0, [pc, #368]	@ (800a0cc <__gethex+0x2b8>)
 8009f5c:	f001 fb5c 	bl	800b618 <__assert_func>
 8009f60:	3101      	adds	r1, #1
 8009f62:	105b      	asrs	r3, r3, #1
 8009f64:	e7ef      	b.n	8009f46 <__gethex+0x132>
 8009f66:	f100 0a14 	add.w	sl, r0, #20
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4655      	mov	r5, sl
 8009f6e:	469b      	mov	fp, r3
 8009f70:	45b1      	cmp	r9, r6
 8009f72:	d337      	bcc.n	8009fe4 <__gethex+0x1d0>
 8009f74:	f845 bb04 	str.w	fp, [r5], #4
 8009f78:	eba5 050a 	sub.w	r5, r5, sl
 8009f7c:	10ad      	asrs	r5, r5, #2
 8009f7e:	6125      	str	r5, [r4, #16]
 8009f80:	4658      	mov	r0, fp
 8009f82:	f000 fbcb 	bl	800a71c <__hi0bits>
 8009f86:	016d      	lsls	r5, r5, #5
 8009f88:	f8d8 6000 	ldr.w	r6, [r8]
 8009f8c:	1a2d      	subs	r5, r5, r0
 8009f8e:	42b5      	cmp	r5, r6
 8009f90:	dd54      	ble.n	800a03c <__gethex+0x228>
 8009f92:	1bad      	subs	r5, r5, r6
 8009f94:	4629      	mov	r1, r5
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 ff57 	bl	800ae4a <__any_on>
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	b178      	cbz	r0, 8009fc0 <__gethex+0x1ac>
 8009fa0:	1e6b      	subs	r3, r5, #1
 8009fa2:	1159      	asrs	r1, r3, #5
 8009fa4:	f003 021f 	and.w	r2, r3, #31
 8009fa8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009fac:	f04f 0901 	mov.w	r9, #1
 8009fb0:	fa09 f202 	lsl.w	r2, r9, r2
 8009fb4:	420a      	tst	r2, r1
 8009fb6:	d003      	beq.n	8009fc0 <__gethex+0x1ac>
 8009fb8:	454b      	cmp	r3, r9
 8009fba:	dc36      	bgt.n	800a02a <__gethex+0x216>
 8009fbc:	f04f 0902 	mov.w	r9, #2
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff febe 	bl	8009d44 <rshift>
 8009fc8:	442f      	add	r7, r5
 8009fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fce:	42bb      	cmp	r3, r7
 8009fd0:	da42      	bge.n	800a058 <__gethex+0x244>
 8009fd2:	9801      	ldr	r0, [sp, #4]
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	f000 faef 	bl	800a5b8 <_Bfree>
 8009fda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	25a3      	movs	r5, #163	@ 0xa3
 8009fe2:	e793      	b.n	8009f0c <__gethex+0xf8>
 8009fe4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009fe8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009fea:	d012      	beq.n	800a012 <__gethex+0x1fe>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d104      	bne.n	8009ffa <__gethex+0x1e6>
 8009ff0:	f845 bb04 	str.w	fp, [r5], #4
 8009ff4:	f04f 0b00 	mov.w	fp, #0
 8009ff8:	465b      	mov	r3, fp
 8009ffa:	7830      	ldrb	r0, [r6, #0]
 8009ffc:	9303      	str	r3, [sp, #12]
 8009ffe:	f7ff fef3 	bl	8009de8 <__hexdig_fun>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	f000 000f 	and.w	r0, r0, #15
 800a008:	4098      	lsls	r0, r3
 800a00a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a00e:	3304      	adds	r3, #4
 800a010:	e7ae      	b.n	8009f70 <__gethex+0x15c>
 800a012:	45b1      	cmp	r9, r6
 800a014:	d8ea      	bhi.n	8009fec <__gethex+0x1d8>
 800a016:	492b      	ldr	r1, [pc, #172]	@ (800a0c4 <__gethex+0x2b0>)
 800a018:	9303      	str	r3, [sp, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7ff fd95 	bl	8009b4c <strncmp>
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	2800      	cmp	r0, #0
 800a026:	d1e1      	bne.n	8009fec <__gethex+0x1d8>
 800a028:	e7a2      	b.n	8009f70 <__gethex+0x15c>
 800a02a:	1ea9      	subs	r1, r5, #2
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 ff0c 	bl	800ae4a <__any_on>
 800a032:	2800      	cmp	r0, #0
 800a034:	d0c2      	beq.n	8009fbc <__gethex+0x1a8>
 800a036:	f04f 0903 	mov.w	r9, #3
 800a03a:	e7c1      	b.n	8009fc0 <__gethex+0x1ac>
 800a03c:	da09      	bge.n	800a052 <__gethex+0x23e>
 800a03e:	1b75      	subs	r5, r6, r5
 800a040:	4621      	mov	r1, r4
 800a042:	9801      	ldr	r0, [sp, #4]
 800a044:	462a      	mov	r2, r5
 800a046:	f000 fcc7 	bl	800a9d8 <__lshift>
 800a04a:	1b7f      	subs	r7, r7, r5
 800a04c:	4604      	mov	r4, r0
 800a04e:	f100 0a14 	add.w	sl, r0, #20
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	e7b8      	b.n	8009fca <__gethex+0x1b6>
 800a058:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a05c:	42bd      	cmp	r5, r7
 800a05e:	dd6f      	ble.n	800a140 <__gethex+0x32c>
 800a060:	1bed      	subs	r5, r5, r7
 800a062:	42ae      	cmp	r6, r5
 800a064:	dc34      	bgt.n	800a0d0 <__gethex+0x2bc>
 800a066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d022      	beq.n	800a0b4 <__gethex+0x2a0>
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d024      	beq.n	800a0bc <__gethex+0x2a8>
 800a072:	2b01      	cmp	r3, #1
 800a074:	d115      	bne.n	800a0a2 <__gethex+0x28e>
 800a076:	42ae      	cmp	r6, r5
 800a078:	d113      	bne.n	800a0a2 <__gethex+0x28e>
 800a07a:	2e01      	cmp	r6, #1
 800a07c:	d10b      	bne.n	800a096 <__gethex+0x282>
 800a07e:	9a02      	ldr	r2, [sp, #8]
 800a080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	2301      	movs	r3, #1
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	f8ca 3000 	str.w	r3, [sl]
 800a08e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a090:	2562      	movs	r5, #98	@ 0x62
 800a092:	601c      	str	r4, [r3, #0]
 800a094:	e73a      	b.n	8009f0c <__gethex+0xf8>
 800a096:	1e71      	subs	r1, r6, #1
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 fed6 	bl	800ae4a <__any_on>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d1ed      	bne.n	800a07e <__gethex+0x26a>
 800a0a2:	9801      	ldr	r0, [sp, #4]
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	f000 fa87 	bl	800a5b8 <_Bfree>
 800a0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	2550      	movs	r5, #80	@ 0x50
 800a0b2:	e72b      	b.n	8009f0c <__gethex+0xf8>
 800a0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1f3      	bne.n	800a0a2 <__gethex+0x28e>
 800a0ba:	e7e0      	b.n	800a07e <__gethex+0x26a>
 800a0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1dd      	bne.n	800a07e <__gethex+0x26a>
 800a0c2:	e7ee      	b.n	800a0a2 <__gethex+0x28e>
 800a0c4:	0800c084 	.word	0x0800c084
 800a0c8:	0800c09a 	.word	0x0800c09a
 800a0cc:	0800c0ab 	.word	0x0800c0ab
 800a0d0:	1e6f      	subs	r7, r5, #1
 800a0d2:	f1b9 0f00 	cmp.w	r9, #0
 800a0d6:	d130      	bne.n	800a13a <__gethex+0x326>
 800a0d8:	b127      	cbz	r7, 800a0e4 <__gethex+0x2d0>
 800a0da:	4639      	mov	r1, r7
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 feb4 	bl	800ae4a <__any_on>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	117a      	asrs	r2, r7, #5
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a0ec:	f007 071f 	and.w	r7, r7, #31
 800a0f0:	40bb      	lsls	r3, r7
 800a0f2:	4213      	tst	r3, r2
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	bf18      	it	ne
 800a0fa:	f049 0902 	orrne.w	r9, r9, #2
 800a0fe:	f7ff fe21 	bl	8009d44 <rshift>
 800a102:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a106:	1b76      	subs	r6, r6, r5
 800a108:	2502      	movs	r5, #2
 800a10a:	f1b9 0f00 	cmp.w	r9, #0
 800a10e:	d047      	beq.n	800a1a0 <__gethex+0x38c>
 800a110:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d015      	beq.n	800a144 <__gethex+0x330>
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d017      	beq.n	800a14c <__gethex+0x338>
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d109      	bne.n	800a134 <__gethex+0x320>
 800a120:	f019 0f02 	tst.w	r9, #2
 800a124:	d006      	beq.n	800a134 <__gethex+0x320>
 800a126:	f8da 3000 	ldr.w	r3, [sl]
 800a12a:	ea49 0903 	orr.w	r9, r9, r3
 800a12e:	f019 0f01 	tst.w	r9, #1
 800a132:	d10e      	bne.n	800a152 <__gethex+0x33e>
 800a134:	f045 0510 	orr.w	r5, r5, #16
 800a138:	e032      	b.n	800a1a0 <__gethex+0x38c>
 800a13a:	f04f 0901 	mov.w	r9, #1
 800a13e:	e7d1      	b.n	800a0e4 <__gethex+0x2d0>
 800a140:	2501      	movs	r5, #1
 800a142:	e7e2      	b.n	800a10a <__gethex+0x2f6>
 800a144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a146:	f1c3 0301 	rsb	r3, r3, #1
 800a14a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0f0      	beq.n	800a134 <__gethex+0x320>
 800a152:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a156:	f104 0314 	add.w	r3, r4, #20
 800a15a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a15e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a162:	f04f 0c00 	mov.w	ip, #0
 800a166:	4618      	mov	r0, r3
 800a168:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a170:	d01b      	beq.n	800a1aa <__gethex+0x396>
 800a172:	3201      	adds	r2, #1
 800a174:	6002      	str	r2, [r0, #0]
 800a176:	2d02      	cmp	r5, #2
 800a178:	f104 0314 	add.w	r3, r4, #20
 800a17c:	d13c      	bne.n	800a1f8 <__gethex+0x3e4>
 800a17e:	f8d8 2000 	ldr.w	r2, [r8]
 800a182:	3a01      	subs	r2, #1
 800a184:	42b2      	cmp	r2, r6
 800a186:	d109      	bne.n	800a19c <__gethex+0x388>
 800a188:	1171      	asrs	r1, r6, #5
 800a18a:	2201      	movs	r2, #1
 800a18c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a190:	f006 061f 	and.w	r6, r6, #31
 800a194:	fa02 f606 	lsl.w	r6, r2, r6
 800a198:	421e      	tst	r6, r3
 800a19a:	d13a      	bne.n	800a212 <__gethex+0x3fe>
 800a19c:	f045 0520 	orr.w	r5, r5, #32
 800a1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a2:	601c      	str	r4, [r3, #0]
 800a1a4:	9b02      	ldr	r3, [sp, #8]
 800a1a6:	601f      	str	r7, [r3, #0]
 800a1a8:	e6b0      	b.n	8009f0c <__gethex+0xf8>
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800a1b0:	d8d9      	bhi.n	800a166 <__gethex+0x352>
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	459b      	cmp	fp, r3
 800a1b6:	db17      	blt.n	800a1e8 <__gethex+0x3d4>
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	9801      	ldr	r0, [sp, #4]
 800a1bc:	3101      	adds	r1, #1
 800a1be:	f000 f9bb 	bl	800a538 <_Balloc>
 800a1c2:	4681      	mov	r9, r0
 800a1c4:	b918      	cbnz	r0, 800a1ce <__gethex+0x3ba>
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a230 <__gethex+0x41c>)
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	2184      	movs	r1, #132	@ 0x84
 800a1cc:	e6c5      	b.n	8009f5a <__gethex+0x146>
 800a1ce:	6922      	ldr	r2, [r4, #16]
 800a1d0:	3202      	adds	r2, #2
 800a1d2:	f104 010c 	add.w	r1, r4, #12
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	300c      	adds	r0, #12
 800a1da:	f7ff fd50 	bl	8009c7e <memcpy>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	9801      	ldr	r0, [sp, #4]
 800a1e2:	f000 f9e9 	bl	800a5b8 <_Bfree>
 800a1e6:	464c      	mov	r4, r9
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1f0:	6122      	str	r2, [r4, #16]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	615a      	str	r2, [r3, #20]
 800a1f6:	e7be      	b.n	800a176 <__gethex+0x362>
 800a1f8:	6922      	ldr	r2, [r4, #16]
 800a1fa:	455a      	cmp	r2, fp
 800a1fc:	dd0b      	ble.n	800a216 <__gethex+0x402>
 800a1fe:	2101      	movs	r1, #1
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff fd9f 	bl	8009d44 <rshift>
 800a206:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a20a:	3701      	adds	r7, #1
 800a20c:	42bb      	cmp	r3, r7
 800a20e:	f6ff aee0 	blt.w	8009fd2 <__gethex+0x1be>
 800a212:	2501      	movs	r5, #1
 800a214:	e7c2      	b.n	800a19c <__gethex+0x388>
 800a216:	f016 061f 	ands.w	r6, r6, #31
 800a21a:	d0fa      	beq.n	800a212 <__gethex+0x3fe>
 800a21c:	4453      	add	r3, sl
 800a21e:	f1c6 0620 	rsb	r6, r6, #32
 800a222:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a226:	f000 fa79 	bl	800a71c <__hi0bits>
 800a22a:	42b0      	cmp	r0, r6
 800a22c:	dbe7      	blt.n	800a1fe <__gethex+0x3ea>
 800a22e:	e7f0      	b.n	800a212 <__gethex+0x3fe>
 800a230:	0800c09a 	.word	0x0800c09a

0800a234 <L_shift>:
 800a234:	f1c2 0208 	rsb	r2, r2, #8
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	b570      	push	{r4, r5, r6, lr}
 800a23c:	f1c2 0620 	rsb	r6, r2, #32
 800a240:	6843      	ldr	r3, [r0, #4]
 800a242:	6804      	ldr	r4, [r0, #0]
 800a244:	fa03 f506 	lsl.w	r5, r3, r6
 800a248:	432c      	orrs	r4, r5
 800a24a:	40d3      	lsrs	r3, r2
 800a24c:	6004      	str	r4, [r0, #0]
 800a24e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a252:	4288      	cmp	r0, r1
 800a254:	d3f4      	bcc.n	800a240 <L_shift+0xc>
 800a256:	bd70      	pop	{r4, r5, r6, pc}

0800a258 <__match>:
 800a258:	b530      	push	{r4, r5, lr}
 800a25a:	6803      	ldr	r3, [r0, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a262:	b914      	cbnz	r4, 800a26a <__match+0x12>
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	2001      	movs	r0, #1
 800a268:	bd30      	pop	{r4, r5, pc}
 800a26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a272:	2d19      	cmp	r5, #25
 800a274:	bf98      	it	ls
 800a276:	3220      	addls	r2, #32
 800a278:	42a2      	cmp	r2, r4
 800a27a:	d0f0      	beq.n	800a25e <__match+0x6>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7f3      	b.n	800a268 <__match+0x10>

0800a280 <__hexnan>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	680b      	ldr	r3, [r1, #0]
 800a286:	6801      	ldr	r1, [r0, #0]
 800a288:	115e      	asrs	r6, r3, #5
 800a28a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a28e:	f013 031f 	ands.w	r3, r3, #31
 800a292:	b087      	sub	sp, #28
 800a294:	bf18      	it	ne
 800a296:	3604      	addne	r6, #4
 800a298:	2500      	movs	r5, #0
 800a29a:	1f37      	subs	r7, r6, #4
 800a29c:	4682      	mov	sl, r0
 800a29e:	4690      	mov	r8, r2
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a2a6:	46b9      	mov	r9, r7
 800a2a8:	463c      	mov	r4, r7
 800a2aa:	9502      	str	r5, [sp, #8]
 800a2ac:	46ab      	mov	fp, r5
 800a2ae:	784a      	ldrb	r2, [r1, #1]
 800a2b0:	1c4b      	adds	r3, r1, #1
 800a2b2:	9303      	str	r3, [sp, #12]
 800a2b4:	b342      	cbz	r2, 800a308 <__hexnan+0x88>
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	9105      	str	r1, [sp, #20]
 800a2ba:	9204      	str	r2, [sp, #16]
 800a2bc:	f7ff fd94 	bl	8009de8 <__hexdig_fun>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d151      	bne.n	800a368 <__hexnan+0xe8>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	2a20      	cmp	r2, #32
 800a2ca:	d818      	bhi.n	800a2fe <__hexnan+0x7e>
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	459b      	cmp	fp, r3
 800a2d0:	dd13      	ble.n	800a2fa <__hexnan+0x7a>
 800a2d2:	454c      	cmp	r4, r9
 800a2d4:	d206      	bcs.n	800a2e4 <__hexnan+0x64>
 800a2d6:	2d07      	cmp	r5, #7
 800a2d8:	dc04      	bgt.n	800a2e4 <__hexnan+0x64>
 800a2da:	462a      	mov	r2, r5
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7ff ffa8 	bl	800a234 <L_shift>
 800a2e4:	4544      	cmp	r4, r8
 800a2e6:	d952      	bls.n	800a38e <__hexnan+0x10e>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a2ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a2f6:	464c      	mov	r4, r9
 800a2f8:	461d      	mov	r5, r3
 800a2fa:	9903      	ldr	r1, [sp, #12]
 800a2fc:	e7d7      	b.n	800a2ae <__hexnan+0x2e>
 800a2fe:	2a29      	cmp	r2, #41	@ 0x29
 800a300:	d157      	bne.n	800a3b2 <__hexnan+0x132>
 800a302:	3102      	adds	r1, #2
 800a304:	f8ca 1000 	str.w	r1, [sl]
 800a308:	f1bb 0f00 	cmp.w	fp, #0
 800a30c:	d051      	beq.n	800a3b2 <__hexnan+0x132>
 800a30e:	454c      	cmp	r4, r9
 800a310:	d206      	bcs.n	800a320 <__hexnan+0xa0>
 800a312:	2d07      	cmp	r5, #7
 800a314:	dc04      	bgt.n	800a320 <__hexnan+0xa0>
 800a316:	462a      	mov	r2, r5
 800a318:	4649      	mov	r1, r9
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff ff8a 	bl	800a234 <L_shift>
 800a320:	4544      	cmp	r4, r8
 800a322:	d936      	bls.n	800a392 <__hexnan+0x112>
 800a324:	f1a8 0204 	sub.w	r2, r8, #4
 800a328:	4623      	mov	r3, r4
 800a32a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a32e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a332:	429f      	cmp	r7, r3
 800a334:	d2f9      	bcs.n	800a32a <__hexnan+0xaa>
 800a336:	1b3b      	subs	r3, r7, r4
 800a338:	f023 0303 	bic.w	r3, r3, #3
 800a33c:	3304      	adds	r3, #4
 800a33e:	3401      	adds	r4, #1
 800a340:	3e03      	subs	r6, #3
 800a342:	42b4      	cmp	r4, r6
 800a344:	bf88      	it	hi
 800a346:	2304      	movhi	r3, #4
 800a348:	4443      	add	r3, r8
 800a34a:	2200      	movs	r2, #0
 800a34c:	f843 2b04 	str.w	r2, [r3], #4
 800a350:	429f      	cmp	r7, r3
 800a352:	d2fb      	bcs.n	800a34c <__hexnan+0xcc>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	b91b      	cbnz	r3, 800a360 <__hexnan+0xe0>
 800a358:	4547      	cmp	r7, r8
 800a35a:	d128      	bne.n	800a3ae <__hexnan+0x12e>
 800a35c:	2301      	movs	r3, #1
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	2005      	movs	r0, #5
 800a362:	b007      	add	sp, #28
 800a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a368:	3501      	adds	r5, #1
 800a36a:	2d08      	cmp	r5, #8
 800a36c:	f10b 0b01 	add.w	fp, fp, #1
 800a370:	dd06      	ble.n	800a380 <__hexnan+0x100>
 800a372:	4544      	cmp	r4, r8
 800a374:	d9c1      	bls.n	800a2fa <__hexnan+0x7a>
 800a376:	2300      	movs	r3, #0
 800a378:	f844 3c04 	str.w	r3, [r4, #-4]
 800a37c:	2501      	movs	r5, #1
 800a37e:	3c04      	subs	r4, #4
 800a380:	6822      	ldr	r2, [r4, #0]
 800a382:	f000 000f 	and.w	r0, r0, #15
 800a386:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a38a:	6020      	str	r0, [r4, #0]
 800a38c:	e7b5      	b.n	800a2fa <__hexnan+0x7a>
 800a38e:	2508      	movs	r5, #8
 800a390:	e7b3      	b.n	800a2fa <__hexnan+0x7a>
 800a392:	9b01      	ldr	r3, [sp, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0dd      	beq.n	800a354 <__hexnan+0xd4>
 800a398:	f1c3 0320 	rsb	r3, r3, #32
 800a39c:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a0:	40da      	lsrs	r2, r3
 800a3a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a3ac:	e7d2      	b.n	800a354 <__hexnan+0xd4>
 800a3ae:	3f04      	subs	r7, #4
 800a3b0:	e7d0      	b.n	800a354 <__hexnan+0xd4>
 800a3b2:	2004      	movs	r0, #4
 800a3b4:	e7d5      	b.n	800a362 <__hexnan+0xe2>
	...

0800a3b8 <sbrk_aligned>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	4e0f      	ldr	r6, [pc, #60]	@ (800a3f8 <sbrk_aligned+0x40>)
 800a3bc:	460c      	mov	r4, r1
 800a3be:	6831      	ldr	r1, [r6, #0]
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	b911      	cbnz	r1, 800a3ca <sbrk_aligned+0x12>
 800a3c4:	f001 f918 	bl	800b5f8 <_sbrk_r>
 800a3c8:	6030      	str	r0, [r6, #0]
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f001 f913 	bl	800b5f8 <_sbrk_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d103      	bne.n	800a3de <sbrk_aligned+0x26>
 800a3d6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3da:	4620      	mov	r0, r4
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	1cc4      	adds	r4, r0, #3
 800a3e0:	f024 0403 	bic.w	r4, r4, #3
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d0f8      	beq.n	800a3da <sbrk_aligned+0x22>
 800a3e8:	1a21      	subs	r1, r4, r0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f001 f904 	bl	800b5f8 <_sbrk_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d1f2      	bne.n	800a3da <sbrk_aligned+0x22>
 800a3f4:	e7ef      	b.n	800a3d6 <sbrk_aligned+0x1e>
 800a3f6:	bf00      	nop
 800a3f8:	200006d4 	.word	0x200006d4

0800a3fc <_malloc_r>:
 800a3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a400:	1ccd      	adds	r5, r1, #3
 800a402:	f025 0503 	bic.w	r5, r5, #3
 800a406:	3508      	adds	r5, #8
 800a408:	2d0c      	cmp	r5, #12
 800a40a:	bf38      	it	cc
 800a40c:	250c      	movcc	r5, #12
 800a40e:	2d00      	cmp	r5, #0
 800a410:	4606      	mov	r6, r0
 800a412:	db01      	blt.n	800a418 <_malloc_r+0x1c>
 800a414:	42a9      	cmp	r1, r5
 800a416:	d904      	bls.n	800a422 <_malloc_r+0x26>
 800a418:	230c      	movs	r3, #12
 800a41a:	6033      	str	r3, [r6, #0]
 800a41c:	2000      	movs	r0, #0
 800a41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a422:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4f8 <_malloc_r+0xfc>
 800a426:	f000 f87b 	bl	800a520 <__malloc_lock>
 800a42a:	f8d8 3000 	ldr.w	r3, [r8]
 800a42e:	461c      	mov	r4, r3
 800a430:	bb44      	cbnz	r4, 800a484 <_malloc_r+0x88>
 800a432:	4629      	mov	r1, r5
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffbf 	bl	800a3b8 <sbrk_aligned>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	4604      	mov	r4, r0
 800a43e:	d158      	bne.n	800a4f2 <_malloc_r+0xf6>
 800a440:	f8d8 4000 	ldr.w	r4, [r8]
 800a444:	4627      	mov	r7, r4
 800a446:	2f00      	cmp	r7, #0
 800a448:	d143      	bne.n	800a4d2 <_malloc_r+0xd6>
 800a44a:	2c00      	cmp	r4, #0
 800a44c:	d04b      	beq.n	800a4e6 <_malloc_r+0xea>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	4639      	mov	r1, r7
 800a452:	4630      	mov	r0, r6
 800a454:	eb04 0903 	add.w	r9, r4, r3
 800a458:	f001 f8ce 	bl	800b5f8 <_sbrk_r>
 800a45c:	4581      	cmp	r9, r0
 800a45e:	d142      	bne.n	800a4e6 <_malloc_r+0xea>
 800a460:	6821      	ldr	r1, [r4, #0]
 800a462:	1a6d      	subs	r5, r5, r1
 800a464:	4629      	mov	r1, r5
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff ffa6 	bl	800a3b8 <sbrk_aligned>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d03a      	beq.n	800a4e6 <_malloc_r+0xea>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	442b      	add	r3, r5
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	f8d8 3000 	ldr.w	r3, [r8]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	bb62      	cbnz	r2, 800a4d8 <_malloc_r+0xdc>
 800a47e:	f8c8 7000 	str.w	r7, [r8]
 800a482:	e00f      	b.n	800a4a4 <_malloc_r+0xa8>
 800a484:	6822      	ldr	r2, [r4, #0]
 800a486:	1b52      	subs	r2, r2, r5
 800a488:	d420      	bmi.n	800a4cc <_malloc_r+0xd0>
 800a48a:	2a0b      	cmp	r2, #11
 800a48c:	d917      	bls.n	800a4be <_malloc_r+0xc2>
 800a48e:	1961      	adds	r1, r4, r5
 800a490:	42a3      	cmp	r3, r4
 800a492:	6025      	str	r5, [r4, #0]
 800a494:	bf18      	it	ne
 800a496:	6059      	strne	r1, [r3, #4]
 800a498:	6863      	ldr	r3, [r4, #4]
 800a49a:	bf08      	it	eq
 800a49c:	f8c8 1000 	streq.w	r1, [r8]
 800a4a0:	5162      	str	r2, [r4, r5]
 800a4a2:	604b      	str	r3, [r1, #4]
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f000 f841 	bl	800a52c <__malloc_unlock>
 800a4aa:	f104 000b 	add.w	r0, r4, #11
 800a4ae:	1d23      	adds	r3, r4, #4
 800a4b0:	f020 0007 	bic.w	r0, r0, #7
 800a4b4:	1ac2      	subs	r2, r0, r3
 800a4b6:	bf1c      	itt	ne
 800a4b8:	1a1b      	subne	r3, r3, r0
 800a4ba:	50a3      	strne	r3, [r4, r2]
 800a4bc:	e7af      	b.n	800a41e <_malloc_r+0x22>
 800a4be:	6862      	ldr	r2, [r4, #4]
 800a4c0:	42a3      	cmp	r3, r4
 800a4c2:	bf0c      	ite	eq
 800a4c4:	f8c8 2000 	streq.w	r2, [r8]
 800a4c8:	605a      	strne	r2, [r3, #4]
 800a4ca:	e7eb      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	6864      	ldr	r4, [r4, #4]
 800a4d0:	e7ae      	b.n	800a430 <_malloc_r+0x34>
 800a4d2:	463c      	mov	r4, r7
 800a4d4:	687f      	ldr	r7, [r7, #4]
 800a4d6:	e7b6      	b.n	800a446 <_malloc_r+0x4a>
 800a4d8:	461a      	mov	r2, r3
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	42a3      	cmp	r3, r4
 800a4de:	d1fb      	bne.n	800a4d8 <_malloc_r+0xdc>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6053      	str	r3, [r2, #4]
 800a4e4:	e7de      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4e6:	230c      	movs	r3, #12
 800a4e8:	6033      	str	r3, [r6, #0]
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f000 f81e 	bl	800a52c <__malloc_unlock>
 800a4f0:	e794      	b.n	800a41c <_malloc_r+0x20>
 800a4f2:	6005      	str	r5, [r0, #0]
 800a4f4:	e7d6      	b.n	800a4a4 <_malloc_r+0xa8>
 800a4f6:	bf00      	nop
 800a4f8:	200006d8 	.word	0x200006d8

0800a4fc <__ascii_mbtowc>:
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	b901      	cbnz	r1, 800a502 <__ascii_mbtowc+0x6>
 800a500:	a901      	add	r1, sp, #4
 800a502:	b142      	cbz	r2, 800a516 <__ascii_mbtowc+0x1a>
 800a504:	b14b      	cbz	r3, 800a51a <__ascii_mbtowc+0x1e>
 800a506:	7813      	ldrb	r3, [r2, #0]
 800a508:	600b      	str	r3, [r1, #0]
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	1e10      	subs	r0, r2, #0
 800a50e:	bf18      	it	ne
 800a510:	2001      	movne	r0, #1
 800a512:	b002      	add	sp, #8
 800a514:	4770      	bx	lr
 800a516:	4610      	mov	r0, r2
 800a518:	e7fb      	b.n	800a512 <__ascii_mbtowc+0x16>
 800a51a:	f06f 0001 	mvn.w	r0, #1
 800a51e:	e7f8      	b.n	800a512 <__ascii_mbtowc+0x16>

0800a520 <__malloc_lock>:
 800a520:	4801      	ldr	r0, [pc, #4]	@ (800a528 <__malloc_lock+0x8>)
 800a522:	f7ff bbaa 	b.w	8009c7a <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	200006d0 	.word	0x200006d0

0800a52c <__malloc_unlock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	@ (800a534 <__malloc_unlock+0x8>)
 800a52e:	f7ff bba5 	b.w	8009c7c <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	200006d0 	.word	0x200006d0

0800a538 <_Balloc>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	69c6      	ldr	r6, [r0, #28]
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	b976      	cbnz	r6, 800a560 <_Balloc+0x28>
 800a542:	2010      	movs	r0, #16
 800a544:	f001 f89a 	bl	800b67c <malloc>
 800a548:	4602      	mov	r2, r0
 800a54a:	61e0      	str	r0, [r4, #28]
 800a54c:	b920      	cbnz	r0, 800a558 <_Balloc+0x20>
 800a54e:	4b18      	ldr	r3, [pc, #96]	@ (800a5b0 <_Balloc+0x78>)
 800a550:	4818      	ldr	r0, [pc, #96]	@ (800a5b4 <_Balloc+0x7c>)
 800a552:	216b      	movs	r1, #107	@ 0x6b
 800a554:	f001 f860 	bl	800b618 <__assert_func>
 800a558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a55c:	6006      	str	r6, [r0, #0]
 800a55e:	60c6      	str	r6, [r0, #12]
 800a560:	69e6      	ldr	r6, [r4, #28]
 800a562:	68f3      	ldr	r3, [r6, #12]
 800a564:	b183      	cbz	r3, 800a588 <_Balloc+0x50>
 800a566:	69e3      	ldr	r3, [r4, #28]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a56e:	b9b8      	cbnz	r0, 800a5a0 <_Balloc+0x68>
 800a570:	2101      	movs	r1, #1
 800a572:	fa01 f605 	lsl.w	r6, r1, r5
 800a576:	1d72      	adds	r2, r6, #5
 800a578:	0092      	lsls	r2, r2, #2
 800a57a:	4620      	mov	r0, r4
 800a57c:	f001 f86a 	bl	800b654 <_calloc_r>
 800a580:	b160      	cbz	r0, 800a59c <_Balloc+0x64>
 800a582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a586:	e00e      	b.n	800a5a6 <_Balloc+0x6e>
 800a588:	2221      	movs	r2, #33	@ 0x21
 800a58a:	2104      	movs	r1, #4
 800a58c:	4620      	mov	r0, r4
 800a58e:	f001 f861 	bl	800b654 <_calloc_r>
 800a592:	69e3      	ldr	r3, [r4, #28]
 800a594:	60f0      	str	r0, [r6, #12]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e4      	bne.n	800a566 <_Balloc+0x2e>
 800a59c:	2000      	movs	r0, #0
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	6802      	ldr	r2, [r0, #0]
 800a5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5ac:	e7f7      	b.n	800a59e <_Balloc+0x66>
 800a5ae:	bf00      	nop
 800a5b0:	0800c10b 	.word	0x0800c10b
 800a5b4:	0800c122 	.word	0x0800c122

0800a5b8 <_Bfree>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	69c6      	ldr	r6, [r0, #28]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b976      	cbnz	r6, 800a5e0 <_Bfree+0x28>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	f001 f85a 	bl	800b67c <malloc>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	61e8      	str	r0, [r5, #28]
 800a5cc:	b920      	cbnz	r0, 800a5d8 <_Bfree+0x20>
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <_Bfree+0x3c>)
 800a5d0:	4809      	ldr	r0, [pc, #36]	@ (800a5f8 <_Bfree+0x40>)
 800a5d2:	218f      	movs	r1, #143	@ 0x8f
 800a5d4:	f001 f820 	bl	800b618 <__assert_func>
 800a5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5dc:	6006      	str	r6, [r0, #0]
 800a5de:	60c6      	str	r6, [r0, #12]
 800a5e0:	b13c      	cbz	r4, 800a5f2 <_Bfree+0x3a>
 800a5e2:	69eb      	ldr	r3, [r5, #28]
 800a5e4:	6862      	ldr	r2, [r4, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5ec:	6021      	str	r1, [r4, #0]
 800a5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	0800c10b 	.word	0x0800c10b
 800a5f8:	0800c122 	.word	0x0800c122

0800a5fc <__multadd>:
 800a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a600:	690d      	ldr	r5, [r1, #16]
 800a602:	4607      	mov	r7, r0
 800a604:	460c      	mov	r4, r1
 800a606:	461e      	mov	r6, r3
 800a608:	f101 0c14 	add.w	ip, r1, #20
 800a60c:	2000      	movs	r0, #0
 800a60e:	f8dc 3000 	ldr.w	r3, [ip]
 800a612:	b299      	uxth	r1, r3
 800a614:	fb02 6101 	mla	r1, r2, r1, r6
 800a618:	0c1e      	lsrs	r6, r3, #16
 800a61a:	0c0b      	lsrs	r3, r1, #16
 800a61c:	fb02 3306 	mla	r3, r2, r6, r3
 800a620:	b289      	uxth	r1, r1
 800a622:	3001      	adds	r0, #1
 800a624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a628:	4285      	cmp	r5, r0
 800a62a:	f84c 1b04 	str.w	r1, [ip], #4
 800a62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a632:	dcec      	bgt.n	800a60e <__multadd+0x12>
 800a634:	b30e      	cbz	r6, 800a67a <__multadd+0x7e>
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	42ab      	cmp	r3, r5
 800a63a:	dc19      	bgt.n	800a670 <__multadd+0x74>
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	4638      	mov	r0, r7
 800a640:	3101      	adds	r1, #1
 800a642:	f7ff ff79 	bl	800a538 <_Balloc>
 800a646:	4680      	mov	r8, r0
 800a648:	b928      	cbnz	r0, 800a656 <__multadd+0x5a>
 800a64a:	4602      	mov	r2, r0
 800a64c:	4b0c      	ldr	r3, [pc, #48]	@ (800a680 <__multadd+0x84>)
 800a64e:	480d      	ldr	r0, [pc, #52]	@ (800a684 <__multadd+0x88>)
 800a650:	21ba      	movs	r1, #186	@ 0xba
 800a652:	f000 ffe1 	bl	800b618 <__assert_func>
 800a656:	6922      	ldr	r2, [r4, #16]
 800a658:	3202      	adds	r2, #2
 800a65a:	f104 010c 	add.w	r1, r4, #12
 800a65e:	0092      	lsls	r2, r2, #2
 800a660:	300c      	adds	r0, #12
 800a662:	f7ff fb0c 	bl	8009c7e <memcpy>
 800a666:	4621      	mov	r1, r4
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff ffa5 	bl	800a5b8 <_Bfree>
 800a66e:	4644      	mov	r4, r8
 800a670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a674:	3501      	adds	r5, #1
 800a676:	615e      	str	r6, [r3, #20]
 800a678:	6125      	str	r5, [r4, #16]
 800a67a:	4620      	mov	r0, r4
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	0800c09a 	.word	0x0800c09a
 800a684:	0800c122 	.word	0x0800c122

0800a688 <__s2b>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	460c      	mov	r4, r1
 800a68e:	4615      	mov	r5, r2
 800a690:	461f      	mov	r7, r3
 800a692:	2209      	movs	r2, #9
 800a694:	3308      	adds	r3, #8
 800a696:	4606      	mov	r6, r0
 800a698:	fb93 f3f2 	sdiv	r3, r3, r2
 800a69c:	2100      	movs	r1, #0
 800a69e:	2201      	movs	r2, #1
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	db09      	blt.n	800a6b8 <__s2b+0x30>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ff47 	bl	800a538 <_Balloc>
 800a6aa:	b940      	cbnz	r0, 800a6be <__s2b+0x36>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	4b19      	ldr	r3, [pc, #100]	@ (800a714 <__s2b+0x8c>)
 800a6b0:	4819      	ldr	r0, [pc, #100]	@ (800a718 <__s2b+0x90>)
 800a6b2:	21d3      	movs	r1, #211	@ 0xd3
 800a6b4:	f000 ffb0 	bl	800b618 <__assert_func>
 800a6b8:	0052      	lsls	r2, r2, #1
 800a6ba:	3101      	adds	r1, #1
 800a6bc:	e7f0      	b.n	800a6a0 <__s2b+0x18>
 800a6be:	9b08      	ldr	r3, [sp, #32]
 800a6c0:	6143      	str	r3, [r0, #20]
 800a6c2:	2d09      	cmp	r5, #9
 800a6c4:	f04f 0301 	mov.w	r3, #1
 800a6c8:	6103      	str	r3, [r0, #16]
 800a6ca:	dd16      	ble.n	800a6fa <__s2b+0x72>
 800a6cc:	f104 0909 	add.w	r9, r4, #9
 800a6d0:	46c8      	mov	r8, r9
 800a6d2:	442c      	add	r4, r5
 800a6d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6d8:	4601      	mov	r1, r0
 800a6da:	3b30      	subs	r3, #48	@ 0x30
 800a6dc:	220a      	movs	r2, #10
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff8c 	bl	800a5fc <__multadd>
 800a6e4:	45a0      	cmp	r8, r4
 800a6e6:	d1f5      	bne.n	800a6d4 <__s2b+0x4c>
 800a6e8:	f1a5 0408 	sub.w	r4, r5, #8
 800a6ec:	444c      	add	r4, r9
 800a6ee:	1b2d      	subs	r5, r5, r4
 800a6f0:	1963      	adds	r3, r4, r5
 800a6f2:	42bb      	cmp	r3, r7
 800a6f4:	db04      	blt.n	800a700 <__s2b+0x78>
 800a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fa:	340a      	adds	r4, #10
 800a6fc:	2509      	movs	r5, #9
 800a6fe:	e7f6      	b.n	800a6ee <__s2b+0x66>
 800a700:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a704:	4601      	mov	r1, r0
 800a706:	3b30      	subs	r3, #48	@ 0x30
 800a708:	220a      	movs	r2, #10
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff ff76 	bl	800a5fc <__multadd>
 800a710:	e7ee      	b.n	800a6f0 <__s2b+0x68>
 800a712:	bf00      	nop
 800a714:	0800c09a 	.word	0x0800c09a
 800a718:	0800c122 	.word	0x0800c122

0800a71c <__hi0bits>:
 800a71c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a720:	4603      	mov	r3, r0
 800a722:	bf36      	itet	cc
 800a724:	0403      	lslcc	r3, r0, #16
 800a726:	2000      	movcs	r0, #0
 800a728:	2010      	movcc	r0, #16
 800a72a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a72e:	bf3c      	itt	cc
 800a730:	021b      	lslcc	r3, r3, #8
 800a732:	3008      	addcc	r0, #8
 800a734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a738:	bf3c      	itt	cc
 800a73a:	011b      	lslcc	r3, r3, #4
 800a73c:	3004      	addcc	r0, #4
 800a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a742:	bf3c      	itt	cc
 800a744:	009b      	lslcc	r3, r3, #2
 800a746:	3002      	addcc	r0, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	db05      	blt.n	800a758 <__hi0bits+0x3c>
 800a74c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a750:	f100 0001 	add.w	r0, r0, #1
 800a754:	bf08      	it	eq
 800a756:	2020      	moveq	r0, #32
 800a758:	4770      	bx	lr

0800a75a <__lo0bits>:
 800a75a:	6803      	ldr	r3, [r0, #0]
 800a75c:	4602      	mov	r2, r0
 800a75e:	f013 0007 	ands.w	r0, r3, #7
 800a762:	d00b      	beq.n	800a77c <__lo0bits+0x22>
 800a764:	07d9      	lsls	r1, r3, #31
 800a766:	d421      	bmi.n	800a7ac <__lo0bits+0x52>
 800a768:	0798      	lsls	r0, r3, #30
 800a76a:	bf49      	itett	mi
 800a76c:	085b      	lsrmi	r3, r3, #1
 800a76e:	089b      	lsrpl	r3, r3, #2
 800a770:	2001      	movmi	r0, #1
 800a772:	6013      	strmi	r3, [r2, #0]
 800a774:	bf5c      	itt	pl
 800a776:	6013      	strpl	r3, [r2, #0]
 800a778:	2002      	movpl	r0, #2
 800a77a:	4770      	bx	lr
 800a77c:	b299      	uxth	r1, r3
 800a77e:	b909      	cbnz	r1, 800a784 <__lo0bits+0x2a>
 800a780:	0c1b      	lsrs	r3, r3, #16
 800a782:	2010      	movs	r0, #16
 800a784:	b2d9      	uxtb	r1, r3
 800a786:	b909      	cbnz	r1, 800a78c <__lo0bits+0x32>
 800a788:	3008      	adds	r0, #8
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	0719      	lsls	r1, r3, #28
 800a78e:	bf04      	itt	eq
 800a790:	091b      	lsreq	r3, r3, #4
 800a792:	3004      	addeq	r0, #4
 800a794:	0799      	lsls	r1, r3, #30
 800a796:	bf04      	itt	eq
 800a798:	089b      	lsreq	r3, r3, #2
 800a79a:	3002      	addeq	r0, #2
 800a79c:	07d9      	lsls	r1, r3, #31
 800a79e:	d403      	bmi.n	800a7a8 <__lo0bits+0x4e>
 800a7a0:	085b      	lsrs	r3, r3, #1
 800a7a2:	f100 0001 	add.w	r0, r0, #1
 800a7a6:	d003      	beq.n	800a7b0 <__lo0bits+0x56>
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4770      	bx	lr
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr
 800a7b0:	2020      	movs	r0, #32
 800a7b2:	4770      	bx	lr

0800a7b4 <__i2b>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff febd 	bl	800a538 <_Balloc>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__i2b+0x1a>
 800a7c2:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <__i2b+0x24>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	@ (800a7dc <__i2b+0x28>)
 800a7c6:	f240 1145 	movw	r1, #325	@ 0x145
 800a7ca:	f000 ff25 	bl	800b618 <__assert_func>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6144      	str	r4, [r0, #20]
 800a7d2:	6103      	str	r3, [r0, #16]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800c09a 	.word	0x0800c09a
 800a7dc:	0800c122 	.word	0x0800c122

0800a7e0 <__multiply>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4617      	mov	r7, r2
 800a7e6:	690a      	ldr	r2, [r1, #16]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	bfa8      	it	ge
 800a7ee:	463b      	movge	r3, r7
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	bfa4      	itt	ge
 800a7f4:	460f      	movge	r7, r1
 800a7f6:	4699      	movge	r9, r3
 800a7f8:	693d      	ldr	r5, [r7, #16]
 800a7fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	6879      	ldr	r1, [r7, #4]
 800a802:	eb05 060a 	add.w	r6, r5, sl
 800a806:	42b3      	cmp	r3, r6
 800a808:	b085      	sub	sp, #20
 800a80a:	bfb8      	it	lt
 800a80c:	3101      	addlt	r1, #1
 800a80e:	f7ff fe93 	bl	800a538 <_Balloc>
 800a812:	b930      	cbnz	r0, 800a822 <__multiply+0x42>
 800a814:	4602      	mov	r2, r0
 800a816:	4b41      	ldr	r3, [pc, #260]	@ (800a91c <__multiply+0x13c>)
 800a818:	4841      	ldr	r0, [pc, #260]	@ (800a920 <__multiply+0x140>)
 800a81a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a81e:	f000 fefb 	bl	800b618 <__assert_func>
 800a822:	f100 0414 	add.w	r4, r0, #20
 800a826:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a82a:	4623      	mov	r3, r4
 800a82c:	2200      	movs	r2, #0
 800a82e:	4573      	cmp	r3, lr
 800a830:	d320      	bcc.n	800a874 <__multiply+0x94>
 800a832:	f107 0814 	add.w	r8, r7, #20
 800a836:	f109 0114 	add.w	r1, r9, #20
 800a83a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a83e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	1beb      	subs	r3, r5, r7
 800a846:	3b15      	subs	r3, #21
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	3304      	adds	r3, #4
 800a84e:	3715      	adds	r7, #21
 800a850:	42bd      	cmp	r5, r7
 800a852:	bf38      	it	cc
 800a854:	2304      	movcc	r3, #4
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	9b02      	ldr	r3, [sp, #8]
 800a85a:	9103      	str	r1, [sp, #12]
 800a85c:	428b      	cmp	r3, r1
 800a85e:	d80c      	bhi.n	800a87a <__multiply+0x9a>
 800a860:	2e00      	cmp	r6, #0
 800a862:	dd03      	ble.n	800a86c <__multiply+0x8c>
 800a864:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d055      	beq.n	800a918 <__multiply+0x138>
 800a86c:	6106      	str	r6, [r0, #16]
 800a86e:	b005      	add	sp, #20
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	f843 2b04 	str.w	r2, [r3], #4
 800a878:	e7d9      	b.n	800a82e <__multiply+0x4e>
 800a87a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d01f      	beq.n	800a8c4 <__multiply+0xe4>
 800a884:	46c4      	mov	ip, r8
 800a886:	46a1      	mov	r9, r4
 800a888:	2700      	movs	r7, #0
 800a88a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a88e:	f8d9 3000 	ldr.w	r3, [r9]
 800a892:	fa1f fb82 	uxth.w	fp, r2
 800a896:	b29b      	uxth	r3, r3
 800a898:	fb0a 330b 	mla	r3, sl, fp, r3
 800a89c:	443b      	add	r3, r7
 800a89e:	f8d9 7000 	ldr.w	r7, [r9]
 800a8a2:	0c12      	lsrs	r2, r2, #16
 800a8a4:	0c3f      	lsrs	r7, r7, #16
 800a8a6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8b4:	4565      	cmp	r5, ip
 800a8b6:	f849 3b04 	str.w	r3, [r9], #4
 800a8ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a8be:	d8e4      	bhi.n	800a88a <__multiply+0xaa>
 800a8c0:	9b01      	ldr	r3, [sp, #4]
 800a8c2:	50e7      	str	r7, [r4, r3]
 800a8c4:	9b03      	ldr	r3, [sp, #12]
 800a8c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8ca:	3104      	adds	r1, #4
 800a8cc:	f1b9 0f00 	cmp.w	r9, #0
 800a8d0:	d020      	beq.n	800a914 <__multiply+0x134>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	4647      	mov	r7, r8
 800a8d6:	46a4      	mov	ip, r4
 800a8d8:	f04f 0a00 	mov.w	sl, #0
 800a8dc:	f8b7 b000 	ldrh.w	fp, [r7]
 800a8e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a8e4:	fb09 220b 	mla	r2, r9, fp, r2
 800a8e8:	4452      	add	r2, sl
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f0:	f84c 3b04 	str.w	r3, [ip], #4
 800a8f4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a8f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8fc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a900:	fb09 330a 	mla	r3, r9, sl, r3
 800a904:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a908:	42bd      	cmp	r5, r7
 800a90a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a90e:	d8e5      	bhi.n	800a8dc <__multiply+0xfc>
 800a910:	9a01      	ldr	r2, [sp, #4]
 800a912:	50a3      	str	r3, [r4, r2]
 800a914:	3404      	adds	r4, #4
 800a916:	e79f      	b.n	800a858 <__multiply+0x78>
 800a918:	3e01      	subs	r6, #1
 800a91a:	e7a1      	b.n	800a860 <__multiply+0x80>
 800a91c:	0800c09a 	.word	0x0800c09a
 800a920:	0800c122 	.word	0x0800c122

0800a924 <__pow5mult>:
 800a924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a928:	4615      	mov	r5, r2
 800a92a:	f012 0203 	ands.w	r2, r2, #3
 800a92e:	4607      	mov	r7, r0
 800a930:	460e      	mov	r6, r1
 800a932:	d007      	beq.n	800a944 <__pow5mult+0x20>
 800a934:	4c25      	ldr	r4, [pc, #148]	@ (800a9cc <__pow5mult+0xa8>)
 800a936:	3a01      	subs	r2, #1
 800a938:	2300      	movs	r3, #0
 800a93a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a93e:	f7ff fe5d 	bl	800a5fc <__multadd>
 800a942:	4606      	mov	r6, r0
 800a944:	10ad      	asrs	r5, r5, #2
 800a946:	d03d      	beq.n	800a9c4 <__pow5mult+0xa0>
 800a948:	69fc      	ldr	r4, [r7, #28]
 800a94a:	b97c      	cbnz	r4, 800a96c <__pow5mult+0x48>
 800a94c:	2010      	movs	r0, #16
 800a94e:	f000 fe95 	bl	800b67c <malloc>
 800a952:	4602      	mov	r2, r0
 800a954:	61f8      	str	r0, [r7, #28]
 800a956:	b928      	cbnz	r0, 800a964 <__pow5mult+0x40>
 800a958:	4b1d      	ldr	r3, [pc, #116]	@ (800a9d0 <__pow5mult+0xac>)
 800a95a:	481e      	ldr	r0, [pc, #120]	@ (800a9d4 <__pow5mult+0xb0>)
 800a95c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a960:	f000 fe5a 	bl	800b618 <__assert_func>
 800a964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a968:	6004      	str	r4, [r0, #0]
 800a96a:	60c4      	str	r4, [r0, #12]
 800a96c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a974:	b94c      	cbnz	r4, 800a98a <__pow5mult+0x66>
 800a976:	f240 2171 	movw	r1, #625	@ 0x271
 800a97a:	4638      	mov	r0, r7
 800a97c:	f7ff ff1a 	bl	800a7b4 <__i2b>
 800a980:	2300      	movs	r3, #0
 800a982:	f8c8 0008 	str.w	r0, [r8, #8]
 800a986:	4604      	mov	r4, r0
 800a988:	6003      	str	r3, [r0, #0]
 800a98a:	f04f 0900 	mov.w	r9, #0
 800a98e:	07eb      	lsls	r3, r5, #31
 800a990:	d50a      	bpl.n	800a9a8 <__pow5mult+0x84>
 800a992:	4631      	mov	r1, r6
 800a994:	4622      	mov	r2, r4
 800a996:	4638      	mov	r0, r7
 800a998:	f7ff ff22 	bl	800a7e0 <__multiply>
 800a99c:	4631      	mov	r1, r6
 800a99e:	4680      	mov	r8, r0
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff fe09 	bl	800a5b8 <_Bfree>
 800a9a6:	4646      	mov	r6, r8
 800a9a8:	106d      	asrs	r5, r5, #1
 800a9aa:	d00b      	beq.n	800a9c4 <__pow5mult+0xa0>
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	b938      	cbnz	r0, 800a9c0 <__pow5mult+0x9c>
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4638      	mov	r0, r7
 800a9b6:	f7ff ff13 	bl	800a7e0 <__multiply>
 800a9ba:	6020      	str	r0, [r4, #0]
 800a9bc:	f8c0 9000 	str.w	r9, [r0]
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	e7e4      	b.n	800a98e <__pow5mult+0x6a>
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0800c344 	.word	0x0800c344
 800a9d0:	0800c10b 	.word	0x0800c10b
 800a9d4:	0800c122 	.word	0x0800c122

0800a9d8 <__lshift>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	6849      	ldr	r1, [r1, #4]
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	4691      	mov	r9, r2
 800a9ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9f0:	f108 0601 	add.w	r6, r8, #1
 800a9f4:	42b3      	cmp	r3, r6
 800a9f6:	db0b      	blt.n	800aa10 <__lshift+0x38>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	f7ff fd9d 	bl	800a538 <_Balloc>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b948      	cbnz	r0, 800aa16 <__lshift+0x3e>
 800aa02:	4602      	mov	r2, r0
 800aa04:	4b28      	ldr	r3, [pc, #160]	@ (800aaa8 <__lshift+0xd0>)
 800aa06:	4829      	ldr	r0, [pc, #164]	@ (800aaac <__lshift+0xd4>)
 800aa08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa0c:	f000 fe04 	bl	800b618 <__assert_func>
 800aa10:	3101      	adds	r1, #1
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	e7ee      	b.n	800a9f4 <__lshift+0x1c>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f100 0114 	add.w	r1, r0, #20
 800aa1c:	f100 0210 	add.w	r2, r0, #16
 800aa20:	4618      	mov	r0, r3
 800aa22:	4553      	cmp	r3, sl
 800aa24:	db33      	blt.n	800aa8e <__lshift+0xb6>
 800aa26:	6920      	ldr	r0, [r4, #16]
 800aa28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa2c:	f104 0314 	add.w	r3, r4, #20
 800aa30:	f019 091f 	ands.w	r9, r9, #31
 800aa34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa3c:	d02b      	beq.n	800aa96 <__lshift+0xbe>
 800aa3e:	f1c9 0e20 	rsb	lr, r9, #32
 800aa42:	468a      	mov	sl, r1
 800aa44:	2200      	movs	r2, #0
 800aa46:	6818      	ldr	r0, [r3, #0]
 800aa48:	fa00 f009 	lsl.w	r0, r0, r9
 800aa4c:	4310      	orrs	r0, r2
 800aa4e:	f84a 0b04 	str.w	r0, [sl], #4
 800aa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa56:	459c      	cmp	ip, r3
 800aa58:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa5c:	d8f3      	bhi.n	800aa46 <__lshift+0x6e>
 800aa5e:	ebac 0304 	sub.w	r3, ip, r4
 800aa62:	3b15      	subs	r3, #21
 800aa64:	f023 0303 	bic.w	r3, r3, #3
 800aa68:	3304      	adds	r3, #4
 800aa6a:	f104 0015 	add.w	r0, r4, #21
 800aa6e:	4560      	cmp	r0, ip
 800aa70:	bf88      	it	hi
 800aa72:	2304      	movhi	r3, #4
 800aa74:	50ca      	str	r2, [r1, r3]
 800aa76:	b10a      	cbz	r2, 800aa7c <__lshift+0xa4>
 800aa78:	f108 0602 	add.w	r6, r8, #2
 800aa7c:	3e01      	subs	r6, #1
 800aa7e:	4638      	mov	r0, r7
 800aa80:	612e      	str	r6, [r5, #16]
 800aa82:	4621      	mov	r1, r4
 800aa84:	f7ff fd98 	bl	800a5b8 <_Bfree>
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa92:	3301      	adds	r3, #1
 800aa94:	e7c5      	b.n	800aa22 <__lshift+0x4a>
 800aa96:	3904      	subs	r1, #4
 800aa98:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaa0:	459c      	cmp	ip, r3
 800aaa2:	d8f9      	bhi.n	800aa98 <__lshift+0xc0>
 800aaa4:	e7ea      	b.n	800aa7c <__lshift+0xa4>
 800aaa6:	bf00      	nop
 800aaa8:	0800c09a 	.word	0x0800c09a
 800aaac:	0800c122 	.word	0x0800c122

0800aab0 <__mcmp>:
 800aab0:	690a      	ldr	r2, [r1, #16]
 800aab2:	4603      	mov	r3, r0
 800aab4:	6900      	ldr	r0, [r0, #16]
 800aab6:	1a80      	subs	r0, r0, r2
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	d10e      	bne.n	800aada <__mcmp+0x2a>
 800aabc:	3314      	adds	r3, #20
 800aabe:	3114      	adds	r1, #20
 800aac0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aac4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aac8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aacc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aad0:	4295      	cmp	r5, r2
 800aad2:	d003      	beq.n	800aadc <__mcmp+0x2c>
 800aad4:	d205      	bcs.n	800aae2 <__mcmp+0x32>
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	42a3      	cmp	r3, r4
 800aade:	d3f3      	bcc.n	800aac8 <__mcmp+0x18>
 800aae0:	e7fb      	b.n	800aada <__mcmp+0x2a>
 800aae2:	2001      	movs	r0, #1
 800aae4:	e7f9      	b.n	800aada <__mcmp+0x2a>
	...

0800aae8 <__mdiff>:
 800aae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	4689      	mov	r9, r1
 800aaee:	4606      	mov	r6, r0
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4648      	mov	r0, r9
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	f7ff ffdb 	bl	800aab0 <__mcmp>
 800aafa:	1e05      	subs	r5, r0, #0
 800aafc:	d112      	bne.n	800ab24 <__mdiff+0x3c>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff fd19 	bl	800a538 <_Balloc>
 800ab06:	4602      	mov	r2, r0
 800ab08:	b928      	cbnz	r0, 800ab16 <__mdiff+0x2e>
 800ab0a:	4b3f      	ldr	r3, [pc, #252]	@ (800ac08 <__mdiff+0x120>)
 800ab0c:	f240 2137 	movw	r1, #567	@ 0x237
 800ab10:	483e      	ldr	r0, [pc, #248]	@ (800ac0c <__mdiff+0x124>)
 800ab12:	f000 fd81 	bl	800b618 <__assert_func>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	b003      	add	sp, #12
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	bfbc      	itt	lt
 800ab26:	464b      	movlt	r3, r9
 800ab28:	46a1      	movlt	r9, r4
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab30:	bfba      	itte	lt
 800ab32:	461c      	movlt	r4, r3
 800ab34:	2501      	movlt	r5, #1
 800ab36:	2500      	movge	r5, #0
 800ab38:	f7ff fcfe 	bl	800a538 <_Balloc>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	b918      	cbnz	r0, 800ab48 <__mdiff+0x60>
 800ab40:	4b31      	ldr	r3, [pc, #196]	@ (800ac08 <__mdiff+0x120>)
 800ab42:	f240 2145 	movw	r1, #581	@ 0x245
 800ab46:	e7e3      	b.n	800ab10 <__mdiff+0x28>
 800ab48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab4c:	6926      	ldr	r6, [r4, #16]
 800ab4e:	60c5      	str	r5, [r0, #12]
 800ab50:	f109 0310 	add.w	r3, r9, #16
 800ab54:	f109 0514 	add.w	r5, r9, #20
 800ab58:	f104 0e14 	add.w	lr, r4, #20
 800ab5c:	f100 0b14 	add.w	fp, r0, #20
 800ab60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	46d9      	mov	r9, fp
 800ab6c:	f04f 0c00 	mov.w	ip, #0
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab76:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	fa1f f38a 	uxth.w	r3, sl
 800ab80:	4619      	mov	r1, r3
 800ab82:	b283      	uxth	r3, r0
 800ab84:	1acb      	subs	r3, r1, r3
 800ab86:	0c00      	lsrs	r0, r0, #16
 800ab88:	4463      	add	r3, ip
 800ab8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab98:	4576      	cmp	r6, lr
 800ab9a:	f849 3b04 	str.w	r3, [r9], #4
 800ab9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aba2:	d8e5      	bhi.n	800ab70 <__mdiff+0x88>
 800aba4:	1b33      	subs	r3, r6, r4
 800aba6:	3b15      	subs	r3, #21
 800aba8:	f023 0303 	bic.w	r3, r3, #3
 800abac:	3415      	adds	r4, #21
 800abae:	3304      	adds	r3, #4
 800abb0:	42a6      	cmp	r6, r4
 800abb2:	bf38      	it	cc
 800abb4:	2304      	movcc	r3, #4
 800abb6:	441d      	add	r5, r3
 800abb8:	445b      	add	r3, fp
 800abba:	461e      	mov	r6, r3
 800abbc:	462c      	mov	r4, r5
 800abbe:	4544      	cmp	r4, r8
 800abc0:	d30e      	bcc.n	800abe0 <__mdiff+0xf8>
 800abc2:	f108 0103 	add.w	r1, r8, #3
 800abc6:	1b49      	subs	r1, r1, r5
 800abc8:	f021 0103 	bic.w	r1, r1, #3
 800abcc:	3d03      	subs	r5, #3
 800abce:	45a8      	cmp	r8, r5
 800abd0:	bf38      	it	cc
 800abd2:	2100      	movcc	r1, #0
 800abd4:	440b      	add	r3, r1
 800abd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abda:	b191      	cbz	r1, 800ac02 <__mdiff+0x11a>
 800abdc:	6117      	str	r7, [r2, #16]
 800abde:	e79d      	b.n	800ab1c <__mdiff+0x34>
 800abe0:	f854 1b04 	ldr.w	r1, [r4], #4
 800abe4:	46e6      	mov	lr, ip
 800abe6:	0c08      	lsrs	r0, r1, #16
 800abe8:	fa1c fc81 	uxtah	ip, ip, r1
 800abec:	4471      	add	r1, lr
 800abee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800abf2:	b289      	uxth	r1, r1
 800abf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800abf8:	f846 1b04 	str.w	r1, [r6], #4
 800abfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac00:	e7dd      	b.n	800abbe <__mdiff+0xd6>
 800ac02:	3f01      	subs	r7, #1
 800ac04:	e7e7      	b.n	800abd6 <__mdiff+0xee>
 800ac06:	bf00      	nop
 800ac08:	0800c09a 	.word	0x0800c09a
 800ac0c:	0800c122 	.word	0x0800c122

0800ac10 <__ulp>:
 800ac10:	b082      	sub	sp, #8
 800ac12:	ed8d 0b00 	vstr	d0, [sp]
 800ac16:	9a01      	ldr	r2, [sp, #4]
 800ac18:	4b0f      	ldr	r3, [pc, #60]	@ (800ac58 <__ulp+0x48>)
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dc08      	bgt.n	800ac36 <__ulp+0x26>
 800ac24:	425b      	negs	r3, r3
 800ac26:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ac2a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac2e:	da04      	bge.n	800ac3a <__ulp+0x2a>
 800ac30:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ac34:	4113      	asrs	r3, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	e008      	b.n	800ac4c <__ulp+0x3c>
 800ac3a:	f1a2 0314 	sub.w	r3, r2, #20
 800ac3e:	2b1e      	cmp	r3, #30
 800ac40:	bfda      	itte	le
 800ac42:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ac46:	40da      	lsrle	r2, r3
 800ac48:	2201      	movgt	r2, #1
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	ec41 0b10 	vmov	d0, r0, r1
 800ac54:	b002      	add	sp, #8
 800ac56:	4770      	bx	lr
 800ac58:	7ff00000 	.word	0x7ff00000

0800ac5c <__b2d>:
 800ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac60:	6906      	ldr	r6, [r0, #16]
 800ac62:	f100 0814 	add.w	r8, r0, #20
 800ac66:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac6a:	1f37      	subs	r7, r6, #4
 800ac6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7ff fd53 	bl	800a71c <__hi0bits>
 800ac76:	f1c0 0320 	rsb	r3, r0, #32
 800ac7a:	280a      	cmp	r0, #10
 800ac7c:	600b      	str	r3, [r1, #0]
 800ac7e:	491b      	ldr	r1, [pc, #108]	@ (800acec <__b2d+0x90>)
 800ac80:	dc15      	bgt.n	800acae <__b2d+0x52>
 800ac82:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac86:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac8a:	45b8      	cmp	r8, r7
 800ac8c:	ea43 0501 	orr.w	r5, r3, r1
 800ac90:	bf34      	ite	cc
 800ac92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac96:	2300      	movcs	r3, #0
 800ac98:	3015      	adds	r0, #21
 800ac9a:	fa02 f000 	lsl.w	r0, r2, r0
 800ac9e:	fa23 f30c 	lsr.w	r3, r3, ip
 800aca2:	4303      	orrs	r3, r0
 800aca4:	461c      	mov	r4, r3
 800aca6:	ec45 4b10 	vmov	d0, r4, r5
 800acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acae:	45b8      	cmp	r8, r7
 800acb0:	bf3a      	itte	cc
 800acb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800acb6:	f1a6 0708 	subcc.w	r7, r6, #8
 800acba:	2300      	movcs	r3, #0
 800acbc:	380b      	subs	r0, #11
 800acbe:	d012      	beq.n	800ace6 <__b2d+0x8a>
 800acc0:	f1c0 0120 	rsb	r1, r0, #32
 800acc4:	fa23 f401 	lsr.w	r4, r3, r1
 800acc8:	4082      	lsls	r2, r0
 800acca:	4322      	orrs	r2, r4
 800accc:	4547      	cmp	r7, r8
 800acce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800acd2:	bf8c      	ite	hi
 800acd4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800acd8:	2200      	movls	r2, #0
 800acda:	4083      	lsls	r3, r0
 800acdc:	40ca      	lsrs	r2, r1
 800acde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ace2:	4313      	orrs	r3, r2
 800ace4:	e7de      	b.n	800aca4 <__b2d+0x48>
 800ace6:	ea42 0501 	orr.w	r5, r2, r1
 800acea:	e7db      	b.n	800aca4 <__b2d+0x48>
 800acec:	3ff00000 	.word	0x3ff00000

0800acf0 <__d2b>:
 800acf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	460f      	mov	r7, r1
 800acf6:	2101      	movs	r1, #1
 800acf8:	ec59 8b10 	vmov	r8, r9, d0
 800acfc:	4616      	mov	r6, r2
 800acfe:	f7ff fc1b 	bl	800a538 <_Balloc>
 800ad02:	4604      	mov	r4, r0
 800ad04:	b930      	cbnz	r0, 800ad14 <__d2b+0x24>
 800ad06:	4602      	mov	r2, r0
 800ad08:	4b23      	ldr	r3, [pc, #140]	@ (800ad98 <__d2b+0xa8>)
 800ad0a:	4824      	ldr	r0, [pc, #144]	@ (800ad9c <__d2b+0xac>)
 800ad0c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad10:	f000 fc82 	bl	800b618 <__assert_func>
 800ad14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad1c:	b10d      	cbz	r5, 800ad22 <__d2b+0x32>
 800ad1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad22:	9301      	str	r3, [sp, #4]
 800ad24:	f1b8 0300 	subs.w	r3, r8, #0
 800ad28:	d023      	beq.n	800ad72 <__d2b+0x82>
 800ad2a:	4668      	mov	r0, sp
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	f7ff fd14 	bl	800a75a <__lo0bits>
 800ad32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad36:	b1d0      	cbz	r0, 800ad6e <__d2b+0x7e>
 800ad38:	f1c0 0320 	rsb	r3, r0, #32
 800ad3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad40:	430b      	orrs	r3, r1
 800ad42:	40c2      	lsrs	r2, r0
 800ad44:	6163      	str	r3, [r4, #20]
 800ad46:	9201      	str	r2, [sp, #4]
 800ad48:	9b01      	ldr	r3, [sp, #4]
 800ad4a:	61a3      	str	r3, [r4, #24]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bf0c      	ite	eq
 800ad50:	2201      	moveq	r2, #1
 800ad52:	2202      	movne	r2, #2
 800ad54:	6122      	str	r2, [r4, #16]
 800ad56:	b1a5      	cbz	r5, 800ad82 <__d2b+0x92>
 800ad58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad5c:	4405      	add	r5, r0
 800ad5e:	603d      	str	r5, [r7, #0]
 800ad60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad64:	6030      	str	r0, [r6, #0]
 800ad66:	4620      	mov	r0, r4
 800ad68:	b003      	add	sp, #12
 800ad6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad6e:	6161      	str	r1, [r4, #20]
 800ad70:	e7ea      	b.n	800ad48 <__d2b+0x58>
 800ad72:	a801      	add	r0, sp, #4
 800ad74:	f7ff fcf1 	bl	800a75a <__lo0bits>
 800ad78:	9b01      	ldr	r3, [sp, #4]
 800ad7a:	6163      	str	r3, [r4, #20]
 800ad7c:	3020      	adds	r0, #32
 800ad7e:	2201      	movs	r2, #1
 800ad80:	e7e8      	b.n	800ad54 <__d2b+0x64>
 800ad82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad8a:	6038      	str	r0, [r7, #0]
 800ad8c:	6918      	ldr	r0, [r3, #16]
 800ad8e:	f7ff fcc5 	bl	800a71c <__hi0bits>
 800ad92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad96:	e7e5      	b.n	800ad64 <__d2b+0x74>
 800ad98:	0800c09a 	.word	0x0800c09a
 800ad9c:	0800c122 	.word	0x0800c122

0800ada0 <__ratio>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	b085      	sub	sp, #20
 800ada6:	e9cd 1000 	strd	r1, r0, [sp]
 800adaa:	a902      	add	r1, sp, #8
 800adac:	f7ff ff56 	bl	800ac5c <__b2d>
 800adb0:	9800      	ldr	r0, [sp, #0]
 800adb2:	a903      	add	r1, sp, #12
 800adb4:	ec55 4b10 	vmov	r4, r5, d0
 800adb8:	f7ff ff50 	bl	800ac5c <__b2d>
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	6919      	ldr	r1, [r3, #16]
 800adc0:	9b00      	ldr	r3, [sp, #0]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	1ac9      	subs	r1, r1, r3
 800adc6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800adca:	1a9b      	subs	r3, r3, r2
 800adcc:	ec5b ab10 	vmov	sl, fp, d0
 800add0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800add4:	2b00      	cmp	r3, #0
 800add6:	bfce      	itee	gt
 800add8:	462a      	movgt	r2, r5
 800adda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adde:	465a      	movle	r2, fp
 800ade0:	462f      	mov	r7, r5
 800ade2:	46d9      	mov	r9, fp
 800ade4:	bfcc      	ite	gt
 800ade6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800adee:	464b      	mov	r3, r9
 800adf0:	4652      	mov	r2, sl
 800adf2:	4620      	mov	r0, r4
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 fd39 	bl	800086c <__aeabi_ddiv>
 800adfa:	ec41 0b10 	vmov	d0, r0, r1
 800adfe:	b005      	add	sp, #20
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae04 <__copybits>:
 800ae04:	3901      	subs	r1, #1
 800ae06:	b570      	push	{r4, r5, r6, lr}
 800ae08:	1149      	asrs	r1, r1, #5
 800ae0a:	6914      	ldr	r4, [r2, #16]
 800ae0c:	3101      	adds	r1, #1
 800ae0e:	f102 0314 	add.w	r3, r2, #20
 800ae12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae1a:	1f05      	subs	r5, r0, #4
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	d30c      	bcc.n	800ae3a <__copybits+0x36>
 800ae20:	1aa3      	subs	r3, r4, r2
 800ae22:	3b11      	subs	r3, #17
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	3211      	adds	r2, #17
 800ae2a:	42a2      	cmp	r2, r4
 800ae2c:	bf88      	it	hi
 800ae2e:	2300      	movhi	r3, #0
 800ae30:	4418      	add	r0, r3
 800ae32:	2300      	movs	r3, #0
 800ae34:	4288      	cmp	r0, r1
 800ae36:	d305      	bcc.n	800ae44 <__copybits+0x40>
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
 800ae3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae42:	e7eb      	b.n	800ae1c <__copybits+0x18>
 800ae44:	f840 3b04 	str.w	r3, [r0], #4
 800ae48:	e7f4      	b.n	800ae34 <__copybits+0x30>

0800ae4a <__any_on>:
 800ae4a:	f100 0214 	add.w	r2, r0, #20
 800ae4e:	6900      	ldr	r0, [r0, #16]
 800ae50:	114b      	asrs	r3, r1, #5
 800ae52:	4298      	cmp	r0, r3
 800ae54:	b510      	push	{r4, lr}
 800ae56:	db11      	blt.n	800ae7c <__any_on+0x32>
 800ae58:	dd0a      	ble.n	800ae70 <__any_on+0x26>
 800ae5a:	f011 011f 	ands.w	r1, r1, #31
 800ae5e:	d007      	beq.n	800ae70 <__any_on+0x26>
 800ae60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae64:	fa24 f001 	lsr.w	r0, r4, r1
 800ae68:	fa00 f101 	lsl.w	r1, r0, r1
 800ae6c:	428c      	cmp	r4, r1
 800ae6e:	d10b      	bne.n	800ae88 <__any_on+0x3e>
 800ae70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d803      	bhi.n	800ae80 <__any_on+0x36>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	bd10      	pop	{r4, pc}
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	e7f7      	b.n	800ae70 <__any_on+0x26>
 800ae80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae84:	2900      	cmp	r1, #0
 800ae86:	d0f5      	beq.n	800ae74 <__any_on+0x2a>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e7f6      	b.n	800ae7a <__any_on+0x30>

0800ae8c <__ascii_wctomb>:
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	4608      	mov	r0, r1
 800ae90:	b141      	cbz	r1, 800aea4 <__ascii_wctomb+0x18>
 800ae92:	2aff      	cmp	r2, #255	@ 0xff
 800ae94:	d904      	bls.n	800aea0 <__ascii_wctomb+0x14>
 800ae96:	228a      	movs	r2, #138	@ 0x8a
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	4770      	bx	lr
 800aea0:	700a      	strb	r2, [r1, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	4770      	bx	lr

0800aea6 <__ssputs_r>:
 800aea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeaa:	688e      	ldr	r6, [r1, #8]
 800aeac:	461f      	mov	r7, r3
 800aeae:	42be      	cmp	r6, r7
 800aeb0:	680b      	ldr	r3, [r1, #0]
 800aeb2:	4682      	mov	sl, r0
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	4690      	mov	r8, r2
 800aeb8:	d82d      	bhi.n	800af16 <__ssputs_r+0x70>
 800aeba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aebe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aec2:	d026      	beq.n	800af12 <__ssputs_r+0x6c>
 800aec4:	6965      	ldr	r5, [r4, #20]
 800aec6:	6909      	ldr	r1, [r1, #16]
 800aec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aecc:	eba3 0901 	sub.w	r9, r3, r1
 800aed0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aed4:	1c7b      	adds	r3, r7, #1
 800aed6:	444b      	add	r3, r9
 800aed8:	106d      	asrs	r5, r5, #1
 800aeda:	429d      	cmp	r5, r3
 800aedc:	bf38      	it	cc
 800aede:	461d      	movcc	r5, r3
 800aee0:	0553      	lsls	r3, r2, #21
 800aee2:	d527      	bpl.n	800af34 <__ssputs_r+0x8e>
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7ff fa89 	bl	800a3fc <_malloc_r>
 800aeea:	4606      	mov	r6, r0
 800aeec:	b360      	cbz	r0, 800af48 <__ssputs_r+0xa2>
 800aeee:	6921      	ldr	r1, [r4, #16]
 800aef0:	464a      	mov	r2, r9
 800aef2:	f7fe fec4 	bl	8009c7e <memcpy>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aefc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	6126      	str	r6, [r4, #16]
 800af04:	6165      	str	r5, [r4, #20]
 800af06:	444e      	add	r6, r9
 800af08:	eba5 0509 	sub.w	r5, r5, r9
 800af0c:	6026      	str	r6, [r4, #0]
 800af0e:	60a5      	str	r5, [r4, #8]
 800af10:	463e      	mov	r6, r7
 800af12:	42be      	cmp	r6, r7
 800af14:	d900      	bls.n	800af18 <__ssputs_r+0x72>
 800af16:	463e      	mov	r6, r7
 800af18:	6820      	ldr	r0, [r4, #0]
 800af1a:	4632      	mov	r2, r6
 800af1c:	4641      	mov	r1, r8
 800af1e:	f000 fb51 	bl	800b5c4 <memmove>
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	1b9b      	subs	r3, r3, r6
 800af26:	60a3      	str	r3, [r4, #8]
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	4433      	add	r3, r6
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	2000      	movs	r0, #0
 800af30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af34:	462a      	mov	r2, r5
 800af36:	f000 fba9 	bl	800b68c <_realloc_r>
 800af3a:	4606      	mov	r6, r0
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d1e0      	bne.n	800af02 <__ssputs_r+0x5c>
 800af40:	6921      	ldr	r1, [r4, #16]
 800af42:	4650      	mov	r0, sl
 800af44:	f7fe feb4 	bl	8009cb0 <_free_r>
 800af48:	230c      	movs	r3, #12
 800af4a:	f8ca 3000 	str.w	r3, [sl]
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af54:	81a3      	strh	r3, [r4, #12]
 800af56:	f04f 30ff 	mov.w	r0, #4294967295
 800af5a:	e7e9      	b.n	800af30 <__ssputs_r+0x8a>

0800af5c <_svfiprintf_r>:
 800af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af60:	4698      	mov	r8, r3
 800af62:	898b      	ldrh	r3, [r1, #12]
 800af64:	061b      	lsls	r3, r3, #24
 800af66:	b09d      	sub	sp, #116	@ 0x74
 800af68:	4607      	mov	r7, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	4614      	mov	r4, r2
 800af6e:	d510      	bpl.n	800af92 <_svfiprintf_r+0x36>
 800af70:	690b      	ldr	r3, [r1, #16]
 800af72:	b973      	cbnz	r3, 800af92 <_svfiprintf_r+0x36>
 800af74:	2140      	movs	r1, #64	@ 0x40
 800af76:	f7ff fa41 	bl	800a3fc <_malloc_r>
 800af7a:	6028      	str	r0, [r5, #0]
 800af7c:	6128      	str	r0, [r5, #16]
 800af7e:	b930      	cbnz	r0, 800af8e <_svfiprintf_r+0x32>
 800af80:	230c      	movs	r3, #12
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	f04f 30ff 	mov.w	r0, #4294967295
 800af88:	b01d      	add	sp, #116	@ 0x74
 800af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8e:	2340      	movs	r3, #64	@ 0x40
 800af90:	616b      	str	r3, [r5, #20]
 800af92:	2300      	movs	r3, #0
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	2320      	movs	r3, #32
 800af98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa0:	2330      	movs	r3, #48	@ 0x30
 800afa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b140 <_svfiprintf_r+0x1e4>
 800afa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afaa:	f04f 0901 	mov.w	r9, #1
 800afae:	4623      	mov	r3, r4
 800afb0:	469a      	mov	sl, r3
 800afb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb6:	b10a      	cbz	r2, 800afbc <_svfiprintf_r+0x60>
 800afb8:	2a25      	cmp	r2, #37	@ 0x25
 800afba:	d1f9      	bne.n	800afb0 <_svfiprintf_r+0x54>
 800afbc:	ebba 0b04 	subs.w	fp, sl, r4
 800afc0:	d00b      	beq.n	800afda <_svfiprintf_r+0x7e>
 800afc2:	465b      	mov	r3, fp
 800afc4:	4622      	mov	r2, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff ff6c 	bl	800aea6 <__ssputs_r>
 800afce:	3001      	adds	r0, #1
 800afd0:	f000 80a7 	beq.w	800b122 <_svfiprintf_r+0x1c6>
 800afd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd6:	445a      	add	r2, fp
 800afd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800afda:	f89a 3000 	ldrb.w	r3, [sl]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 809f 	beq.w	800b122 <_svfiprintf_r+0x1c6>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afee:	f10a 0a01 	add.w	sl, sl, #1
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	9307      	str	r3, [sp, #28]
 800aff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800affa:	931a      	str	r3, [sp, #104]	@ 0x68
 800affc:	4654      	mov	r4, sl
 800affe:	2205      	movs	r2, #5
 800b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b004:	484e      	ldr	r0, [pc, #312]	@ (800b140 <_svfiprintf_r+0x1e4>)
 800b006:	f7f5 f8fb 	bl	8000200 <memchr>
 800b00a:	9a04      	ldr	r2, [sp, #16]
 800b00c:	b9d8      	cbnz	r0, 800b046 <_svfiprintf_r+0xea>
 800b00e:	06d0      	lsls	r0, r2, #27
 800b010:	bf44      	itt	mi
 800b012:	2320      	movmi	r3, #32
 800b014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b018:	0711      	lsls	r1, r2, #28
 800b01a:	bf44      	itt	mi
 800b01c:	232b      	movmi	r3, #43	@ 0x2b
 800b01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b022:	f89a 3000 	ldrb.w	r3, [sl]
 800b026:	2b2a      	cmp	r3, #42	@ 0x2a
 800b028:	d015      	beq.n	800b056 <_svfiprintf_r+0xfa>
 800b02a:	9a07      	ldr	r2, [sp, #28]
 800b02c:	4654      	mov	r4, sl
 800b02e:	2000      	movs	r0, #0
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4621      	mov	r1, r4
 800b036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b03a:	3b30      	subs	r3, #48	@ 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d94b      	bls.n	800b0d8 <_svfiprintf_r+0x17c>
 800b040:	b1b0      	cbz	r0, 800b070 <_svfiprintf_r+0x114>
 800b042:	9207      	str	r2, [sp, #28]
 800b044:	e014      	b.n	800b070 <_svfiprintf_r+0x114>
 800b046:	eba0 0308 	sub.w	r3, r0, r8
 800b04a:	fa09 f303 	lsl.w	r3, r9, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	46a2      	mov	sl, r4
 800b054:	e7d2      	b.n	800affc <_svfiprintf_r+0xa0>
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	1d19      	adds	r1, r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	9103      	str	r1, [sp, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	bfbb      	ittet	lt
 800b062:	425b      	neglt	r3, r3
 800b064:	f042 0202 	orrlt.w	r2, r2, #2
 800b068:	9307      	strge	r3, [sp, #28]
 800b06a:	9307      	strlt	r3, [sp, #28]
 800b06c:	bfb8      	it	lt
 800b06e:	9204      	strlt	r2, [sp, #16]
 800b070:	7823      	ldrb	r3, [r4, #0]
 800b072:	2b2e      	cmp	r3, #46	@ 0x2e
 800b074:	d10a      	bne.n	800b08c <_svfiprintf_r+0x130>
 800b076:	7863      	ldrb	r3, [r4, #1]
 800b078:	2b2a      	cmp	r3, #42	@ 0x2a
 800b07a:	d132      	bne.n	800b0e2 <_svfiprintf_r+0x186>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	9203      	str	r2, [sp, #12]
 800b084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b088:	3402      	adds	r4, #2
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b150 <_svfiprintf_r+0x1f4>
 800b090:	7821      	ldrb	r1, [r4, #0]
 800b092:	2203      	movs	r2, #3
 800b094:	4650      	mov	r0, sl
 800b096:	f7f5 f8b3 	bl	8000200 <memchr>
 800b09a:	b138      	cbz	r0, 800b0ac <_svfiprintf_r+0x150>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	eba0 000a 	sub.w	r0, r0, sl
 800b0a2:	2240      	movs	r2, #64	@ 0x40
 800b0a4:	4082      	lsls	r2, r0
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	3401      	adds	r4, #1
 800b0aa:	9304      	str	r3, [sp, #16]
 800b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b0:	4824      	ldr	r0, [pc, #144]	@ (800b144 <_svfiprintf_r+0x1e8>)
 800b0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0b6:	2206      	movs	r2, #6
 800b0b8:	f7f5 f8a2 	bl	8000200 <memchr>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d036      	beq.n	800b12e <_svfiprintf_r+0x1d2>
 800b0c0:	4b21      	ldr	r3, [pc, #132]	@ (800b148 <_svfiprintf_r+0x1ec>)
 800b0c2:	bb1b      	cbnz	r3, 800b10c <_svfiprintf_r+0x1b0>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	3307      	adds	r3, #7
 800b0c8:	f023 0307 	bic.w	r3, r3, #7
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d2:	4433      	add	r3, r6
 800b0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d6:	e76a      	b.n	800afae <_svfiprintf_r+0x52>
 800b0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0dc:	460c      	mov	r4, r1
 800b0de:	2001      	movs	r0, #1
 800b0e0:	e7a8      	b.n	800b034 <_svfiprintf_r+0xd8>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	3401      	adds	r4, #1
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f04f 0c0a 	mov.w	ip, #10
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0f4:	3a30      	subs	r2, #48	@ 0x30
 800b0f6:	2a09      	cmp	r2, #9
 800b0f8:	d903      	bls.n	800b102 <_svfiprintf_r+0x1a6>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0c6      	beq.n	800b08c <_svfiprintf_r+0x130>
 800b0fe:	9105      	str	r1, [sp, #20]
 800b100:	e7c4      	b.n	800b08c <_svfiprintf_r+0x130>
 800b102:	fb0c 2101 	mla	r1, ip, r1, r2
 800b106:	4604      	mov	r4, r0
 800b108:	2301      	movs	r3, #1
 800b10a:	e7f0      	b.n	800b0ee <_svfiprintf_r+0x192>
 800b10c:	ab03      	add	r3, sp, #12
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	462a      	mov	r2, r5
 800b112:	4b0e      	ldr	r3, [pc, #56]	@ (800b14c <_svfiprintf_r+0x1f0>)
 800b114:	a904      	add	r1, sp, #16
 800b116:	4638      	mov	r0, r7
 800b118:	f3af 8000 	nop.w
 800b11c:	1c42      	adds	r2, r0, #1
 800b11e:	4606      	mov	r6, r0
 800b120:	d1d6      	bne.n	800b0d0 <_svfiprintf_r+0x174>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	065b      	lsls	r3, r3, #25
 800b126:	f53f af2d 	bmi.w	800af84 <_svfiprintf_r+0x28>
 800b12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b12c:	e72c      	b.n	800af88 <_svfiprintf_r+0x2c>
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	462a      	mov	r2, r5
 800b134:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <_svfiprintf_r+0x1f0>)
 800b136:	a904      	add	r1, sp, #16
 800b138:	4638      	mov	r0, r7
 800b13a:	f000 f879 	bl	800b230 <_printf_i>
 800b13e:	e7ed      	b.n	800b11c <_svfiprintf_r+0x1c0>
 800b140:	0800c17b 	.word	0x0800c17b
 800b144:	0800c185 	.word	0x0800c185
 800b148:	00000000 	.word	0x00000000
 800b14c:	0800aea7 	.word	0x0800aea7
 800b150:	0800c181 	.word	0x0800c181

0800b154 <_printf_common>:
 800b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	4616      	mov	r6, r2
 800b15a:	4698      	mov	r8, r3
 800b15c:	688a      	ldr	r2, [r1, #8]
 800b15e:	690b      	ldr	r3, [r1, #16]
 800b160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b164:	4293      	cmp	r3, r2
 800b166:	bfb8      	it	lt
 800b168:	4613      	movlt	r3, r2
 800b16a:	6033      	str	r3, [r6, #0]
 800b16c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b170:	4607      	mov	r7, r0
 800b172:	460c      	mov	r4, r1
 800b174:	b10a      	cbz	r2, 800b17a <_printf_common+0x26>
 800b176:	3301      	adds	r3, #1
 800b178:	6033      	str	r3, [r6, #0]
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	0699      	lsls	r1, r3, #26
 800b17e:	bf42      	ittt	mi
 800b180:	6833      	ldrmi	r3, [r6, #0]
 800b182:	3302      	addmi	r3, #2
 800b184:	6033      	strmi	r3, [r6, #0]
 800b186:	6825      	ldr	r5, [r4, #0]
 800b188:	f015 0506 	ands.w	r5, r5, #6
 800b18c:	d106      	bne.n	800b19c <_printf_common+0x48>
 800b18e:	f104 0a19 	add.w	sl, r4, #25
 800b192:	68e3      	ldr	r3, [r4, #12]
 800b194:	6832      	ldr	r2, [r6, #0]
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	42ab      	cmp	r3, r5
 800b19a:	dc26      	bgt.n	800b1ea <_printf_common+0x96>
 800b19c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1a0:	6822      	ldr	r2, [r4, #0]
 800b1a2:	3b00      	subs	r3, #0
 800b1a4:	bf18      	it	ne
 800b1a6:	2301      	movne	r3, #1
 800b1a8:	0692      	lsls	r2, r2, #26
 800b1aa:	d42b      	bmi.n	800b204 <_printf_common+0xb0>
 800b1ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c8      	blx	r9
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d01e      	beq.n	800b1f8 <_printf_common+0xa4>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	6922      	ldr	r2, [r4, #16]
 800b1be:	f003 0306 	and.w	r3, r3, #6
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	bf02      	ittt	eq
 800b1c6:	68e5      	ldreq	r5, [r4, #12]
 800b1c8:	6833      	ldreq	r3, [r6, #0]
 800b1ca:	1aed      	subeq	r5, r5, r3
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	bf0c      	ite	eq
 800b1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1d4:	2500      	movne	r5, #0
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	bfc4      	itt	gt
 800b1da:	1a9b      	subgt	r3, r3, r2
 800b1dc:	18ed      	addgt	r5, r5, r3
 800b1de:	2600      	movs	r6, #0
 800b1e0:	341a      	adds	r4, #26
 800b1e2:	42b5      	cmp	r5, r6
 800b1e4:	d11a      	bne.n	800b21c <_printf_common+0xc8>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	e008      	b.n	800b1fc <_printf_common+0xa8>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	47c8      	blx	r9
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d103      	bne.n	800b200 <_printf_common+0xac>
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b200:	3501      	adds	r5, #1
 800b202:	e7c6      	b.n	800b192 <_printf_common+0x3e>
 800b204:	18e1      	adds	r1, r4, r3
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	2030      	movs	r0, #48	@ 0x30
 800b20a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b20e:	4422      	add	r2, r4
 800b210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b214:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b218:	3302      	adds	r3, #2
 800b21a:	e7c7      	b.n	800b1ac <_printf_common+0x58>
 800b21c:	2301      	movs	r3, #1
 800b21e:	4622      	mov	r2, r4
 800b220:	4641      	mov	r1, r8
 800b222:	4638      	mov	r0, r7
 800b224:	47c8      	blx	r9
 800b226:	3001      	adds	r0, #1
 800b228:	d0e6      	beq.n	800b1f8 <_printf_common+0xa4>
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7d9      	b.n	800b1e2 <_printf_common+0x8e>
	...

0800b230 <_printf_i>:
 800b230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b234:	7e0f      	ldrb	r7, [r1, #24]
 800b236:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b238:	2f78      	cmp	r7, #120	@ 0x78
 800b23a:	4691      	mov	r9, r2
 800b23c:	4680      	mov	r8, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	469a      	mov	sl, r3
 800b242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b246:	d807      	bhi.n	800b258 <_printf_i+0x28>
 800b248:	2f62      	cmp	r7, #98	@ 0x62
 800b24a:	d80a      	bhi.n	800b262 <_printf_i+0x32>
 800b24c:	2f00      	cmp	r7, #0
 800b24e:	f000 80d1 	beq.w	800b3f4 <_printf_i+0x1c4>
 800b252:	2f58      	cmp	r7, #88	@ 0x58
 800b254:	f000 80b8 	beq.w	800b3c8 <_printf_i+0x198>
 800b258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b25c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b260:	e03a      	b.n	800b2d8 <_printf_i+0xa8>
 800b262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b266:	2b15      	cmp	r3, #21
 800b268:	d8f6      	bhi.n	800b258 <_printf_i+0x28>
 800b26a:	a101      	add	r1, pc, #4	@ (adr r1, 800b270 <_printf_i+0x40>)
 800b26c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b270:	0800b2c9 	.word	0x0800b2c9
 800b274:	0800b2dd 	.word	0x0800b2dd
 800b278:	0800b259 	.word	0x0800b259
 800b27c:	0800b259 	.word	0x0800b259
 800b280:	0800b259 	.word	0x0800b259
 800b284:	0800b259 	.word	0x0800b259
 800b288:	0800b2dd 	.word	0x0800b2dd
 800b28c:	0800b259 	.word	0x0800b259
 800b290:	0800b259 	.word	0x0800b259
 800b294:	0800b259 	.word	0x0800b259
 800b298:	0800b259 	.word	0x0800b259
 800b29c:	0800b3db 	.word	0x0800b3db
 800b2a0:	0800b307 	.word	0x0800b307
 800b2a4:	0800b395 	.word	0x0800b395
 800b2a8:	0800b259 	.word	0x0800b259
 800b2ac:	0800b259 	.word	0x0800b259
 800b2b0:	0800b3fd 	.word	0x0800b3fd
 800b2b4:	0800b259 	.word	0x0800b259
 800b2b8:	0800b307 	.word	0x0800b307
 800b2bc:	0800b259 	.word	0x0800b259
 800b2c0:	0800b259 	.word	0x0800b259
 800b2c4:	0800b39d 	.word	0x0800b39d
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	1d1a      	adds	r2, r3, #4
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6032      	str	r2, [r6, #0]
 800b2d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e09c      	b.n	800b416 <_printf_i+0x1e6>
 800b2dc:	6833      	ldr	r3, [r6, #0]
 800b2de:	6820      	ldr	r0, [r4, #0]
 800b2e0:	1d19      	adds	r1, r3, #4
 800b2e2:	6031      	str	r1, [r6, #0]
 800b2e4:	0606      	lsls	r6, r0, #24
 800b2e6:	d501      	bpl.n	800b2ec <_printf_i+0xbc>
 800b2e8:	681d      	ldr	r5, [r3, #0]
 800b2ea:	e003      	b.n	800b2f4 <_printf_i+0xc4>
 800b2ec:	0645      	lsls	r5, r0, #25
 800b2ee:	d5fb      	bpl.n	800b2e8 <_printf_i+0xb8>
 800b2f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	da03      	bge.n	800b300 <_printf_i+0xd0>
 800b2f8:	232d      	movs	r3, #45	@ 0x2d
 800b2fa:	426d      	negs	r5, r5
 800b2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b300:	4858      	ldr	r0, [pc, #352]	@ (800b464 <_printf_i+0x234>)
 800b302:	230a      	movs	r3, #10
 800b304:	e011      	b.n	800b32a <_printf_i+0xfa>
 800b306:	6821      	ldr	r1, [r4, #0]
 800b308:	6833      	ldr	r3, [r6, #0]
 800b30a:	0608      	lsls	r0, r1, #24
 800b30c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b310:	d402      	bmi.n	800b318 <_printf_i+0xe8>
 800b312:	0649      	lsls	r1, r1, #25
 800b314:	bf48      	it	mi
 800b316:	b2ad      	uxthmi	r5, r5
 800b318:	2f6f      	cmp	r7, #111	@ 0x6f
 800b31a:	4852      	ldr	r0, [pc, #328]	@ (800b464 <_printf_i+0x234>)
 800b31c:	6033      	str	r3, [r6, #0]
 800b31e:	bf14      	ite	ne
 800b320:	230a      	movne	r3, #10
 800b322:	2308      	moveq	r3, #8
 800b324:	2100      	movs	r1, #0
 800b326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b32a:	6866      	ldr	r6, [r4, #4]
 800b32c:	60a6      	str	r6, [r4, #8]
 800b32e:	2e00      	cmp	r6, #0
 800b330:	db05      	blt.n	800b33e <_printf_i+0x10e>
 800b332:	6821      	ldr	r1, [r4, #0]
 800b334:	432e      	orrs	r6, r5
 800b336:	f021 0104 	bic.w	r1, r1, #4
 800b33a:	6021      	str	r1, [r4, #0]
 800b33c:	d04b      	beq.n	800b3d6 <_printf_i+0x1a6>
 800b33e:	4616      	mov	r6, r2
 800b340:	fbb5 f1f3 	udiv	r1, r5, r3
 800b344:	fb03 5711 	mls	r7, r3, r1, r5
 800b348:	5dc7      	ldrb	r7, [r0, r7]
 800b34a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b34e:	462f      	mov	r7, r5
 800b350:	42bb      	cmp	r3, r7
 800b352:	460d      	mov	r5, r1
 800b354:	d9f4      	bls.n	800b340 <_printf_i+0x110>
 800b356:	2b08      	cmp	r3, #8
 800b358:	d10b      	bne.n	800b372 <_printf_i+0x142>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	07df      	lsls	r7, r3, #31
 800b35e:	d508      	bpl.n	800b372 <_printf_i+0x142>
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	6861      	ldr	r1, [r4, #4]
 800b364:	4299      	cmp	r1, r3
 800b366:	bfde      	ittt	le
 800b368:	2330      	movle	r3, #48	@ 0x30
 800b36a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b36e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b372:	1b92      	subs	r2, r2, r6
 800b374:	6122      	str	r2, [r4, #16]
 800b376:	f8cd a000 	str.w	sl, [sp]
 800b37a:	464b      	mov	r3, r9
 800b37c:	aa03      	add	r2, sp, #12
 800b37e:	4621      	mov	r1, r4
 800b380:	4640      	mov	r0, r8
 800b382:	f7ff fee7 	bl	800b154 <_printf_common>
 800b386:	3001      	adds	r0, #1
 800b388:	d14a      	bne.n	800b420 <_printf_i+0x1f0>
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	b004      	add	sp, #16
 800b390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	f043 0320 	orr.w	r3, r3, #32
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	4832      	ldr	r0, [pc, #200]	@ (800b468 <_printf_i+0x238>)
 800b39e:	2778      	movs	r7, #120	@ 0x78
 800b3a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	6831      	ldr	r1, [r6, #0]
 800b3a8:	061f      	lsls	r7, r3, #24
 800b3aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3ae:	d402      	bmi.n	800b3b6 <_printf_i+0x186>
 800b3b0:	065f      	lsls	r7, r3, #25
 800b3b2:	bf48      	it	mi
 800b3b4:	b2ad      	uxthmi	r5, r5
 800b3b6:	6031      	str	r1, [r6, #0]
 800b3b8:	07d9      	lsls	r1, r3, #31
 800b3ba:	bf44      	itt	mi
 800b3bc:	f043 0320 	orrmi.w	r3, r3, #32
 800b3c0:	6023      	strmi	r3, [r4, #0]
 800b3c2:	b11d      	cbz	r5, 800b3cc <_printf_i+0x19c>
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	e7ad      	b.n	800b324 <_printf_i+0xf4>
 800b3c8:	4826      	ldr	r0, [pc, #152]	@ (800b464 <_printf_i+0x234>)
 800b3ca:	e7e9      	b.n	800b3a0 <_printf_i+0x170>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	f023 0320 	bic.w	r3, r3, #32
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	e7f6      	b.n	800b3c4 <_printf_i+0x194>
 800b3d6:	4616      	mov	r6, r2
 800b3d8:	e7bd      	b.n	800b356 <_printf_i+0x126>
 800b3da:	6833      	ldr	r3, [r6, #0]
 800b3dc:	6825      	ldr	r5, [r4, #0]
 800b3de:	6961      	ldr	r1, [r4, #20]
 800b3e0:	1d18      	adds	r0, r3, #4
 800b3e2:	6030      	str	r0, [r6, #0]
 800b3e4:	062e      	lsls	r6, r5, #24
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	d501      	bpl.n	800b3ee <_printf_i+0x1be>
 800b3ea:	6019      	str	r1, [r3, #0]
 800b3ec:	e002      	b.n	800b3f4 <_printf_i+0x1c4>
 800b3ee:	0668      	lsls	r0, r5, #25
 800b3f0:	d5fb      	bpl.n	800b3ea <_printf_i+0x1ba>
 800b3f2:	8019      	strh	r1, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	6123      	str	r3, [r4, #16]
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	e7bc      	b.n	800b376 <_printf_i+0x146>
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	1d1a      	adds	r2, r3, #4
 800b400:	6032      	str	r2, [r6, #0]
 800b402:	681e      	ldr	r6, [r3, #0]
 800b404:	6862      	ldr	r2, [r4, #4]
 800b406:	2100      	movs	r1, #0
 800b408:	4630      	mov	r0, r6
 800b40a:	f7f4 fef9 	bl	8000200 <memchr>
 800b40e:	b108      	cbz	r0, 800b414 <_printf_i+0x1e4>
 800b410:	1b80      	subs	r0, r0, r6
 800b412:	6060      	str	r0, [r4, #4]
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	2300      	movs	r3, #0
 800b41a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b41e:	e7aa      	b.n	800b376 <_printf_i+0x146>
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	4632      	mov	r2, r6
 800b424:	4649      	mov	r1, r9
 800b426:	4640      	mov	r0, r8
 800b428:	47d0      	blx	sl
 800b42a:	3001      	adds	r0, #1
 800b42c:	d0ad      	beq.n	800b38a <_printf_i+0x15a>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	079b      	lsls	r3, r3, #30
 800b432:	d413      	bmi.n	800b45c <_printf_i+0x22c>
 800b434:	68e0      	ldr	r0, [r4, #12]
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	4298      	cmp	r0, r3
 800b43a:	bfb8      	it	lt
 800b43c:	4618      	movlt	r0, r3
 800b43e:	e7a6      	b.n	800b38e <_printf_i+0x15e>
 800b440:	2301      	movs	r3, #1
 800b442:	4632      	mov	r2, r6
 800b444:	4649      	mov	r1, r9
 800b446:	4640      	mov	r0, r8
 800b448:	47d0      	blx	sl
 800b44a:	3001      	adds	r0, #1
 800b44c:	d09d      	beq.n	800b38a <_printf_i+0x15a>
 800b44e:	3501      	adds	r5, #1
 800b450:	68e3      	ldr	r3, [r4, #12]
 800b452:	9903      	ldr	r1, [sp, #12]
 800b454:	1a5b      	subs	r3, r3, r1
 800b456:	42ab      	cmp	r3, r5
 800b458:	dcf2      	bgt.n	800b440 <_printf_i+0x210>
 800b45a:	e7eb      	b.n	800b434 <_printf_i+0x204>
 800b45c:	2500      	movs	r5, #0
 800b45e:	f104 0619 	add.w	r6, r4, #25
 800b462:	e7f5      	b.n	800b450 <_printf_i+0x220>
 800b464:	0800c18c 	.word	0x0800c18c
 800b468:	0800c19d 	.word	0x0800c19d

0800b46c <__sflush_r>:
 800b46c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b474:	0716      	lsls	r6, r2, #28
 800b476:	4605      	mov	r5, r0
 800b478:	460c      	mov	r4, r1
 800b47a:	d454      	bmi.n	800b526 <__sflush_r+0xba>
 800b47c:	684b      	ldr	r3, [r1, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dc02      	bgt.n	800b488 <__sflush_r+0x1c>
 800b482:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd48      	ble.n	800b51a <__sflush_r+0xae>
 800b488:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	d045      	beq.n	800b51a <__sflush_r+0xae>
 800b48e:	2300      	movs	r3, #0
 800b490:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b494:	682f      	ldr	r7, [r5, #0]
 800b496:	6a21      	ldr	r1, [r4, #32]
 800b498:	602b      	str	r3, [r5, #0]
 800b49a:	d030      	beq.n	800b4fe <__sflush_r+0x92>
 800b49c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	0759      	lsls	r1, r3, #29
 800b4a2:	d505      	bpl.n	800b4b0 <__sflush_r+0x44>
 800b4a4:	6863      	ldr	r3, [r4, #4]
 800b4a6:	1ad2      	subs	r2, r2, r3
 800b4a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b4aa:	b10b      	cbz	r3, 800b4b0 <__sflush_r+0x44>
 800b4ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b4ae:	1ad2      	subs	r2, r2, r3
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4b4:	6a21      	ldr	r1, [r4, #32]
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b0      	blx	r6
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	d106      	bne.n	800b4ce <__sflush_r+0x62>
 800b4c0:	6829      	ldr	r1, [r5, #0]
 800b4c2:	291d      	cmp	r1, #29
 800b4c4:	d82b      	bhi.n	800b51e <__sflush_r+0xb2>
 800b4c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b570 <__sflush_r+0x104>)
 800b4c8:	40ca      	lsrs	r2, r1
 800b4ca:	07d6      	lsls	r6, r2, #31
 800b4cc:	d527      	bpl.n	800b51e <__sflush_r+0xb2>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	6062      	str	r2, [r4, #4]
 800b4d2:	04d9      	lsls	r1, r3, #19
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	6022      	str	r2, [r4, #0]
 800b4d8:	d504      	bpl.n	800b4e4 <__sflush_r+0x78>
 800b4da:	1c42      	adds	r2, r0, #1
 800b4dc:	d101      	bne.n	800b4e2 <__sflush_r+0x76>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	b903      	cbnz	r3, 800b4e4 <__sflush_r+0x78>
 800b4e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4e6:	602f      	str	r7, [r5, #0]
 800b4e8:	b1b9      	cbz	r1, 800b51a <__sflush_r+0xae>
 800b4ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ee:	4299      	cmp	r1, r3
 800b4f0:	d002      	beq.n	800b4f8 <__sflush_r+0x8c>
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f7fe fbdc 	bl	8009cb0 <_free_r>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4fc:	e00d      	b.n	800b51a <__sflush_r+0xae>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4628      	mov	r0, r5
 800b502:	47b0      	blx	r6
 800b504:	4602      	mov	r2, r0
 800b506:	1c50      	adds	r0, r2, #1
 800b508:	d1c9      	bne.n	800b49e <__sflush_r+0x32>
 800b50a:	682b      	ldr	r3, [r5, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c6      	beq.n	800b49e <__sflush_r+0x32>
 800b510:	2b1d      	cmp	r3, #29
 800b512:	d001      	beq.n	800b518 <__sflush_r+0xac>
 800b514:	2b16      	cmp	r3, #22
 800b516:	d11e      	bne.n	800b556 <__sflush_r+0xea>
 800b518:	602f      	str	r7, [r5, #0]
 800b51a:	2000      	movs	r0, #0
 800b51c:	e022      	b.n	800b564 <__sflush_r+0xf8>
 800b51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b522:	b21b      	sxth	r3, r3
 800b524:	e01b      	b.n	800b55e <__sflush_r+0xf2>
 800b526:	690f      	ldr	r7, [r1, #16]
 800b528:	2f00      	cmp	r7, #0
 800b52a:	d0f6      	beq.n	800b51a <__sflush_r+0xae>
 800b52c:	0793      	lsls	r3, r2, #30
 800b52e:	680e      	ldr	r6, [r1, #0]
 800b530:	bf08      	it	eq
 800b532:	694b      	ldreq	r3, [r1, #20]
 800b534:	600f      	str	r7, [r1, #0]
 800b536:	bf18      	it	ne
 800b538:	2300      	movne	r3, #0
 800b53a:	eba6 0807 	sub.w	r8, r6, r7
 800b53e:	608b      	str	r3, [r1, #8]
 800b540:	f1b8 0f00 	cmp.w	r8, #0
 800b544:	dde9      	ble.n	800b51a <__sflush_r+0xae>
 800b546:	6a21      	ldr	r1, [r4, #32]
 800b548:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b54a:	4643      	mov	r3, r8
 800b54c:	463a      	mov	r2, r7
 800b54e:	4628      	mov	r0, r5
 800b550:	47b0      	blx	r6
 800b552:	2800      	cmp	r0, #0
 800b554:	dc08      	bgt.n	800b568 <__sflush_r+0xfc>
 800b556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b55a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b568:	4407      	add	r7, r0
 800b56a:	eba8 0800 	sub.w	r8, r8, r0
 800b56e:	e7e7      	b.n	800b540 <__sflush_r+0xd4>
 800b570:	20400001 	.word	0x20400001

0800b574 <_fflush_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	690b      	ldr	r3, [r1, #16]
 800b578:	4605      	mov	r5, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	b913      	cbnz	r3, 800b584 <_fflush_r+0x10>
 800b57e:	2500      	movs	r5, #0
 800b580:	4628      	mov	r0, r5
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	b118      	cbz	r0, 800b58e <_fflush_r+0x1a>
 800b586:	6a03      	ldr	r3, [r0, #32]
 800b588:	b90b      	cbnz	r3, 800b58e <_fflush_r+0x1a>
 800b58a:	f7fe fa21 	bl	80099d0 <__sinit>
 800b58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0f3      	beq.n	800b57e <_fflush_r+0xa>
 800b596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b598:	07d0      	lsls	r0, r2, #31
 800b59a:	d404      	bmi.n	800b5a6 <_fflush_r+0x32>
 800b59c:	0599      	lsls	r1, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_fflush_r+0x32>
 800b5a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5a2:	f7fe fb6a 	bl	8009c7a <__retarget_lock_acquire_recursive>
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	f7ff ff5f 	bl	800b46c <__sflush_r>
 800b5ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5b0:	07da      	lsls	r2, r3, #31
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	d4e4      	bmi.n	800b580 <_fflush_r+0xc>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	059b      	lsls	r3, r3, #22
 800b5ba:	d4e1      	bmi.n	800b580 <_fflush_r+0xc>
 800b5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5be:	f7fe fb5d 	bl	8009c7c <__retarget_lock_release_recursive>
 800b5c2:	e7dd      	b.n	800b580 <_fflush_r+0xc>

0800b5c4 <memmove>:
 800b5c4:	4288      	cmp	r0, r1
 800b5c6:	b510      	push	{r4, lr}
 800b5c8:	eb01 0402 	add.w	r4, r1, r2
 800b5cc:	d902      	bls.n	800b5d4 <memmove+0x10>
 800b5ce:	4284      	cmp	r4, r0
 800b5d0:	4623      	mov	r3, r4
 800b5d2:	d807      	bhi.n	800b5e4 <memmove+0x20>
 800b5d4:	1e43      	subs	r3, r0, #1
 800b5d6:	42a1      	cmp	r1, r4
 800b5d8:	d008      	beq.n	800b5ec <memmove+0x28>
 800b5da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5e2:	e7f8      	b.n	800b5d6 <memmove+0x12>
 800b5e4:	4402      	add	r2, r0
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	428a      	cmp	r2, r1
 800b5ea:	d100      	bne.n	800b5ee <memmove+0x2a>
 800b5ec:	bd10      	pop	{r4, pc}
 800b5ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5f6:	e7f7      	b.n	800b5e8 <memmove+0x24>

0800b5f8 <_sbrk_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d06      	ldr	r5, [pc, #24]	@ (800b614 <_sbrk_r+0x1c>)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	f7f6 fde8 	bl	80021d8 <_sbrk>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_sbrk_r+0x1a>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_sbrk_r+0x1a>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	200006cc 	.word	0x200006cc

0800b618 <__assert_func>:
 800b618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b61a:	4614      	mov	r4, r2
 800b61c:	461a      	mov	r2, r3
 800b61e:	4b09      	ldr	r3, [pc, #36]	@ (800b644 <__assert_func+0x2c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4605      	mov	r5, r0
 800b624:	68d8      	ldr	r0, [r3, #12]
 800b626:	b14c      	cbz	r4, 800b63c <__assert_func+0x24>
 800b628:	4b07      	ldr	r3, [pc, #28]	@ (800b648 <__assert_func+0x30>)
 800b62a:	9100      	str	r1, [sp, #0]
 800b62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b630:	4906      	ldr	r1, [pc, #24]	@ (800b64c <__assert_func+0x34>)
 800b632:	462b      	mov	r3, r5
 800b634:	f000 f858 	bl	800b6e8 <fiprintf>
 800b638:	f000 f868 	bl	800b70c <abort>
 800b63c:	4b04      	ldr	r3, [pc, #16]	@ (800b650 <__assert_func+0x38>)
 800b63e:	461c      	mov	r4, r3
 800b640:	e7f3      	b.n	800b62a <__assert_func+0x12>
 800b642:	bf00      	nop
 800b644:	200001a4 	.word	0x200001a4
 800b648:	0800c1ae 	.word	0x0800c1ae
 800b64c:	0800c1bb 	.word	0x0800c1bb
 800b650:	0800c1e9 	.word	0x0800c1e9

0800b654 <_calloc_r>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	fba1 5402 	umull	r5, r4, r1, r2
 800b65a:	b934      	cbnz	r4, 800b66a <_calloc_r+0x16>
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7fe fecd 	bl	800a3fc <_malloc_r>
 800b662:	4606      	mov	r6, r0
 800b664:	b928      	cbnz	r0, 800b672 <_calloc_r+0x1e>
 800b666:	4630      	mov	r0, r6
 800b668:	bd70      	pop	{r4, r5, r6, pc}
 800b66a:	220c      	movs	r2, #12
 800b66c:	6002      	str	r2, [r0, #0]
 800b66e:	2600      	movs	r6, #0
 800b670:	e7f9      	b.n	800b666 <_calloc_r+0x12>
 800b672:	462a      	mov	r2, r5
 800b674:	4621      	mov	r1, r4
 800b676:	f7fe fa61 	bl	8009b3c <memset>
 800b67a:	e7f4      	b.n	800b666 <_calloc_r+0x12>

0800b67c <malloc>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	@ (800b688 <malloc+0xc>)
 800b67e:	4601      	mov	r1, r0
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	f7fe bebb 	b.w	800a3fc <_malloc_r>
 800b686:	bf00      	nop
 800b688:	200001a4 	.word	0x200001a4

0800b68c <_realloc_r>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4607      	mov	r7, r0
 800b692:	4614      	mov	r4, r2
 800b694:	460d      	mov	r5, r1
 800b696:	b921      	cbnz	r1, 800b6a2 <_realloc_r+0x16>
 800b698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	4611      	mov	r1, r2
 800b69e:	f7fe bead 	b.w	800a3fc <_malloc_r>
 800b6a2:	b92a      	cbnz	r2, 800b6b0 <_realloc_r+0x24>
 800b6a4:	f7fe fb04 	bl	8009cb0 <_free_r>
 800b6a8:	4625      	mov	r5, r4
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b0:	f000 f833 	bl	800b71a <_malloc_usable_size_r>
 800b6b4:	4284      	cmp	r4, r0
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	d802      	bhi.n	800b6c0 <_realloc_r+0x34>
 800b6ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6be:	d8f4      	bhi.n	800b6aa <_realloc_r+0x1e>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	f7fe fe9a 	bl	800a3fc <_malloc_r>
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	b908      	cbnz	r0, 800b6d0 <_realloc_r+0x44>
 800b6cc:	4645      	mov	r5, r8
 800b6ce:	e7ec      	b.n	800b6aa <_realloc_r+0x1e>
 800b6d0:	42b4      	cmp	r4, r6
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	bf28      	it	cs
 800b6d8:	4632      	movcs	r2, r6
 800b6da:	f7fe fad0 	bl	8009c7e <memcpy>
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7fe fae5 	bl	8009cb0 <_free_r>
 800b6e6:	e7f1      	b.n	800b6cc <_realloc_r+0x40>

0800b6e8 <fiprintf>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b503      	push	{r0, r1, lr}
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	ab03      	add	r3, sp, #12
 800b6f0:	4805      	ldr	r0, [pc, #20]	@ (800b708 <fiprintf+0x20>)
 800b6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f6:	6800      	ldr	r0, [r0, #0]
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	f000 f83f 	bl	800b77c <_vfiprintf_r>
 800b6fe:	b002      	add	sp, #8
 800b700:	f85d eb04 	ldr.w	lr, [sp], #4
 800b704:	b003      	add	sp, #12
 800b706:	4770      	bx	lr
 800b708:	200001a4 	.word	0x200001a4

0800b70c <abort>:
 800b70c:	b508      	push	{r3, lr}
 800b70e:	2006      	movs	r0, #6
 800b710:	f000 fa08 	bl	800bb24 <raise>
 800b714:	2001      	movs	r0, #1
 800b716:	f7f6 fce7 	bl	80020e8 <_exit>

0800b71a <_malloc_usable_size_r>:
 800b71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b71e:	1f18      	subs	r0, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfbc      	itt	lt
 800b724:	580b      	ldrlt	r3, [r1, r0]
 800b726:	18c0      	addlt	r0, r0, r3
 800b728:	4770      	bx	lr

0800b72a <__sfputc_r>:
 800b72a:	6893      	ldr	r3, [r2, #8]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	b410      	push	{r4}
 800b732:	6093      	str	r3, [r2, #8]
 800b734:	da08      	bge.n	800b748 <__sfputc_r+0x1e>
 800b736:	6994      	ldr	r4, [r2, #24]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	db01      	blt.n	800b740 <__sfputc_r+0x16>
 800b73c:	290a      	cmp	r1, #10
 800b73e:	d103      	bne.n	800b748 <__sfputc_r+0x1e>
 800b740:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b744:	f000 b932 	b.w	800b9ac <__swbuf_r>
 800b748:	6813      	ldr	r3, [r2, #0]
 800b74a:	1c58      	adds	r0, r3, #1
 800b74c:	6010      	str	r0, [r2, #0]
 800b74e:	7019      	strb	r1, [r3, #0]
 800b750:	4608      	mov	r0, r1
 800b752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <__sfputs_r>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	4606      	mov	r6, r0
 800b75c:	460f      	mov	r7, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	18d5      	adds	r5, r2, r3
 800b762:	42ac      	cmp	r4, r5
 800b764:	d101      	bne.n	800b76a <__sfputs_r+0x12>
 800b766:	2000      	movs	r0, #0
 800b768:	e007      	b.n	800b77a <__sfputs_r+0x22>
 800b76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76e:	463a      	mov	r2, r7
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff ffda 	bl	800b72a <__sfputc_r>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d1f3      	bne.n	800b762 <__sfputs_r+0xa>
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b77c <_vfiprintf_r>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	460d      	mov	r5, r1
 800b782:	b09d      	sub	sp, #116	@ 0x74
 800b784:	4614      	mov	r4, r2
 800b786:	4698      	mov	r8, r3
 800b788:	4606      	mov	r6, r0
 800b78a:	b118      	cbz	r0, 800b794 <_vfiprintf_r+0x18>
 800b78c:	6a03      	ldr	r3, [r0, #32]
 800b78e:	b90b      	cbnz	r3, 800b794 <_vfiprintf_r+0x18>
 800b790:	f7fe f91e 	bl	80099d0 <__sinit>
 800b794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b796:	07d9      	lsls	r1, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	059a      	lsls	r2, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfiprintf_r+0x2a>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a2:	f7fe fa6a 	bl	8009c7a <__retarget_lock_acquire_recursive>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	071b      	lsls	r3, r3, #28
 800b7aa:	d501      	bpl.n	800b7b0 <_vfiprintf_r+0x34>
 800b7ac:	692b      	ldr	r3, [r5, #16]
 800b7ae:	b99b      	cbnz	r3, 800b7d8 <_vfiprintf_r+0x5c>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f938 	bl	800ba28 <__swsetup_r>
 800b7b8:	b170      	cbz	r0, 800b7d8 <_vfiprintf_r+0x5c>
 800b7ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7bc:	07dc      	lsls	r4, r3, #31
 800b7be:	d504      	bpl.n	800b7ca <_vfiprintf_r+0x4e>
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c4:	b01d      	add	sp, #116	@ 0x74
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	0598      	lsls	r0, r3, #22
 800b7ce:	d4f7      	bmi.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d2:	f7fe fa53 	bl	8009c7c <__retarget_lock_release_recursive>
 800b7d6:	e7f3      	b.n	800b7c0 <_vfiprintf_r+0x44>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7dc:	2320      	movs	r3, #32
 800b7de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e6:	2330      	movs	r3, #48	@ 0x30
 800b7e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b998 <_vfiprintf_r+0x21c>
 800b7ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f0:	f04f 0901 	mov.w	r9, #1
 800b7f4:	4623      	mov	r3, r4
 800b7f6:	469a      	mov	sl, r3
 800b7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fc:	b10a      	cbz	r2, 800b802 <_vfiprintf_r+0x86>
 800b7fe:	2a25      	cmp	r2, #37	@ 0x25
 800b800:	d1f9      	bne.n	800b7f6 <_vfiprintf_r+0x7a>
 800b802:	ebba 0b04 	subs.w	fp, sl, r4
 800b806:	d00b      	beq.n	800b820 <_vfiprintf_r+0xa4>
 800b808:	465b      	mov	r3, fp
 800b80a:	4622      	mov	r2, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	4630      	mov	r0, r6
 800b810:	f7ff ffa2 	bl	800b758 <__sfputs_r>
 800b814:	3001      	adds	r0, #1
 800b816:	f000 80a7 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b81a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b81c:	445a      	add	r2, fp
 800b81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b820:	f89a 3000 	ldrb.w	r3, [sl]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 809f 	beq.w	800b968 <_vfiprintf_r+0x1ec>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b834:	f10a 0a01 	add.w	sl, sl, #1
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	9307      	str	r3, [sp, #28]
 800b83c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b840:	931a      	str	r3, [sp, #104]	@ 0x68
 800b842:	4654      	mov	r4, sl
 800b844:	2205      	movs	r2, #5
 800b846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84a:	4853      	ldr	r0, [pc, #332]	@ (800b998 <_vfiprintf_r+0x21c>)
 800b84c:	f7f4 fcd8 	bl	8000200 <memchr>
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	b9d8      	cbnz	r0, 800b88c <_vfiprintf_r+0x110>
 800b854:	06d1      	lsls	r1, r2, #27
 800b856:	bf44      	itt	mi
 800b858:	2320      	movmi	r3, #32
 800b85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b85e:	0713      	lsls	r3, r2, #28
 800b860:	bf44      	itt	mi
 800b862:	232b      	movmi	r3, #43	@ 0x2b
 800b864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b868:	f89a 3000 	ldrb.w	r3, [sl]
 800b86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b86e:	d015      	beq.n	800b89c <_vfiprintf_r+0x120>
 800b870:	9a07      	ldr	r2, [sp, #28]
 800b872:	4654      	mov	r4, sl
 800b874:	2000      	movs	r0, #0
 800b876:	f04f 0c0a 	mov.w	ip, #10
 800b87a:	4621      	mov	r1, r4
 800b87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b880:	3b30      	subs	r3, #48	@ 0x30
 800b882:	2b09      	cmp	r3, #9
 800b884:	d94b      	bls.n	800b91e <_vfiprintf_r+0x1a2>
 800b886:	b1b0      	cbz	r0, 800b8b6 <_vfiprintf_r+0x13a>
 800b888:	9207      	str	r2, [sp, #28]
 800b88a:	e014      	b.n	800b8b6 <_vfiprintf_r+0x13a>
 800b88c:	eba0 0308 	sub.w	r3, r0, r8
 800b890:	fa09 f303 	lsl.w	r3, r9, r3
 800b894:	4313      	orrs	r3, r2
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	46a2      	mov	sl, r4
 800b89a:	e7d2      	b.n	800b842 <_vfiprintf_r+0xc6>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	1d19      	adds	r1, r3, #4
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	9103      	str	r1, [sp, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bfbb      	ittet	lt
 800b8a8:	425b      	neglt	r3, r3
 800b8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ae:	9307      	strge	r3, [sp, #28]
 800b8b0:	9307      	strlt	r3, [sp, #28]
 800b8b2:	bfb8      	it	lt
 800b8b4:	9204      	strlt	r2, [sp, #16]
 800b8b6:	7823      	ldrb	r3, [r4, #0]
 800b8b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ba:	d10a      	bne.n	800b8d2 <_vfiprintf_r+0x156>
 800b8bc:	7863      	ldrb	r3, [r4, #1]
 800b8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c0:	d132      	bne.n	800b928 <_vfiprintf_r+0x1ac>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	1d1a      	adds	r2, r3, #4
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	9203      	str	r2, [sp, #12]
 800b8ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8ce:	3402      	adds	r4, #2
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9a8 <_vfiprintf_r+0x22c>
 800b8d6:	7821      	ldrb	r1, [r4, #0]
 800b8d8:	2203      	movs	r2, #3
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f7f4 fc90 	bl	8000200 <memchr>
 800b8e0:	b138      	cbz	r0, 800b8f2 <_vfiprintf_r+0x176>
 800b8e2:	9b04      	ldr	r3, [sp, #16]
 800b8e4:	eba0 000a 	sub.w	r0, r0, sl
 800b8e8:	2240      	movs	r2, #64	@ 0x40
 800b8ea:	4082      	lsls	r2, r0
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4829      	ldr	r0, [pc, #164]	@ (800b99c <_vfiprintf_r+0x220>)
 800b8f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8fc:	2206      	movs	r2, #6
 800b8fe:	f7f4 fc7f 	bl	8000200 <memchr>
 800b902:	2800      	cmp	r0, #0
 800b904:	d03f      	beq.n	800b986 <_vfiprintf_r+0x20a>
 800b906:	4b26      	ldr	r3, [pc, #152]	@ (800b9a0 <_vfiprintf_r+0x224>)
 800b908:	bb1b      	cbnz	r3, 800b952 <_vfiprintf_r+0x1d6>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	3307      	adds	r3, #7
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b918:	443b      	add	r3, r7
 800b91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91c:	e76a      	b.n	800b7f4 <_vfiprintf_r+0x78>
 800b91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b922:	460c      	mov	r4, r1
 800b924:	2001      	movs	r0, #1
 800b926:	e7a8      	b.n	800b87a <_vfiprintf_r+0xfe>
 800b928:	2300      	movs	r3, #0
 800b92a:	3401      	adds	r4, #1
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	4619      	mov	r1, r3
 800b930:	f04f 0c0a 	mov.w	ip, #10
 800b934:	4620      	mov	r0, r4
 800b936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93a:	3a30      	subs	r2, #48	@ 0x30
 800b93c:	2a09      	cmp	r2, #9
 800b93e:	d903      	bls.n	800b948 <_vfiprintf_r+0x1cc>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <_vfiprintf_r+0x156>
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	e7c4      	b.n	800b8d2 <_vfiprintf_r+0x156>
 800b948:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94c:	4604      	mov	r4, r0
 800b94e:	2301      	movs	r3, #1
 800b950:	e7f0      	b.n	800b934 <_vfiprintf_r+0x1b8>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b95a:	a904      	add	r1, sp, #16
 800b95c:	4630      	mov	r0, r6
 800b95e:	f3af 8000 	nop.w
 800b962:	4607      	mov	r7, r0
 800b964:	1c78      	adds	r0, r7, #1
 800b966:	d1d6      	bne.n	800b916 <_vfiprintf_r+0x19a>
 800b968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d402      	bmi.n	800b97a <_vfiprintf_r+0x1fe>
 800b974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b976:	f7fe f981 	bl	8009c7c <__retarget_lock_release_recursive>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	065b      	lsls	r3, r3, #25
 800b97e:	f53f af1f 	bmi.w	800b7c0 <_vfiprintf_r+0x44>
 800b982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b984:	e71e      	b.n	800b7c4 <_vfiprintf_r+0x48>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4b05      	ldr	r3, [pc, #20]	@ (800b9a4 <_vfiprintf_r+0x228>)
 800b98e:	a904      	add	r1, sp, #16
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff fc4d 	bl	800b230 <_printf_i>
 800b996:	e7e4      	b.n	800b962 <_vfiprintf_r+0x1e6>
 800b998:	0800c17b 	.word	0x0800c17b
 800b99c:	0800c185 	.word	0x0800c185
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	0800b759 	.word	0x0800b759
 800b9a8:	0800c181 	.word	0x0800c181

0800b9ac <__swbuf_r>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	460e      	mov	r6, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	b118      	cbz	r0, 800b9be <__swbuf_r+0x12>
 800b9b6:	6a03      	ldr	r3, [r0, #32]
 800b9b8:	b90b      	cbnz	r3, 800b9be <__swbuf_r+0x12>
 800b9ba:	f7fe f809 	bl	80099d0 <__sinit>
 800b9be:	69a3      	ldr	r3, [r4, #24]
 800b9c0:	60a3      	str	r3, [r4, #8]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	071a      	lsls	r2, r3, #28
 800b9c6:	d501      	bpl.n	800b9cc <__swbuf_r+0x20>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b943      	cbnz	r3, 800b9de <__swbuf_r+0x32>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f82a 	bl	800ba28 <__swsetup_r>
 800b9d4:	b118      	cbz	r0, 800b9de <__swbuf_r+0x32>
 800b9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9da:	4638      	mov	r0, r7
 800b9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	6922      	ldr	r2, [r4, #16]
 800b9e2:	1a98      	subs	r0, r3, r2
 800b9e4:	6963      	ldr	r3, [r4, #20]
 800b9e6:	b2f6      	uxtb	r6, r6
 800b9e8:	4283      	cmp	r3, r0
 800b9ea:	4637      	mov	r7, r6
 800b9ec:	dc05      	bgt.n	800b9fa <__swbuf_r+0x4e>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f7ff fdbf 	bl	800b574 <_fflush_r>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d1ed      	bne.n	800b9d6 <__swbuf_r+0x2a>
 800b9fa:	68a3      	ldr	r3, [r4, #8]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60a3      	str	r3, [r4, #8]
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	701e      	strb	r6, [r3, #0]
 800ba08:	6962      	ldr	r2, [r4, #20]
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d004      	beq.n	800ba1a <__swbuf_r+0x6e>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d5e1      	bpl.n	800b9da <__swbuf_r+0x2e>
 800ba16:	2e0a      	cmp	r6, #10
 800ba18:	d1df      	bne.n	800b9da <__swbuf_r+0x2e>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7ff fda9 	bl	800b574 <_fflush_r>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d0d9      	beq.n	800b9da <__swbuf_r+0x2e>
 800ba26:	e7d6      	b.n	800b9d6 <__swbuf_r+0x2a>

0800ba28 <__swsetup_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4b29      	ldr	r3, [pc, #164]	@ (800bad0 <__swsetup_r+0xa8>)
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	460c      	mov	r4, r1
 800ba32:	b118      	cbz	r0, 800ba3c <__swsetup_r+0x14>
 800ba34:	6a03      	ldr	r3, [r0, #32]
 800ba36:	b90b      	cbnz	r3, 800ba3c <__swsetup_r+0x14>
 800ba38:	f7fd ffca 	bl	80099d0 <__sinit>
 800ba3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba40:	0719      	lsls	r1, r3, #28
 800ba42:	d422      	bmi.n	800ba8a <__swsetup_r+0x62>
 800ba44:	06da      	lsls	r2, r3, #27
 800ba46:	d407      	bmi.n	800ba58 <__swsetup_r+0x30>
 800ba48:	2209      	movs	r2, #9
 800ba4a:	602a      	str	r2, [r5, #0]
 800ba4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba50:	81a3      	strh	r3, [r4, #12]
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	e033      	b.n	800bac0 <__swsetup_r+0x98>
 800ba58:	0758      	lsls	r0, r3, #29
 800ba5a:	d512      	bpl.n	800ba82 <__swsetup_r+0x5a>
 800ba5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba5e:	b141      	cbz	r1, 800ba72 <__swsetup_r+0x4a>
 800ba60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba64:	4299      	cmp	r1, r3
 800ba66:	d002      	beq.n	800ba6e <__swsetup_r+0x46>
 800ba68:	4628      	mov	r0, r5
 800ba6a:	f7fe f921 	bl	8009cb0 <_free_r>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba78:	81a3      	strh	r3, [r4, #12]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6063      	str	r3, [r4, #4]
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f043 0308 	orr.w	r3, r3, #8
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	b94b      	cbnz	r3, 800baa2 <__swsetup_r+0x7a>
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba98:	d003      	beq.n	800baa2 <__swsetup_r+0x7a>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f000 f883 	bl	800bba8 <__smakebuf_r>
 800baa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa6:	f013 0201 	ands.w	r2, r3, #1
 800baaa:	d00a      	beq.n	800bac2 <__swsetup_r+0x9a>
 800baac:	2200      	movs	r2, #0
 800baae:	60a2      	str	r2, [r4, #8]
 800bab0:	6962      	ldr	r2, [r4, #20]
 800bab2:	4252      	negs	r2, r2
 800bab4:	61a2      	str	r2, [r4, #24]
 800bab6:	6922      	ldr	r2, [r4, #16]
 800bab8:	b942      	cbnz	r2, 800bacc <__swsetup_r+0xa4>
 800baba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800babe:	d1c5      	bne.n	800ba4c <__swsetup_r+0x24>
 800bac0:	bd38      	pop	{r3, r4, r5, pc}
 800bac2:	0799      	lsls	r1, r3, #30
 800bac4:	bf58      	it	pl
 800bac6:	6962      	ldrpl	r2, [r4, #20]
 800bac8:	60a2      	str	r2, [r4, #8]
 800baca:	e7f4      	b.n	800bab6 <__swsetup_r+0x8e>
 800bacc:	2000      	movs	r0, #0
 800bace:	e7f7      	b.n	800bac0 <__swsetup_r+0x98>
 800bad0:	200001a4 	.word	0x200001a4

0800bad4 <_raise_r>:
 800bad4:	291f      	cmp	r1, #31
 800bad6:	b538      	push	{r3, r4, r5, lr}
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	d904      	bls.n	800bae8 <_raise_r+0x14>
 800bade:	2316      	movs	r3, #22
 800bae0:	6003      	str	r3, [r0, #0]
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baea:	b112      	cbz	r2, 800baf2 <_raise_r+0x1e>
 800baec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baf0:	b94b      	cbnz	r3, 800bb06 <_raise_r+0x32>
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 f830 	bl	800bb58 <_getpid_r>
 800baf8:	4622      	mov	r2, r4
 800bafa:	4601      	mov	r1, r0
 800bafc:	4628      	mov	r0, r5
 800bafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb02:	f000 b817 	b.w	800bb34 <_kill_r>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d00a      	beq.n	800bb20 <_raise_r+0x4c>
 800bb0a:	1c59      	adds	r1, r3, #1
 800bb0c:	d103      	bne.n	800bb16 <_raise_r+0x42>
 800bb0e:	2316      	movs	r3, #22
 800bb10:	6003      	str	r3, [r0, #0]
 800bb12:	2001      	movs	r0, #1
 800bb14:	e7e7      	b.n	800bae6 <_raise_r+0x12>
 800bb16:	2100      	movs	r1, #0
 800bb18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4798      	blx	r3
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7e0      	b.n	800bae6 <_raise_r+0x12>

0800bb24 <raise>:
 800bb24:	4b02      	ldr	r3, [pc, #8]	@ (800bb30 <raise+0xc>)
 800bb26:	4601      	mov	r1, r0
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f7ff bfd3 	b.w	800bad4 <_raise_r>
 800bb2e:	bf00      	nop
 800bb30:	200001a4 	.word	0x200001a4

0800bb34 <_kill_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d07      	ldr	r5, [pc, #28]	@ (800bb54 <_kill_r+0x20>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	f7f6 fac1 	bl	80020c8 <_kill>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d102      	bne.n	800bb50 <_kill_r+0x1c>
 800bb4a:	682b      	ldr	r3, [r5, #0]
 800bb4c:	b103      	cbz	r3, 800bb50 <_kill_r+0x1c>
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop
 800bb54:	200006cc 	.word	0x200006cc

0800bb58 <_getpid_r>:
 800bb58:	f7f6 baae 	b.w	80020b8 <_getpid>

0800bb5c <__swhatbuf_r>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb64:	2900      	cmp	r1, #0
 800bb66:	b096      	sub	sp, #88	@ 0x58
 800bb68:	4615      	mov	r5, r2
 800bb6a:	461e      	mov	r6, r3
 800bb6c:	da0d      	bge.n	800bb8a <__swhatbuf_r+0x2e>
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb74:	f04f 0100 	mov.w	r1, #0
 800bb78:	bf14      	ite	ne
 800bb7a:	2340      	movne	r3, #64	@ 0x40
 800bb7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb80:	2000      	movs	r0, #0
 800bb82:	6031      	str	r1, [r6, #0]
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	b016      	add	sp, #88	@ 0x58
 800bb88:	bd70      	pop	{r4, r5, r6, pc}
 800bb8a:	466a      	mov	r2, sp
 800bb8c:	f000 f848 	bl	800bc20 <_fstat_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	dbec      	blt.n	800bb6e <__swhatbuf_r+0x12>
 800bb94:	9901      	ldr	r1, [sp, #4]
 800bb96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb9e:	4259      	negs	r1, r3
 800bba0:	4159      	adcs	r1, r3
 800bba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bba6:	e7eb      	b.n	800bb80 <__swhatbuf_r+0x24>

0800bba8 <__smakebuf_r>:
 800bba8:	898b      	ldrh	r3, [r1, #12]
 800bbaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbac:	079d      	lsls	r5, r3, #30
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	d507      	bpl.n	800bbc4 <__smakebuf_r+0x1c>
 800bbb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	6163      	str	r3, [r4, #20]
 800bbc0:	b003      	add	sp, #12
 800bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc4:	ab01      	add	r3, sp, #4
 800bbc6:	466a      	mov	r2, sp
 800bbc8:	f7ff ffc8 	bl	800bb5c <__swhatbuf_r>
 800bbcc:	9f00      	ldr	r7, [sp, #0]
 800bbce:	4605      	mov	r5, r0
 800bbd0:	4639      	mov	r1, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7fe fc12 	bl	800a3fc <_malloc_r>
 800bbd8:	b948      	cbnz	r0, 800bbee <__smakebuf_r+0x46>
 800bbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbde:	059a      	lsls	r2, r3, #22
 800bbe0:	d4ee      	bmi.n	800bbc0 <__smakebuf_r+0x18>
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	f043 0302 	orr.w	r3, r3, #2
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	e7e2      	b.n	800bbb4 <__smakebuf_r+0xc>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	6020      	str	r0, [r4, #0]
 800bbf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbfe:	b15b      	cbz	r3, 800bc18 <__smakebuf_r+0x70>
 800bc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc04:	4630      	mov	r0, r6
 800bc06:	f000 f81d 	bl	800bc44 <_isatty_r>
 800bc0a:	b128      	cbz	r0, 800bc18 <__smakebuf_r+0x70>
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	f023 0303 	bic.w	r3, r3, #3
 800bc12:	f043 0301 	orr.w	r3, r3, #1
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	431d      	orrs	r5, r3
 800bc1c:	81a5      	strh	r5, [r4, #12]
 800bc1e:	e7cf      	b.n	800bbc0 <__smakebuf_r+0x18>

0800bc20 <_fstat_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	@ (800bc40 <_fstat_r+0x20>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f7f6 faab 	bl	8002188 <_fstat>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	d102      	bne.n	800bc3c <_fstat_r+0x1c>
 800bc36:	682b      	ldr	r3, [r5, #0]
 800bc38:	b103      	cbz	r3, 800bc3c <_fstat_r+0x1c>
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	bd38      	pop	{r3, r4, r5, pc}
 800bc3e:	bf00      	nop
 800bc40:	200006cc 	.word	0x200006cc

0800bc44 <_isatty_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	@ (800bc60 <_isatty_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f6 faaa 	bl	80021a8 <_isatty>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_isatty_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_isatty_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	200006cc 	.word	0x200006cc

0800bc64 <sqrt>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	ed2d 8b02 	vpush	{d8}
 800bc6a:	ec55 4b10 	vmov	r4, r5, d0
 800bc6e:	f000 f825 	bl	800bcbc <__ieee754_sqrt>
 800bc72:	4622      	mov	r2, r4
 800bc74:	462b      	mov	r3, r5
 800bc76:	4620      	mov	r0, r4
 800bc78:	4629      	mov	r1, r5
 800bc7a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc7e:	eef0 8a60 	vmov.f32	s17, s1
 800bc82:	f7f4 ff63 	bl	8000b4c <__aeabi_dcmpun>
 800bc86:	b990      	cbnz	r0, 800bcae <sqrt+0x4a>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 ff34 	bl	8000afc <__aeabi_dcmplt>
 800bc94:	b158      	cbz	r0, 800bcae <sqrt+0x4a>
 800bc96:	f7fd ffc5 	bl	8009c24 <__errno>
 800bc9a:	2321      	movs	r3, #33	@ 0x21
 800bc9c:	6003      	str	r3, [r0, #0]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	4610      	mov	r0, r2
 800bca4:	4619      	mov	r1, r3
 800bca6:	f7f4 fde1 	bl	800086c <__aeabi_ddiv>
 800bcaa:	ec41 0b18 	vmov	d8, r0, r1
 800bcae:	eeb0 0a48 	vmov.f32	s0, s16
 800bcb2:	eef0 0a68 	vmov.f32	s1, s17
 800bcb6:	ecbd 8b02 	vpop	{d8}
 800bcba:	bd38      	pop	{r3, r4, r5, pc}

0800bcbc <__ieee754_sqrt>:
 800bcbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4a66      	ldr	r2, [pc, #408]	@ (800be5c <__ieee754_sqrt+0x1a0>)
 800bcc2:	ec55 4b10 	vmov	r4, r5, d0
 800bcc6:	43aa      	bics	r2, r5
 800bcc8:	462b      	mov	r3, r5
 800bcca:	4621      	mov	r1, r4
 800bccc:	d110      	bne.n	800bcf0 <__ieee754_sqrt+0x34>
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f7f4 fca0 	bl	8000618 <__aeabi_dmul>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4620      	mov	r0, r4
 800bcde:	4629      	mov	r1, r5
 800bce0:	f7f4 fae4 	bl	80002ac <__adddf3>
 800bce4:	4604      	mov	r4, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	ec45 4b10 	vmov	d0, r4, r5
 800bcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	dc0e      	bgt.n	800bd12 <__ieee754_sqrt+0x56>
 800bcf4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bcf8:	4322      	orrs	r2, r4
 800bcfa:	d0f5      	beq.n	800bce8 <__ieee754_sqrt+0x2c>
 800bcfc:	b19d      	cbz	r5, 800bd26 <__ieee754_sqrt+0x6a>
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4620      	mov	r0, r4
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7f4 fad0 	bl	80002a8 <__aeabi_dsub>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	f7f4 fdae 	bl	800086c <__aeabi_ddiv>
 800bd10:	e7e8      	b.n	800bce4 <__ieee754_sqrt+0x28>
 800bd12:	152a      	asrs	r2, r5, #20
 800bd14:	d115      	bne.n	800bd42 <__ieee754_sqrt+0x86>
 800bd16:	2000      	movs	r0, #0
 800bd18:	e009      	b.n	800bd2e <__ieee754_sqrt+0x72>
 800bd1a:	0acb      	lsrs	r3, r1, #11
 800bd1c:	3a15      	subs	r2, #21
 800bd1e:	0549      	lsls	r1, r1, #21
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0fa      	beq.n	800bd1a <__ieee754_sqrt+0x5e>
 800bd24:	e7f7      	b.n	800bd16 <__ieee754_sqrt+0x5a>
 800bd26:	462a      	mov	r2, r5
 800bd28:	e7fa      	b.n	800bd20 <__ieee754_sqrt+0x64>
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	02dc      	lsls	r4, r3, #11
 800bd30:	d5fb      	bpl.n	800bd2a <__ieee754_sqrt+0x6e>
 800bd32:	1e44      	subs	r4, r0, #1
 800bd34:	1b12      	subs	r2, r2, r4
 800bd36:	f1c0 0420 	rsb	r4, r0, #32
 800bd3a:	fa21 f404 	lsr.w	r4, r1, r4
 800bd3e:	4323      	orrs	r3, r4
 800bd40:	4081      	lsls	r1, r0
 800bd42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd46:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bd4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd4e:	07d2      	lsls	r2, r2, #31
 800bd50:	bf5c      	itt	pl
 800bd52:	005b      	lslpl	r3, r3, #1
 800bd54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bd58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd5c:	bf58      	it	pl
 800bd5e:	0049      	lslpl	r1, r1, #1
 800bd60:	2600      	movs	r6, #0
 800bd62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bd66:	107f      	asrs	r7, r7, #1
 800bd68:	0049      	lsls	r1, r1, #1
 800bd6a:	2016      	movs	r0, #22
 800bd6c:	4632      	mov	r2, r6
 800bd6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bd72:	1915      	adds	r5, r2, r4
 800bd74:	429d      	cmp	r5, r3
 800bd76:	bfde      	ittt	le
 800bd78:	192a      	addle	r2, r5, r4
 800bd7a:	1b5b      	suble	r3, r3, r5
 800bd7c:	1936      	addle	r6, r6, r4
 800bd7e:	0fcd      	lsrs	r5, r1, #31
 800bd80:	3801      	subs	r0, #1
 800bd82:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bd86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bd8e:	d1f0      	bne.n	800bd72 <__ieee754_sqrt+0xb6>
 800bd90:	4605      	mov	r5, r0
 800bd92:	2420      	movs	r4, #32
 800bd94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	eb0c 0e00 	add.w	lr, ip, r0
 800bd9e:	dc02      	bgt.n	800bda6 <__ieee754_sqrt+0xea>
 800bda0:	d113      	bne.n	800bdca <__ieee754_sqrt+0x10e>
 800bda2:	458e      	cmp	lr, r1
 800bda4:	d811      	bhi.n	800bdca <__ieee754_sqrt+0x10e>
 800bda6:	f1be 0f00 	cmp.w	lr, #0
 800bdaa:	eb0e 000c 	add.w	r0, lr, ip
 800bdae:	da3f      	bge.n	800be30 <__ieee754_sqrt+0x174>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	db3d      	blt.n	800be30 <__ieee754_sqrt+0x174>
 800bdb4:	f102 0801 	add.w	r8, r2, #1
 800bdb8:	1a9b      	subs	r3, r3, r2
 800bdba:	458e      	cmp	lr, r1
 800bdbc:	bf88      	it	hi
 800bdbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bdc2:	eba1 010e 	sub.w	r1, r1, lr
 800bdc6:	4465      	add	r5, ip
 800bdc8:	4642      	mov	r2, r8
 800bdca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bdce:	3c01      	subs	r4, #1
 800bdd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bdd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bdd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bddc:	d1dc      	bne.n	800bd98 <__ieee754_sqrt+0xdc>
 800bdde:	4319      	orrs	r1, r3
 800bde0:	d01b      	beq.n	800be1a <__ieee754_sqrt+0x15e>
 800bde2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800be60 <__ieee754_sqrt+0x1a4>
 800bde6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800be64 <__ieee754_sqrt+0x1a8>
 800bdea:	e9da 0100 	ldrd	r0, r1, [sl]
 800bdee:	e9db 2300 	ldrd	r2, r3, [fp]
 800bdf2:	f7f4 fa59 	bl	80002a8 <__aeabi_dsub>
 800bdf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4640      	mov	r0, r8
 800be00:	4649      	mov	r1, r9
 800be02:	f7f4 fe85 	bl	8000b10 <__aeabi_dcmple>
 800be06:	b140      	cbz	r0, 800be1a <__ieee754_sqrt+0x15e>
 800be08:	f1b5 3fff 	cmp.w	r5, #4294967295
 800be0c:	e9da 0100 	ldrd	r0, r1, [sl]
 800be10:	e9db 2300 	ldrd	r2, r3, [fp]
 800be14:	d10e      	bne.n	800be34 <__ieee754_sqrt+0x178>
 800be16:	3601      	adds	r6, #1
 800be18:	4625      	mov	r5, r4
 800be1a:	1073      	asrs	r3, r6, #1
 800be1c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800be20:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800be24:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800be28:	086b      	lsrs	r3, r5, #1
 800be2a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800be2e:	e759      	b.n	800bce4 <__ieee754_sqrt+0x28>
 800be30:	4690      	mov	r8, r2
 800be32:	e7c1      	b.n	800bdb8 <__ieee754_sqrt+0xfc>
 800be34:	f7f4 fa3a 	bl	80002ac <__adddf3>
 800be38:	e9da 8900 	ldrd	r8, r9, [sl]
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fe5a 	bl	8000afc <__aeabi_dcmplt>
 800be48:	b120      	cbz	r0, 800be54 <__ieee754_sqrt+0x198>
 800be4a:	1cab      	adds	r3, r5, #2
 800be4c:	bf08      	it	eq
 800be4e:	3601      	addeq	r6, #1
 800be50:	3502      	adds	r5, #2
 800be52:	e7e2      	b.n	800be1a <__ieee754_sqrt+0x15e>
 800be54:	1c6b      	adds	r3, r5, #1
 800be56:	f023 0501 	bic.w	r5, r3, #1
 800be5a:	e7de      	b.n	800be1a <__ieee754_sqrt+0x15e>
 800be5c:	7ff00000 	.word	0x7ff00000
 800be60:	0800c448 	.word	0x0800c448
 800be64:	0800c440 	.word	0x0800c440

0800be68 <_init>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

0800be74 <_fini>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr
